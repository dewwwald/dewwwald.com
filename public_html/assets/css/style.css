@charset "UTF-8";
/*
Theme Name: Theme_Name
Theme URI: theme_url
Description: theme_description
Author: author_name
Author URI: author_url
Version: theme_version
.
Any general information, license statements, plugin requirements, or any other information you
might want to share.
.
*/
/**
 * Config
 *
 * Config is defined before defaults so that variables override their !default
 * counterparts
 */
/*------------------------------------*    VARS.SCSS
\*------------------------------------*/
/**
 * Any variables you find set in this framework's `_defaults.scss` that you do not wish to
 * keep, simply redefine here. This means that if this framework, for example, sets
 * your `$fs-base` at 16px and you wish it to be 14px, simply redeclare
 * that variable in this file. this framework ignores its own variables in favour of
 * using your own, so you can completely modify how this framework works without ever
 * having to alter the framework itself.
 */
/*------------------------------------*    $OBJECTS-AND-ABSTRACTIONS
\*------------------------------------*/
/**
 * All of this framework's objects and abstractions are initially turned off by
 * default. This means that you start any project with as little as possible,
 * and introducing objects and abstractions is as simple as switching the
 * following variables to `true`.
 */
/*------------------------------------*    $OVERRIDES
\*------------------------------------*/
/**
 * Place any variables that should override core _defaults.scss here.
 */
/*------------------------------------*    $CUSTOM
\*------------------------------------*/
/**
 * Place any of your own variables that sit on top of core _defaults.scss here.
 */
/*------------------------------------*    $FONTS
\*------------------------------------*/
/**
 * Icon Font
 *
 * Dependant on $use-icons being true. These variables are used in the font-face mixin.
 *
 * This font is enabled via custom/base/_fonts.scss
 */
/**
 * Base Font Face
 *
 * This font is enabled via custom/base/_fonts.scss
 */
/**
 * Base Font Variations
 */
/**
 * Header Font Face
 *
 * This font is enabled via custom/header/_fonts.scss
 */
/**
 * header Font Variations
 */
/*------------------------------------*    $COLORS
\*------------------------------------*/
/**
 * The base color for text, borders, etc.
 */
/**
 * The primary non-base color
 */
/**
 * The secondary non-base color
 */
/**
 * The tertiary non-base color
 */
/*------------------------------------*  $DEFAULTS
\*------------------------------------*/
/**
 * inuit.css’ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */
/*------------------------------------*  $BASE
\*------------------------------------*/
/**
 * Base variables. These are included first as they provide a basis for calculations
 * throughout the framework.
 */
/**
 * Base font-family.
 */
/**
 * Default colour for objects’ borders etc.
 */
/*------------------------------------*  $FRAMEWORK
\*------------------------------------*/
/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*  $DEBUG
\*------------------------------------*/
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/*------------------------------------*  $RAILS
\*------------------------------------*/
/**
 * Using Rails? You'll need the font-face mixin to behave differently to correctly
 * load font assets
 */
/*------------------------------------*  $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*  $PREFIXES
\*------------------------------------*/
/*------------------------------------*  $GRIDS
\*------------------------------------*/
/**
 * Use either a flexbox based grid, an inline-block based grid, or both!
 */
/**
 * A unitless value will output rem units with px fallback for gutters,
 * otherwise a unit value will output only that value
 */
/*------------------------------------*  $RESPONSIVE
\*------------------------------------*/
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Note: `$push` variable above must be set to true before enabling these.
 */
/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/*------------------------------------*  $FONT-SIZES
\*------------------------------------*/
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/*------------------------------------*  $QUOTES
\*------------------------------------*/
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/*------------------------------------*  $TABLES
\*------------------------------------*/
/*------------------------------------*  $IMAGES
\*------------------------------------*/
/*------------------------------------*  $CODE
\*------------------------------------*/
/*------------------------------------*  $BRAND
\*------------------------------------*/
/**
 * Brand stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/*------------------------------------*  $COLORS
\*------------------------------------*/
/*------------------------------------*  $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/**
 * Which objects and abstractions would you like to use?
 */
/**
 * Import the rest of the framework, followed by custom styles
 */
/*------------------------------------*    INUIT.CSS
\*------------------------------------*/
/*!*
 *
 * inuitcss.com -- @inuitcss -- @csswizardry
 *
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 *
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 *
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 *
 * Owing to the amount of comments please only ever use minified CSS in
 * production. This file is purely a dev document.
 *
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 *
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 *
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 *
 * LICENSE
 *
 * Copyright 2013 Harry Roberts
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Thank you for choosing inuit.css. May your web fonts render perfectly.
 */
/*------------------------------------*    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............You’re reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 *
 * MIXINS..............Super-simple Sass stuff
 * NORMALIZE...........normalize.css
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 *
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 *
 * GRIDS...............Fluid, proportional and nestable grids
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * MARGINALIA..........Simple marginalia content
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * LINK-COMPLEX........
 * FLYOUT..............Flyout-on-hover object
 * ARROWS..............CSS arrows
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BEAUTONS............Use the beautons micro library
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 *
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 *
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 *
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*    $BASE
\*------------------------------------*/
/*------------------------------------*    $FUNCTIONS
\*------------------------------------*/
/*------------------------------------*    $MAP GET DEEP
\*------------------------------------*/
/*------------------------------------*    $PX TO REM
\*------------------------------------*/
/*
 * Convert a px value to the equivalent rem value.
 *
 * Takes both px values, and unitless values.
 *
 * Will use $fs-base if it exists, otherwise takes a second parameter, defaulted to
 * 16px.
 *
 * Value provided should be same as pixel value on html tag
 *
 * Example:

  .my-class {
    font-size: px-to-rem(24px); // => 1.5rem
  }

  // or

  .my-class {
    font-size: px-to-rem(24); // => 1.5rem
  }
 */
/*------------------------------------*    $MIXINS
\*------------------------------------*/
/*------------------------------------*    $ACCESSIBILITY
\*------------------------------------*/
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *     01  02  03
 *  +------------------+
 * 12 |          | 04
 *  |          |
 * 11 |          | 05
 *  |          |
 * 10 |          | 06
 *  +------------------+
 *     09  08  07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
     background-color:#BADA55;
     border:1px solid #ACE;
     @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
     @include headings(1, 3){
       color:#BADA55;
     }
  }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/*------------------------------------*    $BASE
\*------------------------------------*/
/*------------------------------------*  $ALL BASE IMPORTS
\*------------------------------------*/
/*------------------------------------*  $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
  * Let’s make the box model all nice, shall we...?
  */
*, *:before, *:after {
  box-sizing: border-box; }

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u, ins {
  text-decoration: none; }

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic; }

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer; }

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none; }

/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent displaying `audio` without controls in Mobile Safari 4/5/6/7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address inconsistent styling of `abbr[title]`.
 * 1. Correct styling in Firefox 39 and Opera 12.
 * 2. Correct missing styling in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Address inconsistent styling of b and strong.
 * 1. Correct duplicate application of `bolder` in Safari 6.0.2.
 * 2. Correct style set to `bold` in Edge 12+, Safari 6.2+, and Chrome 18+.
 */
b,
strong {
  font-weight: inherit;
  /* 1 */ }

b,
strong {
  font-weight: bolder;
  /* 2 */ }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address inconsistent styling of `hr`.
 * 1. Correct `box-sizing` set to `border-box` in Firefox.
 * 2. Correct `overflow` set to `hidden` in IE 8/9/10/11 and Edge 12.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * 1. Correct inheritance and scaling of font-size for preformatted text.
 * 2. Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct font properties not being inherited.
 * 2. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Restore focus style in Firefox 4+ (unset by a rule above)
 */
button:-moz-focusring,
input:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * Address `appearance` set to `searchfield` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Restore font weight (unset by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/*------------------------------------*  $DOCUMENT
\*------------------------------------*/
html {
  /*
   * Can't use relative units on html due to bug on
   * Chrome and Safari.
   * CodePen: http://codepen.io/larrybotha/pen/wKYYXE
   * Chrome Bug Tracker: https://code.google.com/p/chromium/issues/detail?id=319623#c16
   */
  /*
   * TODO: use relative unit once Chrome bug is fixed
   */
  font-size: 18px;
  min-height: 100%; }

html, body, button, input, select, textarea {
  font-family: "OpenSans", Arial, sans-serif;
  color: #404040; }

/**
 * FireFox on Android adds gradients to these elements
 * Let's end the tyranny
 */
button, input, select, textarea {
  background-image: none; }

body {
  background-color: #fff;
  font-size: 1em;
  line-height: 1.22222;
  margin: 0; }

/*
 * Remove text-shadow in selection highlight: h5bp.com/i
 * These selection declarations have to be separate
 */
::-moz-selection {
  background: #acded5;
  color: #fff;
  text-shadow: none; }

::selection {
  background: #acded5;
  color: #fff;
  text-shadow: none; }

/*------------------------------------*  $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
pre {
  overflow: auto; }

pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit; }

/*------------------------------------*  $FORMS
\*------------------------------------*/
/**
 *
 * Demo: jsfiddle.net/inuitcss/MhHHU
 *
 */
fieldset {
  padding: 1.5; }

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 */
.text-input,
textarea {
  /**
   * Style these via your theme stylesheet.
   */ }

/**
 * Radios and Checkboxes
 *
 * Make radios and checkboxes appear clickable
 */
input[type="radio"],
input[type="checkbox"] {
  cursor: pointer;
  border: none; }

/*------------------------------------*		$SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dl,
blockquote, p, address,
table,
fieldset, figure,
pre {
  margin-top: 0;
  margin-bottom: 27px;
  margin-bottom: 1.5rem; }

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
hr {
  margin-bottom: 27px;
  margin-bottom: 1.5rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  margin-left: 1.5em; }

/*------------------------------------*  $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=fs--h1` to a `h3`; a double-stranded
 * heading hierarchy.
 */
h1, .fs--h1 {
  font-size: 2.66667rem; }

h2, .fs--h2, h1 small, .persona__main {
  font-size: 2.22222rem; }

h3, .fs--h3 {
  font-size: 2rem; }

h4, .fs--h4, .menu__item > a {
  font-size: 1.33333rem; }

h5, .fs--h5 {
  font-size: 1rem; }

h6, .fs--h6 {
  font-size: 0.88889rem; }

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
.fs--giga {
  font-size: 5.33333rem; }

.fs--mega {
  font-size: 4rem; }

.fs--kilo, .portfolio-item__title {
  font-size: 2.66667rem; }

/*------------------------------------*    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/*
 * Prevent images and embeds from exceeding width of containing element
 * width:; and height:; above apply
 */
img, embed, object, video {
  max-width: 100%;
  height: auto; }

/**
 * Images in `figure` elements.
 */
figure > img {
  display: block; }

/*------------------------------------*    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul,
li > ol {
  margin-top: 0;
  margin-bottom: 0; }

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
.numbered-list {
  list-style-type: decimal; }

/*------------------------------------*    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede,
.lead {
  font-size: 1.125rem; }

/*------------------------------------*    $QUOTES
\*------------------------------------*/
/**
 * If English quotes are set in `_vars.scss`, define them here.
 */
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * Inline quotes.
 */
q {
  quotes: "‘" "’" "\\201C " "\\201D "; }
  q:before {
    content: "\2018";
    content: open-quote; }
  q:after {
    content: "\2019";
    content: close-quote; }
  q q:before {
    content: "\201C";
    content: open-quote; }
  q q:after {
    content: "\201D";
    content: close-quote; }

/**
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */
blockquote p:first-of-type {
  margin-top: 0; }

blockquote p:last-of-type {
  margin-bottom: 0; }

.source {
  display: block;
  text-indent: 0; }
  .source:before {
    content: "\2014"; }

/*------------------------------------*    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */
.fs--milli, .btn--base {
  font-size: 0.77778rem; }

.fs--micro {
  font-size: 0.55556rem; }

.fs--nano {
  font-size: 0.44444rem; }

/*------------------------------------*  $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
     <colgroup>
       <col class=t10>
       <col class=t10>
       <col class=t10>
       <col>
     </colgroup>
     <thead>
       <tr>
         <th colspan=3>Foo</th>
         <th>Bar</th>
       </tr>
       <tr>
         <th>Lorem</th>
         <th>Ipsum</th>
         <th class=numerical>Dolor</th>
         <th>Sit</th>
       </tr>
     </thead>
     <tbody>
       <tr>
         <th rowspan=3>Sit</th>
         <td>Dolor</td>
         <td class=numerical>03.788</td>
         <td>Lorem</td>
       </tr>
       <tr>
         <td>Dolor</td>
         <td class=numerical>32.210</td>
         <td>Lorem</td>
       </tr>
       <tr>
         <td>Dolor</td>
         <td class=numerical>47.797</td>
         <td>Lorem</td>
       </tr>
       <tr>
         <th rowspan=2>Sit</th>
         <td>Dolor</td>
         <td class=numerical>09.640</td>
         <td>Lorem</td>
       </tr>
       <tr>
         <td>Dolor</td>
         <td class=numerical>12.117</td>
         <td>Lorem</td>
       </tr>
     </tbody>
   </table>
 *
 */
table {
  width: 100%; }

th,
td {
  padding: 6.75px;
  padding: 0.375rem;
  text-align: left; }
  @media screen and (min-width: 480px) {
    th,
    td {
      padding: 13.5px;
      padding: 0.75rem; } }

/*------------------------------------*    $COMPONENTS
\*------------------------------------*/
/*------------------------------------*    $ALL COMPONENTS
\*------------------------------------*/
/*------------------------------------*    $BUTTONS
\*------------------------------------*/
.btn--base {
  position: relative;
  display: inline-block;
  background-image: none;
  background-color: transparent;
  text-align: center;
  line-height: normal;
  vertical-align: middle;
  height: auto;
  margin: 0;
  padding: 0;
  border: 0;
  white-space: nowrap; }
  .btn--base:active, .btn--base:focus {
    outline: none; }

.btn--base {
  cursor: pointer;
  transition: all 150ms ease-in; }
  .btn--base, .btn--base:hover, .btn--base:focus {
    text-decoration: none; }
  .btn--base:active, .btn--base:focus {
    transition: none; }
  [disabled].btn--base, .btn--base:disabled {
    cursor: default; }

/*------------------------------------*    $RATIO OBJECT
\*------------------------------------*/
/**
 * An object which scales proportionately
 *
 * http://bit.ly/19I8iR8
 */
.portfolio-item {
  position: relative;
  overflow: hidden; }
  .portfolio-item:before {
    content: "";
    display: block; }

.portfolio-item__inner {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0; }

/*------------------------------------*    $LAYOUT
\*------------------------------------*/
/*------------------------------------*    $ALL LAYOUT
\*------------------------------------*/
/*------------------------------------*    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:before, .cf:after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="gw">
       <div class="g  one-third">
           <p>One third grid</p>
       </div><!--
    --><div class="g  two-thirds">
           <p>Two thirds grid</p>
       </div><!--
    --><div class="g  one-half">
           <p>One half grid</p>
       </div><!--
    --><div class="g  one-quarter">
           <p>One quarter grid</p>
       </div><!--
    --><div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */
/**
 * Grid wrapper
 */
.gw, .gw--no-guts {
  list-style: none;
  margin-bottom: 0;
  margin-left: -36px;
  margin-left: -2rem;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap; }
  .oldie .gw, .oldie .gw--no-guts {
    display: inline-block;
    width: 100%;
    width: calc(100% + 2em); }

/**
 * very infrequently occuring grid wrappers as children of grid wrappers.
 */
[class*="gw"] > [class*="gw"] {
  margin-left: 0; }

/**
   * grid items
   */
.g, .g--tall, .g--auto, .g--shrink-wrap, sidebar, main {
  padding-left: 36px;
  padding-left: 2rem;
  width: 100%; }
  .oldie .g, .oldie .g--tall, .oldie .g--auto, .oldie .g--shrink-wrap, .oldie sidebar, .oldie main {
    display: inline-block;
    vertical-align: top; }

/**
   * Allow the content of a column to occupy the full height of the
   * column
   *
   * Child div must have flex: 1; or width: 100%; set to fill horizontal
   * space
   *
   * Does not work for legacy browsers
   */
.g--tall {
  display: -ms-flexbox;
  display: flex; }

/**
   * Columns that automatically fill the remaining horizontal space
   *
   * To be used as is, without column width modifiers. Viewport modifiers will
   * not override the effect of auto.
   *
   * Works mostly on <= IE9, mostly
   * Requires .oldie class on html tag
   */
.g--auto {
  -ms-flex: 1;
      flex: 1; }
  .oldie .g--auto {
    display: table-cell; }

/**
   * Columns that shrink wrap around content - ideal for .g--auto to occupy
   * remaining space.
   *
   * To be used as is, without column width modifiers. Viewport modifiers will
   * override shrink-wrap effect
   *
   * Works mostly on <= IE9, mostly
   */
.g--shrink-wrap {
  width: auto; }
  .oldie .g--shrink-wrap {
    display: table-cell; }

/**
* reversed grids
*/
/**
* gutterless grids have all the properties of regular grids, minus any spacing.
*/
.gw--no-guts {
  margin-left: 0; }
  .gw--no-guts > .g, .gw--no-guts > .g--tall, .gw--no-guts > .g--auto, .gw--no-guts > .g--shrink-wrap, .gw--no-guts > sidebar, .gw--no-guts > main {
    padding-left: 0; }

/**
* centered grids align grid items centrally without needing to use push or pull
* classes.
*/
/**
 * right aligned grids
 */
/**
 * middle aligned grids
 */
/**
 * bottom aligned grids
 */
/*------------------------------------*		$WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
	* Whole
	*/
.g-1\/1 {
  width: 100%; }

/**
	* Halves
	*/
.g-1\/2, .g-2\/4, .g-3\/6, .g-4\/8, .g-5\/10, .g-6\/12 {
  width: 50%; }

/**
	* Thirds
	*/
.g-1\/3, .g-2\/6, .g-4\/12 {
  width: 33.333%; }

.g-2\/3, .g-4\/6, .g-8\/12 {
  width: 66.666%; }

/**
	* Quarters
	*/
.g-1\/4, .g-2\/8, .g-3\/12 {
  width: 25%; }

.g-3\/4, .g-6\/8, .g-9\/12 {
  width: 75%; }

/**
	* Fifths
	*/
.g-1\/5, .g-2\/10 {
  width: 20%; }

.g-2\/5, .g-4\/10 {
  width: 40%; }

.g-3\/5, .g-6\/10 {
  width: 60%; }

.g-4\/5, .g-8\/10 {
  width: 80%; }

/**
	* Sixths
	*/
.g-1\/6, .g-2\/12 {
  width: 16.666%; }

.g-5\/6, .g-10\/12 {
  width: 83.333%; }

/**
	* Eighths
	*/
.g-1\/8 {
  width: 12.5%; }

.g-3\/8 {
  width: 37.5%; }

.g-5\/8 {
  width: 62.5%; }

.g-7\/8 {
  width: 87.5%; }

/**
	* Tenths
	*/
.g-1\/10 {
  width: 10%; }

.g-3\/10 {
  width: 30%; }

.g-7\/10 {
  width: 70%; }

.g-9\/10 {
  width: 90%; }

/**
	* Twelfths
	*/
.g-1\/12 {
  width: 8.333%; }

.g-5\/12 {
  width: 41.666%; }

.g-7\/12 {
  width: 58.333%; }

.g-11\/12 {
  width: 91.666%; }

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  g-1/4	g-lap-1/2	g-palm-1/1"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a of-4 of the
 * horizontal space, a of-2 of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media only screen and (max-width: 480px) {
  /**
	* Whole
	*/
  .g-palm-1\/1 {
    width: 100%; }
  /**
	* Halves
	*/
  .g-palm-1\/2, .g-palm-2\/4, .g-palm-3\/6, .g-palm-4\/8, .g-palm-5\/10, .g-palm-6\/12 {
    width: 50%; }
  /**
	* Thirds
	*/
  .g-palm-1\/3, .g-palm-2\/6, .g-palm-4\/12 {
    width: 33.333%; }
  .g-palm-2\/3, .g-palm-4\/6, .g-palm-8\/12 {
    width: 66.666%; }
  /**
	* Quarters
	*/
  .g-palm-1\/4, .g-palm-2\/8, .g-palm-3\/12 {
    width: 25%; }
  .g-palm-3\/4, .g-palm-6\/8, .g-palm-9\/12 {
    width: 75%; }
  /**
	* Fifths
	*/
  .g-palm-1\/5, .g-palm-2\/10 {
    width: 20%; }
  .g-palm-2\/5, .g-palm-4\/10 {
    width: 40%; }
  .g-palm-3\/5, .g-palm-6\/10 {
    width: 60%; }
  .g-palm-4\/5, .g-palm-8\/10 {
    width: 80%; }
  /**
	* Sixths
	*/
  .g-palm-1\/6, .g-palm-2\/12 {
    width: 16.666%; }
  .g-palm-5\/6, .g-palm-10\/12 {
    width: 83.333%; }
  /**
	* Eighths
	*/
  .g-palm-1\/8 {
    width: 12.5%; }
  .g-palm-3\/8 {
    width: 37.5%; }
  .g-palm-5\/8 {
    width: 62.5%; }
  .g-palm-7\/8 {
    width: 87.5%; }
  /**
	* Tenths
	*/
  .g-palm-1\/10 {
    width: 10%; }
  .g-palm-3\/10 {
    width: 30%; }
  .g-palm-7\/10 {
    width: 70%; }
  .g-palm-9\/10 {
    width: 90%; }
  /**
	* Twelfths
	*/
  .g-palm-1\/12 {
    width: 8.333%; }
  .g-palm-5\/12 {
    width: 41.666%; }
  .g-palm-7\/12 {
    width: 58.333%; }
  .g-palm-11\/12 {
    width: 91.666%; } }

@media only screen and (min-width: 481px) and (max-width: 919px) {
  /**
	* Whole
	*/
  .g-lap-1\/1 {
    width: 100%; }
  /**
	* Halves
	*/
  .g-lap-1\/2, .g-lap-2\/4, .g-lap-3\/6, .g-lap-4\/8, .g-lap-5\/10, .g-lap-6\/12 {
    width: 50%; }
  /**
	* Thirds
	*/
  .g-lap-1\/3, .g-lap-2\/6, .g-lap-4\/12 {
    width: 33.333%; }
  .g-lap-2\/3, .g-lap-4\/6, .g-lap-8\/12 {
    width: 66.666%; }
  /**
	* Quarters
	*/
  .g-lap-1\/4, .g-lap-2\/8, .g-lap-3\/12 {
    width: 25%; }
  .g-lap-3\/4, .g-lap-6\/8, .g-lap-9\/12 {
    width: 75%; }
  /**
	* Fifths
	*/
  .g-lap-1\/5, .g-lap-2\/10 {
    width: 20%; }
  .g-lap-2\/5, .g-lap-4\/10 {
    width: 40%; }
  .g-lap-3\/5, .g-lap-6\/10 {
    width: 60%; }
  .g-lap-4\/5, .g-lap-8\/10 {
    width: 80%; }
  /**
	* Sixths
	*/
  .g-lap-1\/6, .g-lap-2\/12 {
    width: 16.666%; }
  .g-lap-5\/6, .g-lap-10\/12 {
    width: 83.333%; }
  /**
	* Eighths
	*/
  .g-lap-1\/8 {
    width: 12.5%; }
  .g-lap-3\/8 {
    width: 37.5%; }
  .g-lap-5\/8 {
    width: 62.5%; }
  .g-lap-7\/8 {
    width: 87.5%; }
  /**
	* Tenths
	*/
  .g-lap-1\/10 {
    width: 10%; }
  .g-lap-3\/10 {
    width: 30%; }
  .g-lap-7\/10 {
    width: 70%; }
  .g-lap-9\/10 {
    width: 90%; }
  /**
	* Twelfths
	*/
  .g-lap-1\/12 {
    width: 8.333%; }
  .g-lap-5\/12 {
    width: 41.666%; }
  .g-lap-7\/12 {
    width: 58.333%; }
  .g-lap-11\/12 {
    width: 91.666%; } }

@media only screen and (min-width: 481px) {
  /**
	* Whole
	*/
  .g-lap-and-up-1\/1 {
    width: 100%; }
  /**
	* Halves
	*/
  .g-lap-and-up-1\/2, .g-lap-and-up-2\/4, .g-lap-and-up-3\/6, .g-lap-and-up-4\/8, .g-lap-and-up-5\/10, .g-lap-and-up-6\/12 {
    width: 50%; }
  /**
	* Thirds
	*/
  .g-lap-and-up-1\/3, .g-lap-and-up-2\/6, .g-lap-and-up-4\/12 {
    width: 33.333%; }
  .g-lap-and-up-2\/3, .g-lap-and-up-4\/6, .g-lap-and-up-8\/12 {
    width: 66.666%; }
  /**
	* Quarters
	*/
  .g-lap-and-up-1\/4, .g-lap-and-up-2\/8, .g-lap-and-up-3\/12 {
    width: 25%; }
  .g-lap-and-up-3\/4, .g-lap-and-up-6\/8, .g-lap-and-up-9\/12 {
    width: 75%; }
  /**
	* Fifths
	*/
  .g-lap-and-up-1\/5, .g-lap-and-up-2\/10 {
    width: 20%; }
  .g-lap-and-up-2\/5, .g-lap-and-up-4\/10 {
    width: 40%; }
  .g-lap-and-up-3\/5, .g-lap-and-up-6\/10 {
    width: 60%; }
  .g-lap-and-up-4\/5, .g-lap-and-up-8\/10 {
    width: 80%; }
  /**
	* Sixths
	*/
  .g-lap-and-up-1\/6, .g-lap-and-up-2\/12 {
    width: 16.666%; }
  .g-lap-and-up-5\/6, .g-lap-and-up-10\/12 {
    width: 83.333%; }
  /**
	* Eighths
	*/
  .g-lap-and-up-1\/8 {
    width: 12.5%; }
  .g-lap-and-up-3\/8 {
    width: 37.5%; }
  .g-lap-and-up-5\/8 {
    width: 62.5%; }
  .g-lap-and-up-7\/8 {
    width: 87.5%; }
  /**
	* Tenths
	*/
  .g-lap-and-up-1\/10 {
    width: 10%; }
  .g-lap-and-up-3\/10 {
    width: 30%; }
  .g-lap-and-up-7\/10 {
    width: 70%; }
  .g-lap-and-up-9\/10 {
    width: 90%; }
  /**
	* Twelfths
	*/
  .g-lap-and-up-1\/12 {
    width: 8.333%; }
  .g-lap-and-up-5\/12 {
    width: 41.666%; }
  .g-lap-and-up-7\/12 {
    width: 58.333%; }
  .g-lap-and-up-11\/12 {
    width: 91.666%; } }

@media only screen and (max-width: 919px) {
  /**
	* Whole
	*/
  .g-portable-1\/1 {
    width: 100%; }
  /**
	* Halves
	*/
  .g-portable-1\/2, .g-portable-2\/4, .g-portable-3\/6, .g-portable-4\/8, .g-portable-5\/10, .g-portable-6\/12 {
    width: 50%; }
  /**
	* Thirds
	*/
  .g-portable-1\/3, .g-portable-2\/6, .g-portable-4\/12 {
    width: 33.333%; }
  .g-portable-2\/3, .g-portable-4\/6, .g-portable-8\/12 {
    width: 66.666%; }
  /**
	* Quarters
	*/
  .g-portable-1\/4, .g-portable-2\/8, .g-portable-3\/12 {
    width: 25%; }
  .g-portable-3\/4, .g-portable-6\/8, .g-portable-9\/12 {
    width: 75%; }
  /**
	* Fifths
	*/
  .g-portable-1\/5, .g-portable-2\/10 {
    width: 20%; }
  .g-portable-2\/5, .g-portable-4\/10 {
    width: 40%; }
  .g-portable-3\/5, .g-portable-6\/10 {
    width: 60%; }
  .g-portable-4\/5, .g-portable-8\/10 {
    width: 80%; }
  /**
	* Sixths
	*/
  .g-portable-1\/6, .g-portable-2\/12 {
    width: 16.666%; }
  .g-portable-5\/6, .g-portable-10\/12 {
    width: 83.333%; }
  /**
	* Eighths
	*/
  .g-portable-1\/8 {
    width: 12.5%; }
  .g-portable-3\/8 {
    width: 37.5%; }
  .g-portable-5\/8 {
    width: 62.5%; }
  .g-portable-7\/8 {
    width: 87.5%; }
  /**
	* Tenths
	*/
  .g-portable-1\/10 {
    width: 10%; }
  .g-portable-3\/10 {
    width: 30%; }
  .g-portable-7\/10 {
    width: 70%; }
  .g-portable-9\/10 {
    width: 90%; }
  /**
	* Twelfths
	*/
  .g-portable-1\/12 {
    width: 8.333%; }
  .g-portable-5\/12 {
    width: 41.666%; }
  .g-portable-7\/12 {
    width: 58.333%; }
  .g-portable-11\/12 {
    width: 91.666%; } }

@media only screen and (min-width: 920px) {
  /**
	* Whole
	*/
  .g-desk-1\/1 {
    width: 100%; }
  /**
	* Halves
	*/
  .g-desk-1\/2, .g-desk-2\/4, .g-desk-3\/6, .g-desk-4\/8, .g-desk-5\/10, .g-desk-6\/12 {
    width: 50%; }
  /**
	* Thirds
	*/
  .g-desk-1\/3, .g-desk-2\/6, .g-desk-4\/12 {
    width: 33.333%; }
  .g-desk-2\/3, .g-desk-4\/6, .g-desk-8\/12 {
    width: 66.666%; }
  /**
	* Quarters
	*/
  .g-desk-1\/4, .g-desk-2\/8, .g-desk-3\/12 {
    width: 25%; }
  .g-desk-3\/4, .g-desk-6\/8, .g-desk-9\/12 {
    width: 75%; }
  /**
	* Fifths
	*/
  .g-desk-1\/5, .g-desk-2\/10 {
    width: 20%; }
  .g-desk-2\/5, .g-desk-4\/10 {
    width: 40%; }
  .g-desk-3\/5, .g-desk-6\/10 {
    width: 60%; }
  .g-desk-4\/5, .g-desk-8\/10 {
    width: 80%; }
  /**
	* Sixths
	*/
  .g-desk-1\/6, .g-desk-2\/12 {
    width: 16.666%; }
  .g-desk-5\/6, .g-desk-10\/12 {
    width: 83.333%; }
  /**
	* Eighths
	*/
  .g-desk-1\/8 {
    width: 12.5%; }
  .g-desk-3\/8 {
    width: 37.5%; }
  .g-desk-5\/8 {
    width: 62.5%; }
  .g-desk-7\/8 {
    width: 87.5%; }
  /**
	* Tenths
	*/
  .g-desk-1\/10 {
    width: 10%; }
  .g-desk-3\/10 {
    width: 30%; }
  .g-desk-7\/10 {
    width: 70%; }
  .g-desk-9\/10 {
    width: 90%; }
  /**
	* Twelfths
	*/
  .g-desk-1\/12 {
    width: 8.333%; }
  .g-desk-5\/12 {
    width: 41.666%; }
  .g-desk-7\/12 {
    width: 58.333%; }
  .g-desk-11\/12 {
    width: 91.666%; } }

/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
@media only screen and (min-width: 1440px) {
  /**
	* Whole
	*/
  .g-desk-wide-1\/1 {
    width: 100%; }
  /**
	* Halves
	*/
  .g-desk-wide-1\/2, .g-desk-wide-2\/4, .g-desk-wide-3\/6, .g-desk-wide-4\/8, .g-desk-wide-5\/10, .g-desk-wide-6\/12 {
    width: 50%; }
  /**
	* Thirds
	*/
  .g-desk-wide-1\/3, .g-desk-wide-2\/6, .g-desk-wide-4\/12 {
    width: 33.333%; }
  .g-desk-wide-2\/3, .g-desk-wide-4\/6, .g-desk-wide-8\/12 {
    width: 66.666%; }
  /**
	* Quarters
	*/
  .g-desk-wide-1\/4, .g-desk-wide-2\/8, .g-desk-wide-3\/12 {
    width: 25%; }
  .g-desk-wide-3\/4, .g-desk-wide-6\/8, .g-desk-wide-9\/12 {
    width: 75%; }
  /**
	* Fifths
	*/
  .g-desk-wide-1\/5, .g-desk-wide-2\/10 {
    width: 20%; }
  .g-desk-wide-2\/5, .g-desk-wide-4\/10 {
    width: 40%; }
  .g-desk-wide-3\/5, .g-desk-wide-6\/10 {
    width: 60%; }
  .g-desk-wide-4\/5, .g-desk-wide-8\/10 {
    width: 80%; }
  /**
	* Sixths
	*/
  .g-desk-wide-1\/6, .g-desk-wide-2\/12 {
    width: 16.666%; }
  .g-desk-wide-5\/6, .g-desk-wide-10\/12 {
    width: 83.333%; }
  /**
	* Eighths
	*/
  .g-desk-wide-1\/8 {
    width: 12.5%; }
  .g-desk-wide-3\/8 {
    width: 37.5%; }
  .g-desk-wide-5\/8 {
    width: 62.5%; }
  .g-desk-wide-7\/8 {
    width: 87.5%; }
  /**
	* Tenths
	*/
  .g-desk-wide-1\/10 {
    width: 10%; }
  .g-desk-wide-3\/10 {
    width: 30%; }
  .g-desk-wide-7\/10 {
    width: 70%; }
  .g-desk-wide-9\/10 {
    width: 90%; }
  /**
	* Twelfths
	*/
  .g-desk-wide-1\/12 {
    width: 8.333%; }
  .g-desk-wide-5\/12 {
    width: 41.666%; }
  .g-desk-wide-7\/12 {
    width: 58.333%; }
  .g-desk-wide-11\/12 {
    width: 91.666%; } }

/* endif */
/*------------------------------------*    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*    $DEBUG
\*------------------------------------*/
/* endif */
/*------------------------------------*    CUSTOM.CSS
\*------------------------------------*/
/*------------------------------------*    $UTILITIES
\*------------------------------------*/
/*------------------------------------*    $FUNCTIONS
\*------------------------------------*/
/*------------------------------------*    $MIXINS
\*------------------------------------*/
/*------------------------------------*    $MIXINS
\*------------------------------------*/
/*------------------------------------*    $MENUS
\*------------------------------------*/
/*------------------------------------*    $MENUS
\*------------------------------------*/
/*------------------------------------*    $COLLAPSED ANCHOR
\*------------------------------------*/
/*------------------------------------*    $MODIFIERS
\*------------------------------------*/
/*------------------------------------*    $BACKGROUND MIXINS
\*------------------------------------*/
/*------------------------------------*    $BACKGROUND LINK STATES MIXIN
\*------------------------------------*/
/*------------------------------------*    $TYPOGRAPHY MIXINS
\*------------------------------------*/
/*------------------------------------*    $TYPOGRAPHIC LINK STATES MIXIN
\*------------------------------------*/
/*------------------------------------*    $LAYOUT
\*------------------------------------*/
/*------------------------------------*    $ISLAND MIXINS
\*------------------------------------*/
/*------------------------------------*    $MARGIN AND PADDING
\*------------------------------------*/
/**
 * these mixins shouldn't need to be used directly except for in the placeholders
 * defined in _layouts.scss
 *
 * prefer extending those placeholders from your selectors over including these mixins
 *
 * this will reduce duplication of the same properties over your stylesheets, while
 * allowing you to reuse consistent spacing across your stylesheets
 *
 * situations on when to rather use an include is if you need to override margin or
 * padding in a media query when the placeholder has been extended. Due to source
 * order, you will not always be able to override the placeholders.
 * Including the relevant mixin will then allow you to override the properties in
 * your media query.
 */
/*------------------------------------*    $MARGIN
\*------------------------------------*/
/*------------------------------------*    $PADDING
\*------------------------------------*/
/*------------------------------------*    $WRAP MIXINS
\*------------------------------------*/
/*------------------------------------*    $BASE
\*------------------------------------*/
/*------------------------------------*    $BASE
\*------------------------------------*/
/*------------------------------------*    $DOCUMENT
\*------------------------------------*/
/**
 * This section houses styles for the base elements of the page, generally body and
 * html
 */
/**
 * Fix fatty fonts in Chrome and Firefox on Mac:
 * http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
 */
/**
 * Use sticky footer:
 * http://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/
 *
 * requires flex: 1 0 auto; on primary content
 */
/**
 * Prevent Chrome and Safari from flashing when a user taps on mobile
 */
html {
  -webkit-tap-highlight-color: transparent; }

/**
 * get 60fps scrolling by disabling pointer events:
 * http://www.thecssninja.com/javascript/pointer-events-60fps
 */
.disable-hover,
.disable-hover * {
  pointer-events: none !important; }

/*------------------------------------*    $FONTS
\*------------------------------------*/
/*------------------------------------*    $ICON FONT
\*------------------------------------*/
@font-face {
  font-family: "base-icon-font";
  src: url("../fnt/base-icon-font/base-icon-font.eot");
  src: url("../fnt/base-icon-font/base-icon-font.eot?#iefix") format("embedded-opentype"), url("../fnt/base-icon-font/base-icon-font.woff2") format("woff2"), url("../fnt/base-icon-font/base-icon-font.woff") format("woff"), url("../fnt/base-icon-font/base-icon-font.ttf") format("truetype"), url("../fnt/base-icon-font/base-icon-font.svg#base-icon-font") format("svg");
  font-weight: normal;
  font-style: normal; }

/*------------------------------------*    $BASE FONT
\*------------------------------------*/
@font-face {
  font-family: "OpenSans";
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot");
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot?#iefix") format("embedded-opentype"), url("../font/open-sans/OpenSans-Regular-webfont.woff2") format("woff2"), url("../font/open-sans/OpenSans-Regular-webfont.woff") format("woff"), url("../font/open-sans/OpenSans-Regular-webfont.ttf") format("truetype"), url("../font/open-sans/OpenSans-Regular-webfont.svg#OpenSans-Regular-webfont") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: "OpenSans";
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot");
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot?#iefix") format("embedded-opentype"), url("../font/open-sans/OpenSans-Regular-webfont.woff2") format("woff2"), url("../font/open-sans/OpenSans-Regular-webfont.woff") format("woff"), url("../font/open-sans/OpenSans-Regular-webfont.ttf") format("truetype"), url("../font/open-sans/OpenSans-Regular-webfont.svg#OpenSans-Regular-webfont") format("svg");
  font-weight: normal;
  font-style: italic; }

@font-face {
  font-family: "OpenSans";
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot");
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot?#iefix") format("embedded-opentype"), url("../font/open-sans/OpenSans-Regular-webfont.woff2") format("woff2"), url("../font/open-sans/OpenSans-Regular-webfont.woff") format("woff"), url("../font/open-sans/OpenSans-Regular-webfont.ttf") format("truetype"), url("../font/open-sans/OpenSans-Regular-webfont.svg#OpenSans-Regular-webfont") format("svg");
  font-weight: bold;
  font-style: normal; }

@font-face {
  font-family: "OpenSans";
  src: url("../font/open-sans/OpenSans-Light-webfont.eot");
  src: url("../font/open-sans/OpenSans-Light-webfont.eot?#iefix") format("embedded-opentype"), url("../font/open-sans/OpenSans-Light-webfont.woff2") format("woff2"), url("../font/open-sans/OpenSans-Light-webfont.woff") format("woff"), url("../font/open-sans/OpenSans-Light-webfont.ttf") format("truetype"), url("../font/open-sans/OpenSans-Light-webfont.svg#OpenSans-Light-webfont") format("svg");
  font-weight: lighter;
  font-style: normal; }

@font-face {
  font-family: "OpenSans";
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot");
  src: url("../font/open-sans/OpenSans-Regular-webfont.eot?#iefix") format("embedded-opentype"), url("../font/open-sans/OpenSans-Regular-webfont.woff2") format("woff2"), url("../font/open-sans/OpenSans-Regular-webfont.woff") format("woff"), url("../font/open-sans/OpenSans-Regular-webfont.ttf") format("truetype"), url("../font/open-sans/OpenSans-Regular-webfont.svg#OpenSans-Regular-webfont") format("svg");
  font-weight: bold;
  font-style: italic; }

/*------------------------------------*    $HEADER FONT
\*------------------------------------*/
@font-face {
  font-family: "Rokkitt";
  src: url("../font/Rokkitt/rokkitt-regular-webfont.eot");
  src: url("../font/Rokkitt/rokkitt-regular-webfont.eot?#iefix") format("embedded-opentype"), url("../font/Rokkitt/rokkitt-regular-webfont.woff2") format("woff2"), url("../font/Rokkitt/rokkitt-regular-webfont.woff") format("woff"), url("../font/Rokkitt/rokkitt-regular-webfont.ttf") format("truetype"), url("../font/Rokkitt/rokkitt-regular-webfont.svg#rokkitt-regular-webfont") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: "Rokkitt";
  src: url("../font/Rokkitt/rokkitt-bold-webfont.eot");
  src: url("../font/Rokkitt/rokkitt-bold-webfont.eot?#iefix") format("embedded-opentype"), url("../font/Rokkitt/rokkitt-bold-webfont.woff2") format("woff2"), url("../font/Rokkitt/rokkitt-bold-webfont.woff") format("woff"), url("../font/Rokkitt/rokkitt-bold-webfont.ttf") format("truetype"), url("../font/Rokkitt/rokkitt-bold-webfont.svg#rokkitt-bold-webfont") format("svg");
  font-weight: bold;
  font-style: normal; }

/*------------------------------------*    $FORMS
\*------------------------------------*/
/*------------------------------------*    $FORMS
\*------------------------------------*/
label {
  cursor: pointer;
  display: block;
  margin-bottom: 7.2px;
  margin-bottom: 0.4rem; }

textarea {
  resize: none;
  max-height: 120.0px;
  max-height: 6.66667rem; }

button, input, select, textarea {
  vertical-align: baseline; }

input, input[type='search'], textarea {
  border-radius: 0; }

input, textarea {
  border: 0px solid;
  height: auto;
  line-height: normal;
  padding: .5em; }

input, textarea, select {
  margin-bottom: 7.2px;
  margin-bottom: 0.4rem;
  display: block;
  width: 100%;
  -webkit-appearance: none;
  outline: none; }

input[type="radio"],
input[type="checkbox"] {
  width: auto; }

input[type="password"] {
  letter-spacing: .3em; }

input[type="password"]::-webkit-input-placeholder {
  letter-spacing: 0; }

input[type="password"]::-moz-placeholder {
  letter-spacing: 0; }

input[type="password"]:-ms-input-placeholder {
  letter-spacing: 0; }

input[type="password"]::placeholder {
  letter-spacing: 0; }

fieldset {
  border: 0px;
  padding: 0px;
  margin: 0px; }

/*------------------------------------*    $HEADINGS
\*------------------------------------*/
h1, h2, h3, h4, h5, h6 {
  font-weight: normal;
  line-height: 1; }

/*------------------------------------*    $IMAGES
\*------------------------------------*/
/**
 * Fix SVG images not scaling proportionately in IE9, IE10, IE11
 */
img[imageCover] {
  position: absolute; }

/*------------------------------------*    $LINKS
\*------------------------------------*/
a, button, .btn--base, .menu__sub {
  transition: all 150ms ease-in-out; }
  a:active, button:active, .btn--base:active, .menu__sub:active {
    transition: none; }

a {
  text-decoration: none; }
  a, a:hover {
    outline: 0; }

/*------------------------------------*    $LISTS
\*------------------------------------*/
.menu--primary, .menu__sub {
  list-style-type: none;
  padding: 0;
  margin: 0; }

/*------------------------------------*    $RULES
\*------------------------------------*/
/*------------------------------------*    $TABLES
\*------------------------------------*/
th, td {
  border: 1px solid; }

/*------------------------------------*    $BASE
\*------------------------------------*/
i {
  font-style: normal; }

blockquote {
  font-style: italic;
  font-size: 2rem;
  padding: 27px;
  padding: 1.5rem; }

kbd {
  border: 1px solid #e6e6e6;
  border-radius: 2px;
  font-size: 85%;
  padding: .25em .5em;
  vertical-align: middle; }

hr {
  border: 1px solid;
  border-left: 0;
  border-right: 0;
  border-top: 0; }

h1, h2, h3 {
  font-family: "Rokkitt", Arial, sans-serif;
  line-height: .8;
  vertical-align: middle;
  font-weight: bold; }

h1 small {
  display: block;
  font-weight: normal; }

/*------------------------------------*    $COMPONENTS
\*------------------------------------*/
/*------------------------------------*    $COMPONENTS
\*------------------------------------*/
/*------------------------------------*    $BUTTONS
\*------------------------------------*/
.btn--base {
  border: 1px solid;
  text-transform: uppercase;
  font-weight: bold;
  padding: 9px 36px;
  padding: 0.5rem 2rem; }

.btn--base {
  color: #272727; }
  .btn--base:hover, .btn--base:focus {
    color: #fff; }
  .btn--base:active {
    color: #272727; }

/*------------------------------------*    $LOADERS
\*------------------------------------*/
sidebar {
  width: 260px;
  background-color: #404040;
  color: white; }

/*------------------------------------*    $MENUS
\*------------------------------------*/
/*------------------------------------*    $MENU
\*------------------------------------*/
.menu--primary-container {
  padding: 29.88px 0;
  padding: 1.66rem 0; }

.menu--primary {
  display: block;
  padding: 29.88px 0;
  padding: 1.66rem 0; }

.menu__item {
  position: relative;
  display: block;
  text-align: right; }
  .menu__item > a {
    position: relative;
    font-family: "Rokkitt", Arial, sans-serif;
    display: inline-block;
    color: white;
    text-transform: uppercase;
    line-height: 2.5;
    outline: 0;
    padding-left: 36px;
    padding-left: 2rem;
    padding-right: 36px;
    padding-right: 2rem; }
    .menu__item > a:before {
      content: "";
      display: block;
      position: absolute;
      top: 63%;
      left: 36px;
      left: 2rem;
      right: 36px;
      right: 2rem;
      border-bottom: 1px solid;
      color: inherit;
      opacity: 0; }
    .menu__item > a:hover, .menu__item > a:focus {
      color: #d0ede7; }
    .menu__item > a:active {
      color: #acded5; }
  .menu__sub .menu__item {
    display: block; }

.menu__item--current > a,
.menu__item--current-parent > a, .menu__item--current > a:hover,
.menu__item--current-parent > a:hover, .menu__item--current > a:focus,
.menu__item--current-parent > a:focus, .menu__item--current > a:active,
.menu__item--current-parent > a:active {
  cursor: default;
  color: #acded5; }
  .menu__item--current > a:before,
  .menu__item--current-parent > a:before, .menu__item--current > a:hover:before,
  .menu__item--current-parent > a:hover:before, .menu__item--current > a:focus:before,
  .menu__item--current-parent > a:focus:before, .menu__item--current > a:active:before,
  .menu__item--current-parent > a:active:before {
    opacity: 1; }

.menu__item--current > a[pageScroll],
.menu__item--current-parent > a[pageScroll] {
  cursor: cursor;
  color: white; }
  .menu__item--current > a[pageScroll]:before,
  .menu__item--current-parent > a[pageScroll]:before {
    opacity: 0; }
  .menu__item--current > a[pageScroll]:hover,
  .menu__item--current-parent > a[pageScroll]:hover, .menu__item--current > a[pageScroll]:focus,
  .menu__item--current-parent > a[pageScroll]:focus {
    color: #d0ede7; }
  .menu__item--current > a[pageScroll]:active,
  .menu__item--current-parent > a[pageScroll]:active {
    color: #acded5; }

.menu__sub {
  background-color: #fff;
  max-height: 0;
  overflow: hidden;
  position: absolute; }
  a:hover + .menu__sub, .menu__sub:hover {
    border: 1px solid #404040;
    max-height: none;
    overflow: visible; }
  .menu__sub a {
    min-width: 225px;
    white-space: nowrap; }
  a:hover + .menu__sub > .menu__item a, .menu__sub:hover > .menu__item > a {
    max-height: 8em;
    padding-top: 1em;
    padding-bottom: 1em;
    opacity: 1; }

.menu__sub .menu__sub {
  top: 0;
  left: 100%; }

/*------------------------------------*    $PRIMARY MENU
\*------------------------------------*/
.menu--primary-container {
  position: relative; }

.menu--primary[AppMenu] {
  position: fixed;
  width: 260px;
  left: 0;
  transition: all 0ms linear;
  transform: translateZ(0); }
  @media only screen and (max-width: 480px) {
    .menu--primary[AppMenu] {
      right: 0;
      width: 100%;
      bottom: 0;
      white-space: nowrap; } }

.menu--primary .menu__item {
  letter-spacing: .15em; }
  @media only screen and (max-width: 480px) {
    .menu--primary .menu__item {
      display: inline-block; } }

/*------------------------------------*    $MENU TOGGLE
\*------------------------------------*/
.menu-toggle {
  display: none; }
  .menu-toggle:focus {
    outline: none; }
  @media only screen and (max-width: 919px) {
    .menu-toggle {
      display: inline-block; } }

/*------------------------------------*    $PAGES
\*------------------------------------*/
/*------------------------------------*    $PAGES
\*------------------------------------*/
persona {
  display: block;
  position: relative;
  background-color: #acded5; }

.persona {
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  margin: auto;
  text-align: center;
  transform: translateY(-50%); }

.persona__main {
  height: 40px;
  margin-bottom: 0px;
  line-height: 1;
  font-family: "OpenSans", Arial, sans-serif;
  font-weight: normal; }
  .persona__main span {
    line-height: .83;
    position: relative;
    font-family: "Rokkitt", Arial, sans-serif;
    font-size: 1.2em; }
    .persona__main span:after {
      content: "";
      display: block;
      position: absolute;
      color: inherit;
      border-bottom: 3px solid;
      top: 76%;
      left: .03em;
      right: .03em; }
  .persona__main.typing:after {
    content: "";
    display: inline-block;
    color: inherit;
    border-right: 2px solid;
    height: 100%;
    vertical-align: middle;
    animation-timing-function: ease-in-out;
    animation-duration: 1s;
    animation-iteration-count: infinite; }

.persona__img {
  margin: 0 auto;
  display: block;
  width: 220px;
  margin-bottom: 29.88px;
  margin-bottom: 1.66rem; }

.portfolio-item:before {
  padding-bottom: 100%; }

.portfolio-item__image {
  margin-bottom: 0px; }

.portfolio-item__over {
  position: absolute;
  top: 0;
  left: 0;
  bottom: auto;
  right: auto;
  width: 100%;
  height: 100%;
  text-align: center;
  transform: translateX(100%);
  z-index: 5;
  animation-timing-function: ease-out;
  animation-duration: 250ms;
  animation-iteration-count: 1;
  animation-direction: normal;
  animation-fill-mode: forwards; }
  .portfolio-item-hold .portfolio-item__over {
    transform: translate(0%, 0%); }
  .portfolio-item-out-left .portfolio-item__over {
    animation-direction: reverse;
    animation-fill-mode: backwards; }
  .portfolio-item-out-top .portfolio-item__over {
    animation-direction: reverse;
    animation-fill-mode: backwards; }
  .portfolio-item-out-right .portfolio-item__over {
    animation-direction: reverse;
    animation-fill-mode: backwards; }
  .portfolio-item-out-bottom .portfolio-item__over {
    animation-direction: reverse;
    animation-fill-mode: backwards; }

.portfolio-item__center {
  position: absolute;
  top: 50%;
  left: 50%;
  bottom: auto;
  right: auto;
  width: 100%;
  transform: translate(-50%, -50%);
  padding: 36px;
  padding: 2rem; }

.portfolio-item__title {
  font-family: "Rokkitt", Arial, sans-serif;
  text-align: center;
  text-transform: lowercase;
  color: #404040;
  vertical-align: middle;
  line-height: .8; }

.portfolio-item__short {
  color: #404040;
  text-align: center;
  margin-bottom: 0px; }

.google-map-wrapper {
  position: relative; }

.sebm-google-map-container {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%; }

.google-map-overlay {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  z-index: 5;
  background-color: rgba(245, 245, 245, 0.8); }

/*------------------------------------*    $VENDOR
\*------------------------------------*/
/*------------------------------------*    $VENDOR STYLES
\*------------------------------------*/
/*------------------------------------*    $AUTOCOMPLETE
\*------------------------------------*/
/*------------------------------------*    $DATEPICKER
\*------------------------------------*/
/*------------------------------------*    $FILE UPLOAD
\*------------------------------------*/
/*------------------------------------*    $TOOLTIPS
\*------------------------------------*/
/*------------------------------------*    $WYSIWYG
\*------------------------------------*/
/*------------------------------------*    $MODIFIERS
\*------------------------------------*/
/**
 * modifieres must come last that classes can be applied directly
 * to markup to override styles
 */
/*------------------------------------*    $MODIFIERS
\*------------------------------------*/
/*------------------------------------*    $BACKGROUND
\*------------------------------------*/
/*------------------------------------*    $BACKGROUNDS
\*------------------------------------*/
/*------------------------------------*    $BACKGROUND COLORS
\*------------------------------------*/
.bgc--primary-dk {
  background-color: #88cfc3; }

.bgc--primary {
  background-color: #acded5; }

.bgc--primary-lt {
  background-color: #d0ede7; }

.bgc--secondary-dk {
  background-color: #e8ca21; }

.bgc--secondary {
  background-color: #edd54f; }

.bgc--secondary-lt {
  background-color: #ffe12f; }

.bgc--tertiary-dk {
  background-color: #f2512f; }

.bgc--tertiary {
  background-color: #f5795f; }

.bgc--tertiary-lt {
  background-color: #f49f8f; }

.bgc--base-dk {
  background-color: #272727; }

.bgc--base {
  background-color: #404040; }

.bgc--base-lt {
  background-color: #a1a1a1; }

.bgc--base-ltr {
  background-color: #e6e6e6; }

/*------------------------------------*    $BACKGROUND LINK STATES
\*------------------------------------*/
/*------------------------------------*    $TYPOGRAPHY
\*------------------------------------*/
/*------------------------------------*    $TYPOGRAPHY
\*------------------------------------*/
/*------------------------------------*    $ALIGNMENT
\*------------------------------------*/
.text--right {
  text-align: right; }

/*------------------------------------*    $FONT COLOR MODIFIERS
\*------------------------------------*/
a {
  color: #acded5; }

a {
  color: #acded5; }
  a:hover, a:focus {
    color: #d0ede7; }
  a:active {
    color: #88cfc3; }

/*------------------------------------*    $FONT FAMILY
\*------------------------------------*/
/*------------------------------------*    $VISIBILITY
\*------------------------------------*/
/**
 * Hide from both screenreaders and browsers: h5bp.com/u
 */
.hidden {
  display: none;
  visibility: hidden; }

/**
 * Hide content off-screen without resorting to `display:none;`, also provide
 * breakpoint specific hidden elements.
 */
.accessibility,
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }
  .focusable.accessibility:active,
  .focusable.visuallyhidden:active, .focusable.accessibility:focus,
  .focusable.visuallyhidden:focus {
    position: static;
    clip: auto;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible; }

@media only screen and (max-width: 480px) {
  .accessibility--palm,
  .visuallyhidden--palm {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px; } }

@media only screen and (min-width: 481px) and (max-width: 919px) {
  .accessibility--lap,
  .visuallyhidden--lap {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px; } }

@media only screen and (min-width: 481px) {
  .accessibility--lap-and-up,
  .visuallyhidden--lap-and-up {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px; } }

@media only screen and (max-width: 919px) {
  .accessibility--portable,
  .visuallyhidden--portable {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px; } }

@media only screen and (min-width: 920px) {
  .accessibility--desk,
  .visuallyhidden--desk {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px; } }

@media only screen and (min-width: 1440px) {
  .accessibility--desk-wide,
  .visuallyhidden--desk-wide {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px; } }

/*------------------------------------*    $WYSIWYG CLASSES
\*------------------------------------*/
/*------------------------------------*    $TINYMCE
\*------------------------------------*/
/*------------------------------------*    $CKEDITOR
\*------------------------------------*/
/*------------------------------------*    $LAYOUT
\*------------------------------------*/
/**
 * layout, as with modifier, must come last that classes can be applied directly
 * to markup as modifiers
 */
/*------------------------------------*    $ALL LAYOUT
\*------------------------------------*/
/*------------------------------------*    $DISPLAY
\*------------------------------------*/
/*------------------------------------*    $FOOTER
\*------------------------------------*/
/*------------------------------------*    $GRID
\*------------------------------------*/
/**
 * Extend grid modifiers here
 */
main {
  -ms-flex: 1;
      flex: 1; }
  .oldie main {
    display: table-cell; }

/*------------------------------------*    $HEADER
\*------------------------------------*/
.logo {
  padding: 0 36px;
  padding: 0 2rem;
  display: block; }

/*------------------------------------*		$ISLANDS
\*------------------------------------*/
.island {
  padding-top: 5.5rem;
  padding-bottom: 5.5rem; }

/*------------------------------------*    $MARGIN
\*------------------------------------*/
.portfolio-item__title, .portfolio-item__short {
  margin-bottom: 36px;
  margin-bottom: 2rem; }

.flush--bottom {
  margin-bottom: 0; }

/*------------------------------------*    $PADDING
\*------------------------------------*/
.google-map-overlay, .soft--large {
  padding: 36px;
  padding: 2rem; }

.soft--large--top {
  padding-top: 36px;
  padding-top: 2rem; }

.soft--top {
  padding-top: 27px;
  padding-top: 1.5rem; }

/*------------------------------------*    $WRAPS
\*------------------------------------*/
.wrap--large, .wrap, .wrap--small {
  margin-right: auto;
  margin-left: auto;
  padding-left: 1.5rem;
  padding-right: 1.5rem; }

/**
 * Generates classes and placeholders for wraps and their widths
 * e.g.

  %wrap-width--large { max-width: 1280px;}
  .wrap--large { ... }
  %wrap-width        { max-width: 960px;}
  .wrap { ... }
  %wrap-width--small { max-width: 640px;}
  .wrap--small { ... }
 */
.wrap--large {
  max-width: 1200px; }

.wrap {
  max-width: 1280px; }

.wrap--small, .content--left {
  max-width: 960px; }

.content--left {
  margin-left: 0px; }

/*------------------------------------*    $ANIMATIONS
\*------------------------------------*/
/*------------------------------------*    $ANIMATIONS
\*------------------------------------*/
/*------------------------------------*    $ANIMATIONS
\*------------------------------------*/
@keyframes flash {
  0% {
    opacity: 0; }
  40% {
    opacity: 0; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0; } }

.persona__main.typing:after, .anim-flash {
  animation-name: flash; }

@keyframes in-left {
  0% {
    transform: translateX(-100%);
    opacity: 0; }
  100% {
    transform: translateX(0);
    opacity: 1; } }

.portfolio-item-in-left .portfolio-item__over, .portfolio-item-out-right .portfolio-item__over, .anim-in-left {
  animation-name: in-left; }

@keyframes in-right {
  0% {
    transform: translateX(100%);
    opacity: 0; }
  100% {
    transform: translateX(0);
    opacity: 1; } }

.portfolio-item-in-right .portfolio-item__over, .portfolio-item-out-left .portfolio-item__over, .anim-in-right {
  animation-name: in-right; }

@keyframes in-bottom {
  0% {
    transform: translateY(100%);
    opacity: 0; }
  100% {
    transform: translateY(0);
    opacity: 1; } }

.portfolio-item-in-bottom .portfolio-item__over, .portfolio-item-out-top .portfolio-item__over, .anim-in-bottom {
  animation-name: in-bottom; }

@keyframes in-top {
  0% {
    transform: translateY(-100%);
    opacity: 0; }
  100% {
    transform: translateY(0);
    opacity: 1; } }

.portfolio-item-in-top .portfolio-item__over, .portfolio-item-out-bottom .portfolio-item__over, .anim-in-top {
  animation-name: in-top; }

/**
 * import print styles
 */

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyIsInN0eWxlLnNjc3MiLCJjdXN0b20vX2NvbmZpZy5zY3NzIiwiY29yZS9fY29uZmlnLWRlZmF1bHRzLnNjc3MiLCJjb3JlL19pbXBvcnRzLnNjc3MiLCJjb3JlL3V0aWxpdGllcy9mdW5jdGlvbnMvXyFhbGwuc2NzcyIsImNvcmUvdXRpbGl0aWVzL2Z1bmN0aW9ucy9fbWFwLWdldC1kZWVwLnNjc3MiLCJjb3JlL3V0aWxpdGllcy9mdW5jdGlvbnMvX3B4LXRvLXJlbS5zY3NzIiwiY29yZS91dGlsaXRpZXMvbWl4aW5zL18hYWxsLnNjc3MiLCJjb3JlL3V0aWxpdGllcy9taXhpbnMvX2FjY2Vzc2liaWxpdHkuc2NzcyIsImNvcmUvdXRpbGl0aWVzL21peGlucy9fYXJyb3dzLnNjc3MiLCJjb3JlL3V0aWxpdGllcy9taXhpbnMvX2ZvbnQtc2l6ZS5zY3NzIiwiY29yZS91dGlsaXRpZXMvbWl4aW5zL19oZWFkaW5ncy5zY3NzIiwiY29yZS91dGlsaXRpZXMvbWl4aW5zL19tZWRpYS1xdWVyeS5zY3NzIiwiY29yZS91dGlsaXRpZXMvbWl4aW5zL190cnVuY2F0ZS5zY3NzIiwiY29yZS9iYXNlL18hYWxsLnNjc3MiLCJjb3JlL2Jhc2UvX3Jlc2V0LnNjc3MiLCJjb3JlL2Jhc2UvX25vcm1hbGl6ZS5zY3NzIiwiY29yZS9iYXNlL19kb2N1bWVudC5zY3NzIiwiY29yZS9iYXNlL19jb2RlLnNjc3MiLCJjb3JlL2Jhc2UvX2Zvcm1zLnNjc3MiLCJjb3JlL2Jhc2UvX2dlbmVyYWwtdHlwb2dyYXBoeS5zY3NzIiwiY29yZS91dGlsaXRpZXMvbWl4aW5zL19weC1hbmQtcmVtLnNjc3MiLCJjb3JlL2Jhc2UvX2hlYWRpbmdzLnNjc3MiLCJjb3JlL2Jhc2UvX2ltYWdlcy5zY3NzIiwiY29yZS9iYXNlL19saXN0cy5zY3NzIiwiY29yZS9iYXNlL19wYXJhZ3JhcGhzLnNjc3MiLCJjb3JlL2Jhc2UvX3F1b3Rlcy5zY3NzIiwiY29yZS9iYXNlL19zbWFsbHByaW50LnNjc3MiLCJjb3JlL2Jhc2UvX3RhYmxlcy5zY3NzIiwiY29yZS9jb21wb25lbnRzL18hYWxsLnNjc3MiLCJjb3JlL2NvbXBvbmVudHMvX2J1dHRvbnMuc2NzcyIsImNvcmUvY29tcG9uZW50cy9fcmF0aW8tb2JqZWN0LnNjc3MiLCJjb3JlL2xheW91dC9fIWFsbC5zY3NzIiwiY29yZS9sYXlvdXQvX2NsZWFyZml4LnNjc3MiLCJjb3JlL2xheW91dC9fZ3JpZHMuc2NzcyIsImNvcmUvbGF5b3V0L193aWR0aHMuc2NzcyIsImNvcmUvbGF5b3V0L19wdXNoLnNjc3MiLCJjb3JlL2xheW91dC9fcHVsbC5zY3NzIiwiY29yZS91dGlsaXRpZXMvX2RlYnVnLnNjc3MiLCJjdXN0b20vX2ltcG9ydHMuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvXyFhbGwuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvbWl4aW5zL18hYWxsLnNjc3MiLCJjdXN0b20vdXRpbGl0aWVzL21peGlucy9jb21wb25lbnRzL18hYWxsLnNjc3MiLCJjdXN0b20vdXRpbGl0aWVzL21peGlucy9jb21wb25lbnRzL21lbnVzL18hYWxsLnNjc3MiLCJjdXN0b20vdXRpbGl0aWVzL21peGlucy9jb21wb25lbnRzL21lbnVzL19hbmNob3ItY29sbGFwc2Uuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvbWl4aW5zL21vZGlmaWVycy9fIWFsbC5zY3NzIiwiY3VzdG9tL3V0aWxpdGllcy9taXhpbnMvbW9kaWZpZXJzL2JhY2tncm91bmQvXyFhbGwuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvbWl4aW5zL21vZGlmaWVycy9iYWNrZ3JvdW5kL19saW5rLXN0YXRlcy5zY3NzIiwiY3VzdG9tL3V0aWxpdGllcy9taXhpbnMvbW9kaWZpZXJzL3R5cG9ncmFwaHkvXyFhbGwuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvbWl4aW5zL21vZGlmaWVycy90eXBvZ3JhcGh5L19saW5rLXN0YXRlcy5zY3NzIiwiY3VzdG9tL3V0aWxpdGllcy9taXhpbnMvbGF5b3V0L18hYWxsLnNjc3MiLCJjdXN0b20vdXRpbGl0aWVzL21peGlucy9sYXlvdXQvX2lzbGFuZHMuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvbWl4aW5zL2xheW91dC9fbWFyZ2luLXBhZGRpbmcuc2NzcyIsImN1c3RvbS91dGlsaXRpZXMvbWl4aW5zL2xheW91dC9fd3JhcHMuc2NzcyIsImN1c3RvbS9iYXNlL18hYWxsLnNjc3MiLCJjdXN0b20vYmFzZS9fZG9jdW1lbnQuc2NzcyIsImN1c3RvbS9iYXNlL19mb250cy5zY3NzIiwiY29yZS91dGlsaXRpZXMvbWl4aW5zL19mb250LWZhY2Uuc2NzcyIsImN1c3RvbS9iYXNlL2Zvcm1zL18hYWxsLnNjc3MiLCJjdXN0b20vYmFzZS9mb3Jtcy9faW5kZXguc2NzcyIsImN1c3RvbS9iYXNlL19oZWFkaW5ncy5zY3NzIiwiY3VzdG9tL2Jhc2UvX2ltYWdlcy5zY3NzIiwiY3VzdG9tL2Jhc2UvX2xpbmtzLnNjc3MiLCJjdXN0b20vYmFzZS9fbGlzdHMuc2NzcyIsImN1c3RvbS9iYXNlL19ydWxlcy5zY3NzIiwiY3VzdG9tL2Jhc2UvX3RhYmxlcy5zY3NzIiwiY3VzdG9tL2Jhc2UvX3R5cG9ncmFwaHkuc2NzcyIsImN1c3RvbS9jb21wb25lbnRzL18hYWxsLnNjc3MiLCJjdXN0b20vY29tcG9uZW50cy9fYnV0dG9ucy5zY3NzIiwiY3VzdG9tL2NvbXBvbmVudHMvX2xvYWRlcnMuc2NzcyIsImN1c3RvbS9jb21wb25lbnRzL19zaWRlYmFyLnNjc3MiLCJjdXN0b20vY29tcG9uZW50cy9tZW51cy9fIWFsbC5zY3NzIiwiY3VzdG9tL2NvbXBvbmVudHMvbWVudXMvX2luZGV4LnNjc3MiLCJjdXN0b20vY29tcG9uZW50cy9tZW51cy9fcHJpbWFyeS5zY3NzIiwiY3VzdG9tL2NvbXBvbmVudHMvbWVudXMvX3RvZ2dsZS5zY3NzIiwiY3VzdG9tL3BhZ2VzL18hYWxsLnNjc3MiLCJjdXN0b20vcGFnZXMvX2hvbWUuc2NzcyIsImN1c3RvbS9wYWdlcy9fd2hhdC5zY3NzIiwiY3VzdG9tL3BhZ2VzL193aGVuLnNjc3MiLCJjdXN0b20vdmVuZG9yL18hYWxsLnNjc3MiLCJjdXN0b20vbW9kaWZpZXJzL18hYWxsLnNjc3MiLCJjdXN0b20vbW9kaWZpZXJzL2JhY2tncm91bmQvXyFhbGwuc2NzcyIsImN1c3RvbS9tb2RpZmllcnMvYmFja2dyb3VuZC9fY29sb3JzLnNjc3MiLCJjdXN0b20vbW9kaWZpZXJzL2JhY2tncm91bmQvX2xpbmstc3RhdGVzLnNjc3MiLCJjdXN0b20vbW9kaWZpZXJzL3R5cG9ncmFwaHkvXyFhbGwuc2NzcyIsImN1c3RvbS9tb2RpZmllcnMvdHlwb2dyYXBoeS9fYWxpZ25tZW50LnNjc3MiLCJjdXN0b20vbW9kaWZpZXJzL3R5cG9ncmFwaHkvX2NvbG9ycy5zY3NzIiwiY3VzdG9tL21vZGlmaWVycy90eXBvZ3JhcGh5L19mb250LWZhbWlseS5zY3NzIiwiY3VzdG9tL21vZGlmaWVycy90eXBvZ3JhcGh5L192aXNpYmlsaXR5LnNjc3MiLCJjdXN0b20vbW9kaWZpZXJzL3R5cG9ncmFwaHkvX3d5c2l3eWcuc2NzcyIsImN1c3RvbS9sYXlvdXQvXyFhbGwuc2NzcyIsImN1c3RvbS9sYXlvdXQvX2Rpc3BsYXkuc2NzcyIsImN1c3RvbS9sYXlvdXQvX2Zvb3Rlci5zY3NzIiwiY3VzdG9tL2xheW91dC9fZ3JpZC5zY3NzIiwiY3VzdG9tL2NvbXBvbmVudHMvX21haW4tY29udGVudC5zY3NzIiwiY3VzdG9tL2xheW91dC9faGVhZGVyLnNjc3MiLCJjdXN0b20vbGF5b3V0L19pc2xhbmRzLnNjc3MiLCJjdXN0b20vbGF5b3V0L19tYXJnaW4uc2NzcyIsImN1c3RvbS9sYXlvdXQvX3BhZGRpbmcuc2NzcyIsImN1c3RvbS9sYXlvdXQvX3dyYXBzLnNjc3MiLCJjdXN0b20vYW5pbWF0aW9ucy9fIWFsbC5zY3NzIiwiY3VzdG9tL2FuaW1hdGlvbnMvX2luZGV4LnNjc3MiLCJjdXN0b20vYW5pbWF0aW9ucy9fZmxhc2guc2NzcyIsImN1c3RvbS9hbmltYXRpb25zL19pbi1sZWZ0LnNjc3MiLCJjdXN0b20vYW5pbWF0aW9ucy9faW4tcmlnaHQuc2NzcyIsImN1c3RvbS9hbmltYXRpb25zL19pbi1ib3R0b20uc2NzcyIsImN1c3RvbS9hbmltYXRpb25zL19pbi10b3Auc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7QUNFakI7Ozs7Ozs7Ozs7O0VBV0U7QUFFRjs7Ozs7R0FLRztBQ3BCSDt3Q0FFd0M7QUFDeEM7Ozs7Ozs7R0FPRztBQU1IO3dDQUV3QztBQUN4Qzs7Ozs7R0FLRztBQTRDSDt3Q0FFd0M7QUFDeEM7O0dBRUc7QUF5Qkg7d0NBRXdDO0FBQ3hDOztHQUVHO0FBZUg7d0NBRXdDO0FBQ3hDOzs7Ozs7R0FNRztBQU9IOzs7O0dBSUc7QUFNSDs7R0FFRztBQVVIOzs7O0dBSUc7QUFNSDs7R0FFRztBQU9IO3dDQUV3QztBQUN4Qzs7R0FFRztBQU9IOztHQUVHO0FBT0g7O0dBRUc7QUFPSDs7R0FFRztBQy9NSDt3Q0FFd0M7QUFDeEM7OztHQUdHO0FBTUg7d0NBRXdDO0FBQ3hDOzs7R0FHRztBQUlIOztHQUVHO0FBR0g7O0dBRUc7QUFPSDt3Q0FFd0M7QUFDeEM7Ozs7R0FJRztBQVVIO3dDQUV3QztBQUN4Qzs7O0dBR0c7QUFPSDt3Q0FFd0M7QUFDeEM7OztHQUdHO0FBT0g7d0NBRXdDO0FBQ3hDOzs7R0FHRztBQU9IO3dDQUV3QztBQVl4Qzt3Q0FFd0M7QUFDeEM7O0dBRUc7QUFJSDs7O0dBR0c7QUFTSDt3Q0FFd0M7QUFDeEM7O0dBRUc7QUFHSDs7O0dBR0c7QUFHSDs7O0dBR0c7QUFFSDs7R0FFRztBQVFIOztHQUVHO0FBT0g7O0dBRUc7QUFTSDt3Q0FFd0M7QUFDeEM7O0dBRUc7QUFvQkg7d0NBRXdDO0FBQ3hDOztHQUVHO0FBR0g7OztHQUdHO0FBSUg7O0dBRUc7QUFXSDt3Q0FFd0M7QUFPeEM7d0NBRXdDO0FBT3hDO3dDQUV3QztBQU94Qzt3Q0FFd0M7QUFDeEM7O0dBRUc7QUFJSDs7R0FFRztBQU9IO3dDQUV3QztBQU94Qzt3Q0FFd0M7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RnFCOztBQ1o1Qzt3Q0FFd0M7QUFPeEM7RTlDTEUsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUlsQixxQkFBcUI7RUFDckIsc0JBQXNCLEU4Q0V2Qjs7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBVUM7RUFBRSxrQkE5QlMsRUE4QmdCOztBQVAzQjtFQUFjLGtCQXRCSixFQXNCNkI7O0FBT3ZDO0VBQUUsaUJBNUJRLEVBNEJpQjs7QUFTL0I7RUFFRSxpQkFBaUIsRUFDbEI7O0E1RGlDRDt3Q0FFd0M7QTZEakZ4Qzt3Q0FFd0M7QUNGeEM7d0NBRXdDO0FDRnhDO0VBQ0U7SUFDRSxXQUFXLEVBQUE7RUFFYjtJQUNFLFdBQVcsRUFBQTtFQUViO0lBQ0UsV0FBVyxFQUFBO0VBRWI7SUFDRSxXQUFXLEVBQUEsRUFBQTs7QTFCTWY7RTBCRmMsc0JBQXNCLEVBQUc7O0FDZnZDO0VBQ0U7SUFDRSw2QkFBcUI7SUFDckIsV0FBVyxFQUFBO0VBRWI7SUFDRSx5QkFBcUI7SUFDckIsV0FBVyxFQUFBLEVBQUE7O0ExQjRCWDtFMEJ4Qlksd0JBQXdCLEVBQUc7O0FDWDNDO0VBQ0U7SUFDRSw0QkFBcUI7SUFDckIsV0FBVyxFQUFBO0VBRWI7SUFDRSx5QkFBcUI7SUFDckIsV0FBVyxFQUFBLEVBQUE7O0EzQmtDWDtFMkI5QmEseUJBQXlCLEVBQUc7O0FDWDdDO0VBQ0U7SUFDRSw0QkFBcUI7SUFDckIsV0FBVyxFQUFBO0VBRWI7SUFDRSx5QkFBcUI7SUFDckIsV0FBVyxFQUFBLEVBQUE7O0E1QnFDWDtFNEJqQ2MsMEJBQTBCLEVBQUc7O0FDWC9DO0VBQ0U7SUFDRSw2QkFBcUI7SUFDckIsV0FBVyxFQUFBO0VBRWI7SUFDRSx5QkFBcUI7SUFDckIsV0FBVyxFQUFBLEVBQUE7O0E3QitCWDtFNkIzQlcsdUJBQXVCLEVBQUc7O0ExRzJCekM7O0dBRUciLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuLypcblRoZW1lIE5hbWU6IFRoZW1lX05hbWVcblRoZW1lIFVSSTogdGhlbWVfdXJsXG5EZXNjcmlwdGlvbjogdGhlbWVfZGVzY3JpcHRpb25cbkF1dGhvcjogYXV0aG9yX25hbWVcbkF1dGhvciBVUkk6IGF1dGhvcl91cmxcblZlcnNpb246IHRoZW1lX3ZlcnNpb25cbi5cbkFueSBnZW5lcmFsIGluZm9ybWF0aW9uLCBsaWNlbnNlIHN0YXRlbWVudHMsIHBsdWdpbiByZXF1aXJlbWVudHMsIG9yIGFueSBvdGhlciBpbmZvcm1hdGlvbiB5b3Vcbm1pZ2h0IHdhbnQgdG8gc2hhcmUuXG4uXG4qL1xuLyoqXG4gKiBDb25maWdcbiAqXG4gKiBDb25maWcgaXMgZGVmaW5lZCBiZWZvcmUgZGVmYXVsdHMgc28gdGhhdCB2YXJpYWJsZXMgb3ZlcnJpZGUgdGhlaXIgIWRlZmF1bHRcbiAqIGNvdW50ZXJwYXJ0c1xuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgVkFSUy5TQ1NTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBBbnkgdmFyaWFibGVzIHlvdSBmaW5kIHNldCBpbiB0aGlzIGZyYW1ld29yaydzIGBfZGVmYXVsdHMuc2Nzc2AgdGhhdCB5b3UgZG8gbm90IHdpc2ggdG9cbiAqIGtlZXAsIHNpbXBseSByZWRlZmluZSBoZXJlLiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhpcyBmcmFtZXdvcmssIGZvciBleGFtcGxlLCBzZXRzXG4gKiB5b3VyIGAkZnMtYmFzZWAgYXQgMTZweCBhbmQgeW91IHdpc2ggaXQgdG8gYmUgMTRweCwgc2ltcGx5IHJlZGVjbGFyZVxuICogdGhhdCB2YXJpYWJsZSBpbiB0aGlzIGZpbGUuIHRoaXMgZnJhbWV3b3JrIGlnbm9yZXMgaXRzIG93biB2YXJpYWJsZXMgaW4gZmF2b3VyIG9mXG4gKiB1c2luZyB5b3VyIG93biwgc28geW91IGNhbiBjb21wbGV0ZWx5IG1vZGlmeSBob3cgdGhpcyBmcmFtZXdvcmsgd29ya3Mgd2l0aG91dCBldmVyXG4gKiBoYXZpbmcgdG8gYWx0ZXIgdGhlIGZyYW1ld29yayBpdHNlbGYuXG4gKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkT0JKRUNUUy1BTkQtQUJTVFJBQ1RJT05TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBBbGwgb2YgdGhpcyBmcmFtZXdvcmsncyBvYmplY3RzIGFuZCBhYnN0cmFjdGlvbnMgYXJlIGluaXRpYWxseSB0dXJuZWQgb2ZmIGJ5XG4gKiBkZWZhdWx0LiBUaGlzIG1lYW5zIHRoYXQgeW91IHN0YXJ0IGFueSBwcm9qZWN0IHdpdGggYXMgbGl0dGxlIGFzIHBvc3NpYmxlLFxuICogYW5kIGludHJvZHVjaW5nIG9iamVjdHMgYW5kIGFic3RyYWN0aW9ucyBpcyBhcyBzaW1wbGUgYXMgc3dpdGNoaW5nIHRoZVxuICogZm9sbG93aW5nIHZhcmlhYmxlcyB0byBgdHJ1ZWAuXG4gKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkT1ZFUlJJREVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBQbGFjZSBhbnkgdmFyaWFibGVzIHRoYXQgc2hvdWxkIG92ZXJyaWRlIGNvcmUgX2RlZmF1bHRzLnNjc3MgaGVyZS5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRDVVNUT01cblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFBsYWNlIGFueSBvZiB5b3VyIG93biB2YXJpYWJsZXMgdGhhdCBzaXQgb24gdG9wIG9mIGNvcmUgX2RlZmF1bHRzLnNjc3MgaGVyZS5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRGT05UU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogSWNvbiBGb250XG4gKlxuICogRGVwZW5kYW50IG9uICR1c2UtaWNvbnMgYmVpbmcgdHJ1ZS4gVGhlc2UgdmFyaWFibGVzIGFyZSB1c2VkIGluIHRoZSBmb250LWZhY2UgbWl4aW4uXG4gKlxuICogVGhpcyBmb250IGlzIGVuYWJsZWQgdmlhIGN1c3RvbS9iYXNlL19mb250cy5zY3NzXG4gKi9cbi8qKlxuICogQmFzZSBGb250IEZhY2VcbiAqXG4gKiBUaGlzIGZvbnQgaXMgZW5hYmxlZCB2aWEgY3VzdG9tL2Jhc2UvX2ZvbnRzLnNjc3NcbiAqL1xuLyoqXG4gKiBCYXNlIEZvbnQgVmFyaWF0aW9uc1xuICovXG4vKipcbiAqIEhlYWRlciBGb250IEZhY2VcbiAqXG4gKiBUaGlzIGZvbnQgaXMgZW5hYmxlZCB2aWEgY3VzdG9tL2hlYWRlci9fZm9udHMuc2Nzc1xuICovXG4vKipcbiAqIGhlYWRlciBGb250IFZhcmlhdGlvbnNcbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRDT0xPUlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFRoZSBiYXNlIGNvbG9yIGZvciB0ZXh0LCBib3JkZXJzLCBldGMuXG4gKi9cbi8qKlxuICogVGhlIHByaW1hcnkgbm9uLWJhc2UgY29sb3JcbiAqL1xuLyoqXG4gKiBUaGUgc2Vjb25kYXJ5IG5vbi1iYXNlIGNvbG9yXG4gKi9cbi8qKlxuICogVGhlIHRlcnRpYXJ5IG5vbi1iYXNlIGNvbG9yXG4gKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgJERFRkFVTFRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBpbnVpdC5jc3PigJkgZGVmYXVsdCB2YXJpYWJsZXMuIFJlZGVmaW5lIHRoZXNlIGluIHlvdXIgYF92YXJzLnNjc3NgIGZpbGUgKGZvdW5kXG4gKiBpbiB0aGUgaW51aXQuY3NzLXdlYi10ZW1wbGF0ZSkgdG8gb3ZlcnJpZGUgdGhlbS5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkQkFTRVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogQmFzZSB2YXJpYWJsZXMuIFRoZXNlIGFyZSBpbmNsdWRlZCBmaXJzdCBhcyB0aGV5IHByb3ZpZGUgYSBiYXNpcyBmb3IgY2FsY3VsYXRpb25zXG4gKiB0aHJvdWdob3V0IHRoZSBmcmFtZXdvcmsuXG4gKi9cbi8qKlxuICogQmFzZSBmb250LWZhbWlseS5cbiAqL1xuLyoqXG4gKiBEZWZhdWx0IGNvbG91ciBmb3Igb2JqZWN0c+KAmSBib3JkZXJzIGV0Yy5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkRlJBTUVXT1JLXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBpbnVpdC5jc3Mgd2lsbCB3b3JrIHRoZXNlIG5leHQgb25lcyBvdXQgZm9yIHVzZSB3aXRoaW4gdGhlIGZyYW1ld29yay5cbiAqXG4gKiBBc3NpZ24gb3VyIGAkYmFzZS1saW5lLWhlaWdodGAgdG8gYSBuZXcgc3BhY2luZyB2YXIgZm9yIG1vcmUgdHJhbnNwYXJlbmN5LlxuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICRERUJVR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRGVidWcgbW9kZSB3aWxsIHZpc3VhbGx5IGhpZ2hsaWdodCBhbnkgcG90ZW50aWFsIG1hcmt1cC9hY2Nlc3NpYmlsaXR5IHF1aXJrc1xuICogaW4gdGhlIGJyb3dzZXIuIFNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYC5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkUkFJTFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFVzaW5nIFJhaWxzPyBZb3UnbGwgbmVlZCB0aGUgZm9udC1mYWNlIG1peGluIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSB0byBjb3JyZWN0bHlcbiAqIGxvYWQgZm9udCBhc3NldHNcbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkQk9SREVSLUJPWFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRG8geW91IHdhbnQgYWxsIGVsZW1lbnRzIHRvIGFkb3B0IGBib3gtc2l6aW5nOmJvcmRlci1ib3g7YCBhcyBwZXJcbiAqIHBhdWxpcmlzaC5jb20vMjAxMi9ib3gtc2l6aW5nLWJvcmRlci1ib3gtZnR3ID9cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkUFJFRklYRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICRHUklEU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogVXNlIGVpdGhlciBhIGZsZXhib3ggYmFzZWQgZ3JpZCwgYW4gaW5saW5lLWJsb2NrIGJhc2VkIGdyaWQsIG9yIGJvdGghXG4gKi9cbi8qKlxuICogQSB1bml0bGVzcyB2YWx1ZSB3aWxsIG91dHB1dCByZW0gdW5pdHMgd2l0aCBweCBmYWxsYmFjayBmb3IgZ3V0dGVycyxcbiAqIG90aGVyd2lzZSBhIHVuaXQgdmFsdWUgd2lsbCBvdXRwdXQgb25seSB0aGF0IHZhbHVlXG4gKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgJFJFU1BPTlNJVkVcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFJlc3BvbnNpdmVuZXNzP1xuICovXG4vKipcbiAqIFJlc3BvbnNpdmVuZXNzIGZvciB3aWRlc2NyZWVuL2hpZ2ggcmVzb2x1dGlvbiBkZXNrdG9wIG1vbml0b3JzIGFuZCBiZXlvbmQ/XG4gKiBOb3RlOiBgJHJlc3BvbnNpdmVgIHZhcmlhYmxlIGFib3ZlIG11c3QgYmUgc2V0IHRvIHRydWUgYmVmb3JlIGVuYWJsaW5nIHRoaXMuXG4gKi9cbi8qKlxuICogUmVzcG9uc2l2ZSBwdXNoIGFuZCBwdWxsIHByb2R1Y2UgYSBMT1Qgb2YgY29kZSwgb25seSB0dXJuIHRoZW0gb24gaWYgeW91XG4gKiBkZWZpbml0ZWx5IG5lZWQgdGhlbS5cbiAqL1xuLyoqXG4gKiBOb3RlOiBgJHB1c2hgIHZhcmlhYmxlIGFib3ZlIG11c3QgYmUgc2V0IHRvIHRydWUgYmVmb3JlIGVuYWJsaW5nIHRoZXNlLlxuICovXG4vKipcbiAqIE5vdGU6IGAkcHVsbGAgdmFyaWFibGUgYWJvdmUgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBiZWZvcmUgZW5hYmxpbmcgdGhlc2UuXG4gKi9cbi8qKlxuICogVGVsbCBpbnVpdC5jc3Mgd2hlbiBicmVha3BvaW50cyBzdGFydC5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkRk9OVC1TSVpFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRm9udC1zaXplcyAoaW4gcGl4ZWxzKS4gUmVmZXIgdG8gcmVsZXZhbnQgc2VjdGlvbnMgZm9yIHRoZWlyIGltcGxlbWVudGF0aW9ucy5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkUVVPVEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBFbmdsaXNoIHF1b3RlIG1hcmtzP1xuICovXG4vKipcbiAqIElmIHlvdSB3YW50IEVuZ2xpc2ggcXVvdGVzIHRoZW4gcGxlYXNlIGRvIG5vdCBlZGl0IHRoZXNlOyB0aGV54oCZcmUgb25seSBoZXJlXG4gKiBiZWNhdXNlIFNhc3MgbmVlZHMgdGhlbS5cbiAqL1xuLyoqXG4gKiBJZiB5b3UgbmVlZCBub24tRW5nbGlzaCBxdW90ZXMsIHBsZWFzZSBhbHRlciB0aGUgZm9sbG93aW5nIHZhbHVlcyBhY2NvcmRpbmdseTpcbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkVEFCTEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkSU1BR0VTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkQ09ERVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgJEJSQU5EXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBCcmFuZCBzdHVmZlxuICovXG4vKipcbiAqIEhvdyBiaWcgd291bGQgeW91IGxpa2Ugcm91bmQgY29ybmVycyB0byBiZSBieSBkZWZhdWx0P1xuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICRDT0xPUlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICRPQkpFQ1RTIEFORCBBQlNUUkFDVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFdoaWNoIG9iamVjdHMgYW5kIGFic3RyYWN0aW9ucyB3b3VsZCB5b3UgbGlrZSB0byB1c2U/XG4gKi9cbi8qKlxuICogSW1wb3J0IHRoZSByZXN0IG9mIHRoZSBmcmFtZXdvcmssIGZvbGxvd2VkIGJ5IGN1c3RvbSBzdHlsZXNcbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgIElOVUlULkNTU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qISpcbiAqXG4gKiBpbnVpdGNzcy5jb20gLS0gQGludWl0Y3NzIC0tIEBjc3N3aXphcmRyeVxuICpcbiAqL1xuLyoqXG4gKiBpbnVpdC5jc3MgYWN0cyBhcyBhIGJhc2Ugc3R5bGVzaGVldCB3aGljaCB5b3Ugc2hvdWxkIGV4dGVuZCB3aXRoIHlvdXIgb3duXG4gKiB0aGVtZSBzdHlsZXNoZWV0LlxuICpcbiAqIGludWl0LmNzcyBhaW1zIHRvIGRvIHRoZSBoZWF2eSBsaWZ0aW5nOyBzb3J0aW5nIG9iamVjdHMgYW5kIGFic3RyYWN0aW9ucyxcbiAqIGRlc2lnbiBwYXR0ZXJucyBhbmQgZmlkZGx5IGJpdHMgb2YgQ1NTLCB3aGlsc3QgbGVhdmluZyBhcyBtdWNoIGRlc2lnbiBhc1xuICogcG9zc2libGUgdG8geW91LiBpbnVpdC5jc3MgaXMgdGhlIHNjYWZmb2xkaW5nIHRvIHlvdXIgZGVjb3JhdG9yLlxuICpcbiAqIFRoaXMgc3R5bGVzaGVldCBpcyBoZWF2aWx5IGRvY3VtZW50ZWQgYW5kIGNvbnRhaW5zIGxvdHMgb2YgY29tbWVudHMsIHBsZWFzZVxuICogdGFrZSBjYXJlIHRvIHJlYWQgYW5kIHJlZmVyIHRvIHRoZW0gYXMgeW91IGJ1aWxkLiBGb3IgZnVydGhlciBzdXBwb3J0IHBsZWFzZVxuICogdHdlZXQgYXQgQGludWl0Y3NzLlxuICpcbiAqIE93aW5nIHRvIHRoZSBhbW91bnQgb2YgY29tbWVudHMgcGxlYXNlIG9ubHkgZXZlciB1c2UgbWluaWZpZWQgQ1NTIGluXG4gKiBwcm9kdWN0aW9uLiBUaGlzIGZpbGUgaXMgcHVyZWx5IGEgZGV2IGRvY3VtZW50LlxuICpcbiAqIFRoZSB0YWJsZSBvZiBjb250ZW50cyBiZWxvdyBtYXBzIHRvIHNlY3Rpb24gdGl0bGVzIG9mIHRoZSBzYW1lIG5hbWUsIHRvIGp1bXBcbiAqIHRvIGFueSBzZWN0aW9uIHNpbXBseSBydW4gYSBmaW5kIGZvciAkW1NFQ1RJT04tVElUTEVdLlxuICpcbiAqIE1vc3Qgb2JqZWN0cyBhbmQgYWJzdHJhY3Rpb25zIGNvbWUgd2l0aCBhIGNodW5rIG9mIG1hcmt1cCB0aGF0IHlvdSBzaG91bGQgYmVcbiAqIGFibGUgdG8gcGFzdGUgaW50byBhbnkgdmlldyB0byBxdWlja2x5IHNlZSBob3cgdGhlIENTUyB3b3JrcyBpbiBjb25qdW5jdGlvblxuICogd2l0aCB0aGUgY29ycmVjdCBIVE1MLlxuICpcbiAqIGludWl0LmNzcyBpcyB3cml0dGVuIHRvIHRoaXMgc3RhbmRhcmQ6IGdpdGh1Yi5jb20vY3Nzd2l6YXJkcnkvQ1NTLUd1aWRlbGluZXNcbiAqXG4gKiBMSUNFTlNFXG4gKlxuICogQ29weXJpZ2h0IDIwMTMgSGFycnkgUm9iZXJ0c1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogVGhhbmsgeW91IGZvciBjaG9vc2luZyBpbnVpdC5jc3MuIE1heSB5b3VyIHdlYiBmb250cyByZW5kZXIgcGVyZmVjdGx5LlxuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJENPTlRFTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBDT05URU5UUy4uLi4uLi4uLi4uLllvdeKAmXJlIHJlYWRpbmcgaXQhXG4gKiBXQVJOSU5HLi4uLi4uLi4uLi4uLkhlcmUgYmUgZHJhZ29ucyFcbiAqIElNUE9SVFMuLi4uLi4uLi4uLi4uQmVnaW4gaW1wb3J0aW5nIHRoZSBzZWN0aW9ucyBiZWxvd1xuICpcbiAqIE1JWElOUy4uLi4uLi4uLi4uLi4uU3VwZXItc2ltcGxlIFNhc3Mgc3R1ZmZcbiAqIE5PUk1BTElaRS4uLi4uLi4uLi4ubm9ybWFsaXplLmNzc1xuICogUkVTRVQuLi4uLi4uLi4uLi4uLi5TZXQgc29tZSBkZWZhdWx0c1xuICogQ0xFQVJGSVguLi4uLi4uLi4uLi5cbiAqIFNIQVJFRC4uLi4uLi4uLi4uLi4uU2hhcmVkIGRlY2xhcmF0aW9uc1xuICpcbiAqIE1BSU4uLi4uLi4uLi4uLi4uLi4uSGlnaC1sZXZlbCBlbGVtZW50cyBsaWtlIGBodG1sYCwgYGJvZHlgLCBldGMuXG4gKiBIRUFESU5HUy4uLi4uLi4uLi4uLkRvdWJsZS1zdHJhbmRlZCBoZWFkaW5nIGhpZXJhcmNoeVxuICogUEFSQUdSQVBIUy4uLi4uLi4uLi5cbiAqIFNNQUxMUFJJTlQuLi4uLi4uLi4uU21hbGxlciB0ZXh0IGVsZW1lbnRzIGxpa2UgYHNtYWxsYFxuICogUVVPVEVTLi4uLi4uLi4uLi4uLi5cbiAqIENPREUuLi4uLi4uLi4uLi4uLi4uXG4gKiBMSVNUUy4uLi4uLi4uLi4uLi4uLlxuICogSU1BR0VTLi4uLi4uLi4uLi4uLi5cbiAqIFRBQkxFUy4uLi4uLi4uLi4uLi4uXG4gKiBGT1JNUy4uLi4uLi4uLi4uLi4uLlxuICpcbiAqIEdSSURTLi4uLi4uLi4uLi4uLi4uRmx1aWQsIHByb3BvcnRpb25hbCBhbmQgbmVzdGFibGUgZ3JpZHNcbiAqIENPTFVNTlMuLi4uLi4uLi4uLi4uQ1NTMyBjb2x1bW5zXG4gKiBOQVYuLi4uLi4uLi4uLi4uLi4uLkEgc2ltcGxlIGFic3RyYWN0aW9uIHRvIHB1dCBhIGxpc3QgaW4gaG9yaXpvbnRhbCBuYXYgbW9kZVxuICogT1BUSU9OUy4uLi4uLi4uLi4uLi5Hcm91cGVkIG5hdiBpdGVtc1xuICogUEFHSU5BVElPTi4uLi4uLi4uLi5WZXJ5IHN0cmlwcGVkIGJhY2ssIGJhc2ljIHBhZ2luYXRvclxuICogQlJFQURDUlVNQi4uLi4uLi4uLi5TaW1wbGUgYnJlYWRjcnVtYiB0cmFpbCBvYmplY3RcbiAqIE1FRElBLi4uLi4uLi4uLi4uLi4uTWVkaWEgb2JqZWN0XG4gKiBNQVJHSU5BTElBLi4uLi4uLi4uLlNpbXBsZSBtYXJnaW5hbGlhIGNvbnRlbnRcbiAqIElTTEFORC4uLi4uLi4uLi4uLi4uQm94ZWQgb2ZmIGNvbnRlbnRcbiAqIEJMT0NLLUxJU1QuLi4uLi4uLi4uQmxvY2t5IGxpc3RzIG9mIGNvbnRlbnRcbiAqIE1BVFJJWC4uLi4uLi4uLi4uLi4uR3JpZGRlZCBsaXN0c1xuICogU1BMSVQuLi4uLi4uLi4uLi4uLi5BIHNpbXBsZSBzcGxpdC1pbi10d28gb2JqZWN0XG4gKiBUSElTLU9SLVRISVMuLi4uLi4uLk9wdGlvbnMgb2JqZWN0XG4gKiBMSU5LLUNPTVBMRVguLi4uLi4uLlxuICogRkxZT1VULi4uLi4uLi4uLi4uLi5GbHlvdXQtb24taG92ZXIgb2JqZWN0XG4gKiBBUlJPV1MuLi4uLi4uLi4uLi4uLkNTUyBhcnJvd3NcbiAqIFNQUklURS4uLi4uLi4uLi4uLi4uR2VuZXJpYyBzcHJpdGluZyBlbGVtZW50XG4gKiBJQ09OLVRFWFQuLi4uLi4uLi4uLkljb24gYW5kIHRleHQgY291cGxpbmdzXG4gKiBCRUFVVE9OUy4uLi4uLi4uLi4uLlVzZSB0aGUgYmVhdXRvbnMgbWljcm8gbGlicmFyeVxuICogTE9aRU5HRVMuLi4uLi4uLi4uLi5CYXNpYyBsb3plbmdlIHN0eWxlc1xuICogUlVMRVMuLi4uLi4uLi4uLi4uLi5Ib3Jpem9udGFsIHJ1bGVzXG4gKiBTVEFUUy4uLi4uLi4uLi4uLi4uLlNpbXBsZSBzdGF0cyBvYmplY3RcbiAqIEdSRVlCT1guLi4uLi4uLi4uLi4uV2lyZWZyYW1pbmcgc3R5bGVzXG4gKlxuICogV0lEVEhTLi4uLi4uLi4uLi4uLi5XaWR0aCBjbGFzc2VzIGZvciB1c2UgYWxvbmdzaWRlIHRoZSBncmlkIHN5c3RlbSBldGMuXG4gKiBQVVNILi4uLi4uLi4uLi4uLi4uLlB1c2ggY2xhc3NlcyBmb3IgbWFuaXB1bGF0aW5nIGdyaWRzXG4gKiBQVUxMLi4uLi4uLi4uLi4uLi4uLlB1bGwgY2xhc3NlcyBmb3IgbWFuaXB1bGF0aW5nIGdyaWRzXG4gKiBCUkFORC4uLi4uLi4uLi4uLi4uLkhlbHBlciBjbGFzcyB0byBhcHBseSBicmFuZCB0cmVhdG1lbnQgdG8gZWxlbWVudHNcbiAqIERFQlVHLi4uLi4uLi4uLi4uLi4uRW5hYmxlIHRvIGFkZCB2aXN1YWwgZmxhZ3MgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFdBUk5JTkdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKlxuICogaW51aXQuY3NzLCBiZWluZyBhbiBPTyBmcmFtZXdvcmssIHdvcmtzIGluIGtlZXBpbmcgd2l0aCB0aGUgb3Blbi9jbG9zZWRcbiAqIHByaW5jaXBsZS4gVGhlIHZhcmlhYmxlcyB5b3Ugc2V0IHByZXZpb3VzbHkgYXJlIG5vdyBiZWluZyB1c2VkIHRocm91Z2hvdXRcbiAqIGludWl0LmNzcyB0byBzdHlsZSBldmVyeXRoaW5nIHdlIG5lZWQgZm9yIGEgYmFzZS4gQW55IGN1c3RvbSBzdHlsZXMgU0hPVUxEXG4gKiBOT1QgYmUgYWRkZWQgb3IgbW9kaWZpZWQgaW4gaW51aXQuY3NzIGRpcmVjdGx5LCBidXQgYWRkZWQgdmlhIHlvdXIgdGhlbWVcbiAqIHN0eWxlc2hlZXQgYXMgcGVyIHRoZSBvcGVuL2Nsb3NlZCBwcmluY2lwbGU6XG4gKlxuICogY3Nzd2l6YXJkcnkuY29tLzIwMTIvMDYvdGhlLW9wZW4tY2xvc2VkLXByaW5jaXBsZS1hcHBsaWVkLXRvLWNzc1xuICpcbiAqIFRyeSBub3QgdG8gZWRpdCBhbnkgQ1NTIGJleW9uZCB0aGlzIHBvaW50OyBpZiB5b3UgZmluZCB5b3UgbmVlZCB0byBkbyBzb1xuICogaXQgaXMgYSBmYWlsaW5nIG9mIHRoZSBmcmFtZXdvcmsgc28gcGxlYXNlIHR3ZWV0IGF0IEBpbnVpdGNzcy5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRGVU5DVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1BUCBHRVQgREVFUFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkUFggVE8gUkVNXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLypcbiAqIENvbnZlcnQgYSBweCB2YWx1ZSB0byB0aGUgZXF1aXZhbGVudCByZW0gdmFsdWUuXG4gKlxuICogVGFrZXMgYm90aCBweCB2YWx1ZXMsIGFuZCB1bml0bGVzcyB2YWx1ZXMuXG4gKlxuICogV2lsbCB1c2UgJGZzLWJhc2UgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgdGFrZXMgYSBzZWNvbmQgcGFyYW1ldGVyLCBkZWZhdWx0ZWQgdG9cbiAqIDE2cHguXG4gKlxuICogVmFsdWUgcHJvdmlkZWQgc2hvdWxkIGJlIHNhbWUgYXMgcGl4ZWwgdmFsdWUgb24gaHRtbCB0YWdcbiAqXG4gKiBFeGFtcGxlOlxuXG4gIC5teS1jbGFzcyB7XG4gICAgZm9udC1zaXplOiBweC10by1yZW0oMjRweCk7IC8vID0+IDEuNXJlbVxuICB9XG5cbiAgLy8gb3JcblxuICAubXktY2xhc3Mge1xuICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDI0KTsgLy8gPT4gMS41cmVtXG4gIH1cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFDQ0VTU0lCSUxJVFlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIENTUyBhcnJvd3MhISEgQnV0Li4uIGJlZm9yZSB5b3UgcmVhZCBvbiwgeW91IG1pZ2h0IHdhbnQgdG8gZ3JhYiBhIGNvZmZlZS4uLlxuICpcbiAqIFRoaXMgbWl4aW4gY3JlYXRlcyBhIENTUyBhcnJvdyBvbiBhIGdpdmVuIGVsZW1lbnQuIFdlIGNhbiBoYXZlIHRoZSBhcnJvd1xuICogYXBwZWFyIGluIG9uZSBvZiAxMiBsb2NhdGlvbnMsIHRodXM6XG4gKlxuICogICAgIDAxICAwMiAgMDNcbiAqICArLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogMTIgfCAgICAgICAgICB8IDA0XG4gKiAgfCAgICAgICAgICB8XG4gKiAxMSB8ICAgICAgICAgIHwgMDVcbiAqICB8ICAgICAgICAgIHxcbiAqIDEwIHwgICAgICAgICAgfCAwNlxuICogICstLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgMDkgIDA4ICAwN1xuICpcbiAqIFlvdSBwYXNzIHRoaXMgcG9zaXRpb24gaW4gYWxvbmcgd2l0aCBhIGRlc2lyZWQgYXJyb3cgY29sb3IgYW5kIG9wdGlvbmFsXG4gKiBib3JkZXIgY29sb3IsIGZvciBleGFtcGxlOlxuICpcbiAqIGBAaW5jbHVkZSBhcnJvdyh0b3AsIGxlZnQsIHJlZClgXG4gKlxuICogZm9yIGp1c3QgYSBzaW5nbGUsIHJlZCBhcnJvdywgb3I6XG4gKlxuICogYEBpbmNsdWRlIGFycm93KGJvdHRvbSwgY2VudGVyLCByZWQsIGJsYWNrKWBcbiAqXG4gKiB3aGljaCB3aWxsIGNyZWF0ZSBhIHJlZCB0cmlhbmdsZSB3aXRoIGEgYmxhY2sgYm9yZGVyIHdoaWNoIHNpdHMgYXQgdGhlIGJvdHRvbVxuICogY2VudGVyIG9mIHRoZSBlbGVtZW50LiBDYWxsIHRoZSBtaXhpbiB0aHVzOlxuICpcbiAgIC5mb297XG4gICAgIGJhY2tncm91bmQtY29sb3I6I0JBREE1NTtcbiAgICAgYm9yZGVyOjFweCBzb2xpZCAjQUNFO1xuICAgICBAaW5jbHVkZSBhcnJvdyh0b3AsIGxlZnQsICNCQURBNTUsICNBQ0UpO1xuICAgfVxuICpcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSBmdWxseSBmb3JtZWQgdHlwZSBzdHlsZSAoc2l6aW5nIGFuZCB2ZXJ0aWNhbCByaHl0aG0pIGJ5IHBhc3NpbmcgaW4gYVxuICogc2luZ2xlIHZhbHVlLCBlLmcuOlxuICpcbiAgIGBAaW5jbHVkZSBmb250LXNpemUoMTBweCk7YFxuICpcbiAqIFRoYW5rcyB0byBAcmVkY2xvdjNyIGZvciB0aGUgYGxpbmUtaGVpZ2h0YCBTYXNzOlxuICogdHdpdHRlci5jb20vcmVkY2xvdjNyL3N0YXR1cy8yNTAzMDE1MzkzMjE3OTg2NTdcbiAqL1xuLyoqXG4gKiBTdHlsZSBhbnkgbnVtYmVyIG9mIGhlYWRpbmdzIGluIG9uZSBmZWxsIHN3b29wLCBlLmcuOlxuICpcbiAgIC5mb297XG4gICAgIEBpbmNsdWRlIGhlYWRpbmdzKDEsIDMpe1xuICAgICAgIGNvbG9yOiNCQURBNTU7XG4gICAgIH1cbiAgfVxuICpcbiAqIFdpdGggdGhhbmtzIHRvIEBsYXJfenp6LCBAcGFyYW5vaWRhLCBAcm93YW5tYW5uaW5nIGFuZCB1bHRpbWF0ZWx5XG4gKiBAdGhpZXJyeWxlbW91bGVjIGZvciByZWZpbmluZyBhbmQgaW1wcm92aW5nIG15IGluaXRpYWwgbWl4aW4uXG4gKi9cbi8qKlxuICogTWVkaWEgcXVlcnkgbWl4aW4uXG4gKlxuICogSXTigJlzIG5vdCBncmVhdCBwcmFjdGljZSB0byBkZWZpbmUgc29saWQgYnJlYWtwb2ludHMgdXAtZnJvbnQsIHByZWZlcnJpbmcgdG9cbiAqIG1vZGlmeSB5b3VyIGRlc2lnbiB3aGVuIGl0IG5lZWRzIGl0LCByYXRoZXIgdGhhbiBhc3N1bWluZyB5b3XigJlsbCB3YW50IGFcbiAqIGNoYW5nZSBhdCDigJhtb2JpbGXigJkuIEhvd2V2ZXIsIGFzIGludWl0LmNzcyBpcyByZXF1aXJlZCB0byB0YWtlIGEgaGFuZHMgb2ZmXG4gKiBhcHByb2FjaCB0byBkZXNpZ24gZGVjaXNpb25zLCB0aGlzIGlzIHRoZSBjbG9zZXN0IHdlIGNhbiBnZXQgdG8gYmFrZWQtaW5cbiAqIHJlc3BvbnNpdmVuZXNzLiBJdOKAmXMgZmxleGlibGUgZW5vdWdoIHRvIGFsbG93IHlvdSB0byBzZXQgeW91ciBvd24gYnJlYWtwb2ludHNcbiAqIGJ1dCBzb2xpZCBlbm91Z2ggdG8gYmUgZnJhbWV3b3JraWZpZWQuXG4gKlxuICogV2UgZGVmaW5lIHNvbWUgYnJvYWQgYnJlYWtwb2ludHMgaW4gb3VyIHZhcnMgZmlsZSB0aGF0IGFyZSBwaWNrZWQgdXAgaGVyZVxuICogZm9yIHVzZSBpbiBhIHNpbXBsZSBtZWRpYSBxdWVyeSBtaXhpbi4gT3VyIG9wdGlvbnMgYXJlOlxuICpcbiAqIHBhbG1cbiAqIGxhcFxuICogbGFwLWFuZC11cFxuICogcG9ydGFibGVcbiAqIGRlc2tcbiAqIGRlc2std2lkZVxuICpcbiAqIE5vdCB1c2luZyBhIG1lZGlhIHF1ZXJ5IHdpbGwsIG5hdHVyYWxseSwgc2VydmUgc3R5bGVzIHRvIGFsbCBkZXZpY2VzLlxuICpcbiAqIGBAaW5jbHVkZSBtZWRpYS1xdWVyeShwYWxtKXsgW3N0eWxlcyBoZXJlXSB9YFxuICpcbiAqIFdlIHdvcmsgb3V0IHlvdXIgZW5kIHBvaW50cyBmb3IgeW91OlxuICovXG4vKipcbiAqIEZvcmNlIG92ZXJseSBsb25nIHNwYW5zIG9mIHRleHQgdG8gdHJ1bmNhdGUsIGUuZy46XG4gKlxuICAgYEBpbmNsdWRlIHRydW5jYXRlKDEwMCUpO2BcbiAqXG4gKiBXaGVyZSBgJHRydW5jYXRpb24tYm91bmRhcnlgIGlzIGEgdW5pdGVkIG1lYXN1cmVtZW50LlxuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEJBU0VcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICRBTEwgQkFTRSBJTVBPUlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkUkVTRVRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEEgbW9yZSBjb25zaWRlcmVkIHJlc2V0OyBtb3JlIG9mIGEgcmVzdGFydC4uLlxuICogQXMgcGVyOiBjc3N3aXphcmRyeS5jb20vMjAxMS8xMC9yZXNldC1yZXN0YXJ0ZWRcbiAqL1xuLyoqXG4gICogTGV04oCZcyBtYWtlIHRoZSBib3ggbW9kZWwgYWxsIG5pY2UsIHNoYWxsIHdlLi4uP1xuICAqL1xuKiwgKjpiZWZvcmUsICo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG5cbi8qKlxuICogVGhlIHVzdWFsLi4uXG4gKi9cbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsXG5wLCBibG9ja3F1b3RlLCBwcmUsXG5kbCwgZGQsIG9sLCB1bCxcbmZvcm0sIGZpZWxkc2V0LCBsZWdlbmQsXG50YWJsZSwgdGgsIHRkLCBjYXB0aW9uLFxuaHIge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gKiBHaXZlIGEgaGVscCBjdXJzb3IgdG8gZWxlbWVudHMgdGhhdCBnaXZlIGV4dHJhIGluZm8gb24gYDpob3ZlcmAuXG4gKi9cbmFiYnJbdGl0bGVdLCBkZm5bdGl0bGVdIHtcbiAgY3Vyc29yOiBoZWxwOyB9XG5cbi8qKlxuICogUmVtb3ZlIHVuZGVybGluZXMgZnJvbSBwb3RlbnRpYWxseSB0cm91Ymxlc29tZSBlbGVtZW50cy5cbiAqL1xudSwgaW5zIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG5cbi8qKlxuICogQXBwbHkgZmF1eCB1bmRlcmxpbmUgdmlhIGBib3JkZXItYm90dG9tYC5cbiAqL1xuaW5zIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkOyB9XG5cbi8qKlxuICogU28gdGhhdCBgYWx0YCB0ZXh0IGlzIHZpc3VhbGx5IG9mZnNldCBpZiBpbWFnZXMgZG9u4oCZdCBsb2FkLlxuICovXG5pbWcge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuLyoqXG4gKiBHaXZlIGZvcm0gZWxlbWVudHMgc29tZSBjdXJzb3IgaW50ZXJhY3Rpb25zLi4uXG4gKi9cbmxhYmVsLFxuaW5wdXQsXG50ZXh0YXJlYSxcbmJ1dHRvbixcbnNlbGVjdCxcbm9wdGlvbiB7XG4gIGN1cnNvcjogcG9pbnRlcjsgfVxuXG4udGV4dC1pbnB1dDphY3RpdmUsXG4udGV4dC1pbnB1dDpmb2N1cyxcbnRleHRhcmVhOmFjdGl2ZSxcbnRleHRhcmVhOmZvY3VzIHtcbiAgY3Vyc29yOiB0ZXh0O1xuICBvdXRsaW5lOiBub25lOyB9XG5cbi8qISBub3JtYWxpemUuY3NzIHYzLjAuMyB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cbi8qKlxuICogMS4gU2V0IGRlZmF1bHQgZm9udCBmYW1pbHkgdG8gc2Fucy1zZXJpZi5cbiAqIDIuIFByZXZlbnQgaU9TIGFuZCBJRSB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIGRldmljZSBvcmllbnRhdGlvbiBjaGFuZ2UsXG4gKiAgICB3aXRob3V0IGRpc2FibGluZyB1c2VyIHpvb20uXG4gKi9cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgLyogMSAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IG1hcmdpbi5cbiAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKiBIVE1MNSBkaXNwbGF5IGRlZmluaXRpb25zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYW55IEhUTUw1IGVsZW1lbnQgaW4gSUUgOC85LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBkZXRhaWxzYCBvciBgc3VtbWFyeWAgaW4gSUUgMTAvMTFcbiAqIGFuZCBGaXJlZm94LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBtYWluYCBpbiBJRSAxMS5cbiAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5tYWluLFxubWVudSxcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBQcmV2ZW50IGRpc3BsYXlpbmcgYGF1ZGlvYCB3aXRob3V0IGNvbnRyb2xzIGluIE1vYmlsZSBTYWZhcmkgNC81LzYvNy5cbiAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLlxuICogSGlkZSB0aGUgYHRlbXBsYXRlYCBlbGVtZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICovXG5baGlkZGVuXSxcbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKiBMaW5rc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgb2YgZm9jdXNlZCBlbGVtZW50cyB3aGVuIHRoZXkgYXJlIGFsc28gaW4gYW5cbiAqIGFjdGl2ZS9ob3ZlciBzdGF0ZS5cbiAqL1xuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDsgfVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgc3R5bGluZyBvZiBgYWJiclt0aXRsZV1gLlxuICogMS4gQ29ycmVjdCBzdHlsaW5nIGluIEZpcmVmb3ggMzkgYW5kIE9wZXJhIDEyLlxuICogMi4gQ29ycmVjdCBtaXNzaW5nIHN0eWxpbmcgaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgLyogMSAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IHN0eWxpbmcgb2YgYiBhbmQgc3Ryb25nLlxuICogMS4gQ29ycmVjdCBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgaW4gU2FmYXJpIDYuMC4yLlxuICogMi4gQ29ycmVjdCBzdHlsZSBzZXQgdG8gYGJvbGRgIGluIEVkZ2UgMTIrLCBTYWZhcmkgNi4yKywgYW5kIENocm9tZSAxOCsuXG4gKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogaW5oZXJpdDtcbiAgLyogMSAqLyB9XG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cbm1hcmsge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xuICBjb2xvcjogIzAwMDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlOyB9XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cbiAqL1xuaW1nIHtcbiAgYm9yZGVyOiAwOyB9XG5cbi8qKlxuICogQ29ycmVjdCBvdmVyZmxvdyBub3QgaGlkZGVuIGluIElFIDkvMTAvMTEuXG4gKi9cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS5cbiAqL1xuZmlndXJlIHtcbiAgbWFyZ2luOiAxZW0gNDBweDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IHN0eWxpbmcgb2YgYGhyYC5cbiAqIDEuIENvcnJlY3QgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gRmlyZWZveC5cbiAqIDIuIENvcnJlY3QgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLzExIGFuZCBFZGdlIDEyLlxuICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250LXNpemUgZm9yIHByZWZvcm1hdHRlZCB0ZXh0LlxuICogMi4gQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5jb2RlLFxua2JkLFxucHJlLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTtcbiAgLyogMiAqLyB9XG5cbi8qIEZvcm1zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxuICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICovXG4vKipcbiAqIDEuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAyLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udDogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLzExLlxuICovXG5idXR0b24ge1xuICBvdmVyZmxvdzogdmlzaWJsZTsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4gKiBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3gsIElFIDgvOS8xMC8xMSwgYW5kIE9wZXJhLlxuICogQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LlxuICovXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxuXG4vKipcbiAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbiAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4gKi9cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIC8qIDMgKi8gfVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cbmJ1dHRvbltkaXNhYmxlZF0sXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDsgfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gKiBSZXN0b3JlIGZvY3VzIHN0eWxlIGluIEZpcmVmb3ggNCsgKHVuc2V0IGJ5IGEgcnVsZSBhYm92ZSlcbiAqL1xuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuaW5wdXQ6LW1vei1mb2N1c3Jpbmcge1xuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7IH1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsOyB9XG5cbi8qKlxuICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgcmVzcGVjdCBib3gtc2l6aW5nLCBwYWRkaW5nLCBvciB3aWR0aC5cbiAqXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS8xMC5cbiAqL1xuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAqL1xuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gKiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyB9XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSBhbmQgQ2hyb21lIG9uIE9TIFguXG4gKiBTYWZhcmkgKGJ1dCBub3QgQ2hyb21lKSBjbGlwcyB0aGUgY2FuY2VsIGJ1dHRvbiB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaGFzXG4gKiBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuXG4gKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICogRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nLlxuICovXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGNvbG9yYCBub3QgYmVpbmcgaW5oZXJpdGVkIGluIElFIDgvOS8xMC8xMS5cbiAqIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cbiAqL1xubGVnZW5kIHtcbiAgYm9yZGVyOiAwO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxuLyoqXG4gKiBSZXN0b3JlIGZvbnQgd2VpZ2h0ICh1bnNldCBieSBhIHJ1bGUgYWJvdmUpLlxuICogTk9URTogdGhlIGRlZmF1bHQgY2Fubm90IHNhZmVseSBiZSBjaGFuZ2VkIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFguXG4gKi9cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkRE9DVU1FTlRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5odG1sIHtcbiAgLypcbiAgICogQ2FuJ3QgdXNlIHJlbGF0aXZlIHVuaXRzIG9uIGh0bWwgZHVlIHRvIGJ1ZyBvblxuICAgKiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAgICogQ29kZVBlbjogaHR0cDovL2NvZGVwZW4uaW8vbGFycnlib3RoYS9wZW4vd0tZWVhFXG4gICAqIENocm9tZSBCdWcgVHJhY2tlcjogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMxOTYyMyNjMTZcbiAgICovXG4gIC8qXG4gICAqIFRPRE86IHVzZSByZWxhdGl2ZSB1bml0IG9uY2UgQ2hyb21lIGJ1ZyBpcyBmaXhlZFxuICAgKi9cbiAgZm9udC1zaXplOiAxOHB4O1xuICBtaW4taGVpZ2h0OiAxMDAlOyB9XG5cbmh0bWwsIGJvZHksIGJ1dHRvbiwgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEge1xuICBmb250LWZhbWlseTogXCJPcGVuU2Fuc1wiLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgY29sb3I6ICM0MDQwNDA7IH1cblxuLyoqXG4gKiBGaXJlRm94IG9uIEFuZHJvaWQgYWRkcyBncmFkaWVudHMgdG8gdGhlc2UgZWxlbWVudHNcbiAqIExldCdzIGVuZCB0aGUgdHlyYW5ueVxuICovXG5idXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsgfVxuXG5ib2R5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgZm9udC1zaXplOiAxZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjIyMjIyO1xuICBtYXJnaW46IDA7IH1cblxuLypcbiAqIFJlbW92ZSB0ZXh0LXNoYWRvdyBpbiBzZWxlY3Rpb24gaGlnaGxpZ2h0OiBoNWJwLmNvbS9pXG4gKiBUaGVzZSBzZWxlY3Rpb24gZGVjbGFyYXRpb25zIGhhdmUgdG8gYmUgc2VwYXJhdGVcbiAqL1xuOjotbW96LXNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICNhY2RlZDU7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LXNoYWRvdzogbm9uZTsgfVxuXG46OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICNhY2RlZDU7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LXNoYWRvdzogbm9uZTsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICRDT0RFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBVc2UgYW4gZXhwbGljaXQgZm9udCBzdGFjayB0byBlbnN1cmUgYnJvd3NlcnMgcmVuZGVyIGNvcnJlY3QgYGxpbmUtaGVpZ2h0YC5cbiAqL1xucHJlIHtcbiAgb3ZlcmZsb3c6IGF1dG87IH1cblxucHJlIG1hcmsge1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gIGNvbG9yOiBpbmhlcml0OyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgJEZPUk1TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKlxuICogRGVtbzoganNmaWRkbGUubmV0L2ludWl0Y3NzL01oSEhVXG4gKlxuICovXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDEuNTsgfVxuXG4vKipcbiAqIFRleHQgaW5wdXRzXG4gKlxuICogSW5zdGVhZCBvZiBhIGBbdHlwZV1gIHNlbGVjdG9yIGZvciBlYWNoIGtpbmQgb2YgZm9ybSBpbnB1dCwgd2UganVzdCB1c2UgYVxuICogY2xhc3MgdG8gdGFyZ2V0IGFueS9ldmVyeSBvbmUsIGUuZy46XG4gICA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPXRleHQtaW5wdXQ+XG4gICA8aW5wdXQgdHlwZT1lbWFpbCBjbGFzcz10ZXh0LWlucHV0PlxuICAgPGlucHV0IHR5cGU9cGFzc3dvcmQgY2xhc3M9dGV4dC1pbnB1dD5cbiAqXG4gKi9cbi50ZXh0LWlucHV0LFxudGV4dGFyZWEge1xuICAvKipcbiAgICogU3R5bGUgdGhlc2UgdmlhIHlvdXIgdGhlbWUgc3R5bGVzaGVldC5cbiAgICovIH1cblxuLyoqXG4gKiBSYWRpb3MgYW5kIENoZWNrYm94ZXNcbiAqXG4gKiBNYWtlIHJhZGlvcyBhbmQgY2hlY2tib3hlcyBhcHBlYXIgY2xpY2thYmxlXG4gKi9cbmlucHV0W3R5cGU9XCJyYWRpb1wiXSxcbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyOiBub25lOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlx0XHQkU0hBUkVEXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBXaGVyZSBgbWFyZ2luLWJvdHRvbWAgaXMgY29uY2VybmVkLCB0aGlzIHZhbHVlIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiBiYXNlIGxpbmUtaGVpZ2h0LiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIGEgY29uc2lzdGVudCB2ZXJ0aWNhbCByaHl0aG0uXG4gKiBBcyBwZXI6IGNzc3dpemFyZHJ5LmNvbS8yMDEyLzA2L3NpbmdsZS1kaXJlY3Rpb24tbWFyZ2luLWRlY2xhcmF0aW9uc1xuICovXG4vKipcbiAqIEJhc2UgZWxlbWVudHNcbiAqL1xuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgaGdyb3VwLFxudWwsIG9sLCBkbCxcbmJsb2NrcXVvdGUsIHAsIGFkZHJlc3MsXG50YWJsZSxcbmZpZWxkc2V0LCBmaWd1cmUsXG5wcmUge1xuICBtYXJnaW4tdG9wOiAwO1xuICBtYXJnaW4tYm90dG9tOiAyN3B4O1xuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07IH1cblxuLyoqXG4gKiBgaHJgIGVsZW1lbnRzIG9ubHkgdGFrZSB1cCBhIGZldyBwaXhlbHMsIHNvIHdlIG5lZWQgdG8gZ2l2ZSB0aGVtIHNwZWNpYWxcbiAqIHRyZWF0bWVudCByZWdhcmRpbmcgdmVydGljYWwgcmh5dGhtLlxuICovXG5ociB7XG4gIG1hcmdpbi1ib3R0b206IDI3cHg7XG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxuXG4vKipcbiAqIFdoZXJlIGBtYXJnaW4tbGVmdGAgaXMgY29uY2VybmVkIHdlIHdhbnQgdG8gdHJ5IGFuZCBpbmRlbnQgY2VydGFpbiBlbGVtZW50c1xuICogYnkgYSBjb25zaXN0ZW50IGFtb3VudC4gRGVmaW5lIHRoYXQgYW1vdW50IG9uY2UsIGhlcmUuXG4gKi9cbnVsLCBvbCwgZGQge1xuICBtYXJnaW4tbGVmdDogMS41ZW07IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAkSEVBRElOR1NcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEFzIHBlcjogY3Nzd2l6YXJkcnkuY29tLzIwMTIvMDIvcHJhZ21hdGljLXByYWN0aWNhbC1mb250LXNpemluZy1pbi1jc3NcbiAqXG4gKiBXaGVuIHdlIGRlZmluZSBhIGhlYWRpbmcgd2UgYWxzbyBkZWZpbmUgYSBjb3JyZXNwb25kaW5nIGNsYXNzIHRvIGdvIHdpdGggaXQuXG4gKiBUaGlzIGFsbG93cyB1cyB0byBhcHBseSwgc2F5LCBgY2xhc3M9ZnMtLWgxYCB0byBhIGBoM2A7IGEgZG91YmxlLXN0cmFuZGVkXG4gKiBoZWFkaW5nIGhpZXJhcmNoeS5cbiAqL1xuaDEsIC5mcy0taDEge1xuICBmb250LXNpemU6IDIuNjY2NjdyZW07IH1cblxuaDIsIC5mcy0taDIsIGgxIHNtYWxsLCAucGVyc29uYV9fbWFpbiB7XG4gIGZvbnQtc2l6ZTogMi4yMjIyMnJlbTsgfVxuXG5oMywgLmZzLS1oMyB7XG4gIGZvbnQtc2l6ZTogMnJlbTsgfVxuXG5oNCwgLmZzLS1oNCwgLm1lbnVfX2l0ZW0gPiBhIHtcbiAgZm9udC1zaXplOiAxLjMzMzMzcmVtOyB9XG5cbmg1LCAuZnMtLWg1IHtcbiAgZm9udC1zaXplOiAxcmVtOyB9XG5cbmg2LCAuZnMtLWg2IHtcbiAgZm9udC1zaXplOiAwLjg4ODg5cmVtOyB9XG5cbi8qKlxuICogQSBzZXJpZXMgb2YgY2xhc3NlcyBmb3Igc2V0dGluZyBtYXNzaXZlIHR5cGU7IGZvciB1c2UgaW4gaGVyb2VzLCBtYXN0aGVhZHMsXG4gKiBwcm9tb3MsIGV0Yy5cbiAqL1xuLmZzLS1naWdhIHtcbiAgZm9udC1zaXplOiA1LjMzMzMzcmVtOyB9XG5cbi5mcy0tbWVnYSB7XG4gIGZvbnQtc2l6ZTogNHJlbTsgfVxuXG4uZnMtLWtpbG8sIC5wb3J0Zm9saW8taXRlbV9fdGl0bGUge1xuICBmb250LXNpemU6IDIuNjY2NjdyZW07IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRJTUFHRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIERlbW86IGpzZmlkZGxlLm5ldC9pbnVpdGNzcy95TXR1clxuICovXG4vKlxuICogUHJldmVudCBpbWFnZXMgYW5kIGVtYmVkcyBmcm9tIGV4Y2VlZGluZyB3aWR0aCBvZiBjb250YWluaW5nIGVsZW1lbnRcbiAqIHdpZHRoOjsgYW5kIGhlaWdodDo7IGFib3ZlIGFwcGx5XG4gKi9cbmltZywgZW1iZWQsIG9iamVjdCwgdmlkZW8ge1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bzsgfVxuXG4vKipcbiAqIEltYWdlcyBpbiBgZmlndXJlYCBlbGVtZW50cy5cbiAqL1xuZmlndXJlID4gaW1nIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRMSVNUU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUmVtb3ZlIHZlcnRpY2FsIHNwYWNpbmcgZnJvbSBuZXN0ZWQgbGlzdHMuXG4gKi9cbmxpID4gdWwsXG5saSA+IG9sIHtcbiAgbWFyZ2luLXRvcDogMDtcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxuXG4vKipcbiAqIEhhdmUgYSBudW1iZXJlZCBgdWxgIHdpdGhvdXQgdGhlIHNlbWFudGljcyBpbXBsaWVkIGJ5IHVzaW5nIGFuIGBvbGAuXG4gKi9cbi8qdWwqL1xuLm51bWJlcmVkLWxpc3Qge1xuICBsaXN0LXN0eWxlLXR5cGU6IGRlY2ltYWw7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRQQVJBR1JBUEhTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBUaGUgYC5sZWRlYCBjbGFzcyBpcyB1c2VkIHRvIG1ha2UgdGhlIGludHJvZHVjdG9yeSB0ZXh0ICh1c3VhbGx5IGEgcGFyYWdyYXBoKVxuICogb2YgYSBkb2N1bWVudCBzbGlnaHRseSBsYXJnZXIuXG4gKi9cbi5sZWRlLFxuLmxlYWQge1xuICBmb250LXNpemU6IDEuMTI1cmVtOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkUVVPVEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBJZiBFbmdsaXNoIHF1b3RlcyBhcmUgc2V0IGluIGBfdmFycy5zY3NzYCwgZGVmaW5lIHRoZW0gaGVyZS5cbiAqL1xuLyoqXG4gKiBCaWcgdXAgQGJvYmxldDogaHRtbDVkb2N0b3IuY29tL2Jsb2NrcXVvdGUtcS1jaXRlXG4gKi9cbi8qKlxuICogSW5saW5lIHF1b3Rlcy5cbiAqL1xucSB7XG4gIHF1b3RlczogXCLigJhcIiBcIuKAmVwiIFwiXFxcXDIwMUMgXCIgXCJcXFxcMjAxRCBcIjsgfVxuICBxOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXDIwMThcIjtcbiAgICBjb250ZW50OiBvcGVuLXF1b3RlOyB9XG4gIHE6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXFwyMDE5XCI7XG4gICAgY29udGVudDogY2xvc2UtcXVvdGU7IH1cbiAgcSBxOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXDIwMUNcIjtcbiAgICBjb250ZW50OiBvcGVuLXF1b3RlOyB9XG4gIHEgcTphZnRlciB7XG4gICAgY29udGVudDogXCJcXDIwMURcIjtcbiAgICBjb250ZW50OiBjbG9zZS1xdW90ZTsgfVxuXG4vKipcbiAqXG4gICA8YmxvY2txdW90ZT5cbiAgICAgICA8cD5JbnNhbml0eTogZG9pbmcgdGhlIHNhbWUgdGhpbmcgb3ZlciBhbmQgb3ZlciBhZ2FpbiBhbmQgZXhwZWN0aW5nXG4gICAgICAgZGlmZmVyZW50IHJlc3VsdHMuPC9wPlxuICAgICAgIDxiIGNsYXNzPXNvdXJjZT5BbGJlcnQgRWluc3RlaW48L2I+XG4gICA8L2Jsb2NrcXVvdGU+XG4gKlxuICovXG5ibG9ja3F1b3RlIHA6Zmlyc3Qtb2YtdHlwZSB7XG4gIG1hcmdpbi10b3A6IDA7IH1cblxuYmxvY2txdW90ZSBwOmxhc3Qtb2YtdHlwZSB7XG4gIG1hcmdpbi1ib3R0b206IDA7IH1cblxuLnNvdXJjZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWluZGVudDogMDsgfVxuICAuc291cmNlOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXDIwMTRcIjsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFNNQUxMUFJJTlRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEEgc2VyaWVzIG9mIGNsYXNzZXMgZm9yIHNldHRpbmcgdGlueSB0eXBlOyBmb3IgdXNlIGluIHNtYWxscHJpbnQgZXRjLlxuICovXG4uZnMtLW1pbGxpLCAuYnRuLS1iYXNlIHtcbiAgZm9udC1zaXplOiAwLjc3Nzc4cmVtOyB9XG5cbi5mcy0tbWljcm8ge1xuICBmb250LXNpemU6IDAuNTU1NTZyZW07IH1cblxuLmZzLS1uYW5vIHtcbiAgZm9udC1zaXplOiAwLjQ0NDQ0cmVtOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgJFRBQkxFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogV2UgaGF2ZSBhIGxvdCBhdCBvdXIgZGlzcG9zYWwgZm9yIG1ha2luZyB2ZXJ5IGNvbXBsZXggdGFibGUgY29uc3RydWN0cywgZS5nLjpcbiAqXG4gICA8dGFibGUgY2xhc3M9XCJ0YWJsZS0tYm9yZGVyZWQgIHRhYmxlLS1zdHJpcGVkICB0YWJsZS0tZGF0YVwiPlxuICAgICA8Y29sZ3JvdXA+XG4gICAgICAgPGNvbCBjbGFzcz10MTA+XG4gICAgICAgPGNvbCBjbGFzcz10MTA+XG4gICAgICAgPGNvbCBjbGFzcz10MTA+XG4gICAgICAgPGNvbD5cbiAgICAgPC9jb2xncm91cD5cbiAgICAgPHRoZWFkPlxuICAgICAgIDx0cj5cbiAgICAgICAgIDx0aCBjb2xzcGFuPTM+Rm9vPC90aD5cbiAgICAgICAgIDx0aD5CYXI8L3RoPlxuICAgICAgIDwvdHI+XG4gICAgICAgPHRyPlxuICAgICAgICAgPHRoPkxvcmVtPC90aD5cbiAgICAgICAgIDx0aD5JcHN1bTwvdGg+XG4gICAgICAgICA8dGggY2xhc3M9bnVtZXJpY2FsPkRvbG9yPC90aD5cbiAgICAgICAgIDx0aD5TaXQ8L3RoPlxuICAgICAgIDwvdHI+XG4gICAgIDwvdGhlYWQ+XG4gICAgIDx0Ym9keT5cbiAgICAgICA8dHI+XG4gICAgICAgICA8dGggcm93c3Bhbj0zPlNpdDwvdGg+XG4gICAgICAgICA8dGQ+RG9sb3I8L3RkPlxuICAgICAgICAgPHRkIGNsYXNzPW51bWVyaWNhbD4wMy43ODg8L3RkPlxuICAgICAgICAgPHRkPkxvcmVtPC90ZD5cbiAgICAgICA8L3RyPlxuICAgICAgIDx0cj5cbiAgICAgICAgIDx0ZD5Eb2xvcjwvdGQ+XG4gICAgICAgICA8dGQgY2xhc3M9bnVtZXJpY2FsPjMyLjIxMDwvdGQ+XG4gICAgICAgICA8dGQ+TG9yZW08L3RkPlxuICAgICAgIDwvdHI+XG4gICAgICAgPHRyPlxuICAgICAgICAgPHRkPkRvbG9yPC90ZD5cbiAgICAgICAgIDx0ZCBjbGFzcz1udW1lcmljYWw+NDcuNzk3PC90ZD5cbiAgICAgICAgIDx0ZD5Mb3JlbTwvdGQ+XG4gICAgICAgPC90cj5cbiAgICAgICA8dHI+XG4gICAgICAgICA8dGggcm93c3Bhbj0yPlNpdDwvdGg+XG4gICAgICAgICA8dGQ+RG9sb3I8L3RkPlxuICAgICAgICAgPHRkIGNsYXNzPW51bWVyaWNhbD4wOS42NDA8L3RkPlxuICAgICAgICAgPHRkPkxvcmVtPC90ZD5cbiAgICAgICA8L3RyPlxuICAgICAgIDx0cj5cbiAgICAgICAgIDx0ZD5Eb2xvcjwvdGQ+XG4gICAgICAgICA8dGQgY2xhc3M9bnVtZXJpY2FsPjEyLjExNzwvdGQ+XG4gICAgICAgICA8dGQ+TG9yZW08L3RkPlxuICAgICAgIDwvdHI+XG4gICAgIDwvdGJvZHk+XG4gICA8L3RhYmxlPlxuICpcbiAqL1xudGFibGUge1xuICB3aWR0aDogMTAwJTsgfVxuXG50aCxcbnRkIHtcbiAgcGFkZGluZzogNi43NXB4O1xuICBwYWRkaW5nOiAwLjM3NXJlbTtcbiAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0ODBweCkge1xuICAgIHRoLFxuICAgIHRkIHtcbiAgICAgIHBhZGRpbmc6IDEzLjVweDtcbiAgICAgIHBhZGRpbmc6IDAuNzVyZW07IH0gfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJENPTVBPTkVOVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFMTCBDT01QT05FTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRCVVRUT05TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLmJ0bi0tYmFzZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBoZWlnaHQ6IGF1dG87XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG4gIC5idG4tLWJhc2U6YWN0aXZlLCAuYnRuLS1iYXNlOmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lOyB9XG5cbi5idG4tLWJhc2Uge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRyYW5zaXRpb246IGFsbCAxNTBtcyBlYXNlLWluOyB9XG4gIC5idG4tLWJhc2UsIC5idG4tLWJhc2U6aG92ZXIsIC5idG4tLWJhc2U6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICAuYnRuLS1iYXNlOmFjdGl2ZSwgLmJ0bi0tYmFzZTpmb2N1cyB7XG4gICAgdHJhbnNpdGlvbjogbm9uZTsgfVxuICBbZGlzYWJsZWRdLmJ0bi0tYmFzZSwgLmJ0bi0tYmFzZTpkaXNhYmxlZCB7XG4gICAgY3Vyc29yOiBkZWZhdWx0OyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkUkFUSU8gT0JKRUNUXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBBbiBvYmplY3Qgd2hpY2ggc2NhbGVzIHByb3BvcnRpb25hdGVseVxuICpcbiAqIGh0dHA6Ly9iaXQubHkvMTlJOGlSOFxuICovXG4ucG9ydGZvbGlvLWl0ZW0ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47IH1cbiAgLnBvcnRmb2xpby1pdGVtOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuXG4ucG9ydGZvbGlvLWl0ZW1fX2lubmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRMQVlPVVRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFMTCBMQVlPVVRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJENMRUFSRklYXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBNaWNybyBjbGVhcmZpeCwgYXMgcGVyOiBjc3MtMTAxLm9yZy9hcnRpY2xlcy9jbGVhcmZpeC9sYXRlc3QtbmV3LWNsZWFyZml4LXNvLWZhci5waHBcbiAqIEV4dGVuZCB0aGUgY2xlYXJmaXggY2xhc3Mgd2l0aCBTYXNzIHRvIGF2b2lkIHRoZSBgLmNmYCBjbGFzcyBhcHBlYXJpbmcgb3ZlclxuICogYW5kIG92ZXIgaW4geW91ciBtYXJrdXAuXG4gKi9cbi5jZjpiZWZvcmUsIC5jZjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICBjbGVhcjogYm90aDsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEdSSURTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBGbHVpZCBhbmQgbmVzdGFibGUgZ3JpZCBzeXN0ZW0sIGUuZy46XG4gKlxuICAgPGRpdiBjbGFzcz1cImd3XCI+XG4gICAgICAgPGRpdiBjbGFzcz1cImcgIG9uZS10aGlyZFwiPlxuICAgICAgICAgICA8cD5PbmUgdGhpcmQgZ3JpZDwvcD5cbiAgICAgICA8L2Rpdj48IS0tXG4gICAgLS0+PGRpdiBjbGFzcz1cImcgIHR3by10aGlyZHNcIj5cbiAgICAgICAgICAgPHA+VHdvIHRoaXJkcyBncmlkPC9wPlxuICAgICAgIDwvZGl2PjwhLS1cbiAgICAtLT48ZGl2IGNsYXNzPVwiZyAgb25lLWhhbGZcIj5cbiAgICAgICAgICAgPHA+T25lIGhhbGYgZ3JpZDwvcD5cbiAgICAgICA8L2Rpdj48IS0tXG4gICAgLS0+PGRpdiBjbGFzcz1cImcgIG9uZS1xdWFydGVyXCI+XG4gICAgICAgICAgIDxwPk9uZSBxdWFydGVyIGdyaWQ8L3A+XG4gICAgICAgPC9kaXY+PCEtLVxuICAgIC0tPjxkaXYgY2xhc3M9XCJnICBvbmUtcXVhcnRlclwiPlxuICAgICAgICAgICA8cD5PbmUgcXVhcnRlciBncmlkPC9wPlxuICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gKlxuICogRGVtbzoganNmaWRkbGUubmV0L2ludWl0Y3NzL0NMWVVDXG4gKlxuICovXG4vKipcbiAqIEdyaWQgd3JhcHBlclxuICovXG4uZ3csIC5ndy0tbm8tZ3V0cyB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIG1hcmdpbi1sZWZ0OiAtMzZweDtcbiAgbWFyZ2luLWxlZnQ6IC0ycmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7IH1cbiAgLm9sZGllIC5ndywgLm9sZGllIC5ndy0tbm8tZ3V0cyB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKyAyZW0pOyB9XG5cbi8qKlxuICogdmVyeSBpbmZyZXF1ZW50bHkgb2NjdXJpbmcgZ3JpZCB3cmFwcGVycyBhcyBjaGlsZHJlbiBvZiBncmlkIHdyYXBwZXJzLlxuICovXG5bY2xhc3MqPVwiZ3dcIl0gPiBbY2xhc3MqPVwiZ3dcIl0ge1xuICBtYXJnaW4tbGVmdDogMDsgfVxuXG4vKipcbiAgICogZ3JpZCBpdGVtc1xuICAgKi9cbi5nLCAuZy0tdGFsbCwgLmctLWF1dG8sIC5nLS1zaHJpbmstd3JhcCwgc2lkZWJhciwgbWFpbiB7XG4gIHBhZGRpbmctbGVmdDogMzZweDtcbiAgcGFkZGluZy1sZWZ0OiAycmVtO1xuICB3aWR0aDogMTAwJTsgfVxuICAub2xkaWUgLmcsIC5vbGRpZSAuZy0tdGFsbCwgLm9sZGllIC5nLS1hdXRvLCAub2xkaWUgLmctLXNocmluay13cmFwLCAub2xkaWUgc2lkZWJhciwgLm9sZGllIG1haW4ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XG5cbi8qKlxuICAgKiBBbGxvdyB0aGUgY29udGVudCBvZiBhIGNvbHVtbiB0byBvY2N1cHkgdGhlIGZ1bGwgaGVpZ2h0IG9mIHRoZVxuICAgKiBjb2x1bW5cbiAgICpcbiAgICogQ2hpbGQgZGl2IG11c3QgaGF2ZSBmbGV4OiAxOyBvciB3aWR0aDogMTAwJTsgc2V0IHRvIGZpbGwgaG9yaXpvbnRhbFxuICAgKiBzcGFjZVxuICAgKlxuICAgKiBEb2VzIG5vdCB3b3JrIGZvciBsZWdhY3kgYnJvd3NlcnNcbiAgICovXG4uZy0tdGFsbCB7XG4gIGRpc3BsYXk6IGZsZXg7IH1cblxuLyoqXG4gICAqIENvbHVtbnMgdGhhdCBhdXRvbWF0aWNhbGx5IGZpbGwgdGhlIHJlbWFpbmluZyBob3Jpem9udGFsIHNwYWNlXG4gICAqXG4gICAqIFRvIGJlIHVzZWQgYXMgaXMsIHdpdGhvdXQgY29sdW1uIHdpZHRoIG1vZGlmaWVycy4gVmlld3BvcnQgbW9kaWZpZXJzIHdpbGxcbiAgICogbm90IG92ZXJyaWRlIHRoZSBlZmZlY3Qgb2YgYXV0by5cbiAgICpcbiAgICogV29ya3MgbW9zdGx5IG9uIDw9IElFOSwgbW9zdGx5XG4gICAqIFJlcXVpcmVzIC5vbGRpZSBjbGFzcyBvbiBodG1sIHRhZ1xuICAgKi9cbi5nLS1hdXRvIHtcbiAgZmxleDogMTsgfVxuICAub2xkaWUgLmctLWF1dG8ge1xuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7IH1cblxuLyoqXG4gICAqIENvbHVtbnMgdGhhdCBzaHJpbmsgd3JhcCBhcm91bmQgY29udGVudCAtIGlkZWFsIGZvciAuZy0tYXV0byB0byBvY2N1cHlcbiAgICogcmVtYWluaW5nIHNwYWNlLlxuICAgKlxuICAgKiBUbyBiZSB1c2VkIGFzIGlzLCB3aXRob3V0IGNvbHVtbiB3aWR0aCBtb2RpZmllcnMuIFZpZXdwb3J0IG1vZGlmaWVycyB3aWxsXG4gICAqIG92ZXJyaWRlIHNocmluay13cmFwIGVmZmVjdFxuICAgKlxuICAgKiBXb3JrcyBtb3N0bHkgb24gPD0gSUU5LCBtb3N0bHlcbiAgICovXG4uZy0tc2hyaW5rLXdyYXAge1xuICB3aWR0aDogYXV0bzsgfVxuICAub2xkaWUgLmctLXNocmluay13cmFwIHtcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsOyB9XG5cbi8qKlxuKiByZXZlcnNlZCBncmlkc1xuKi9cbi8qKlxuKiBndXR0ZXJsZXNzIGdyaWRzIGhhdmUgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mIHJlZ3VsYXIgZ3JpZHMsIG1pbnVzIGFueSBzcGFjaW5nLlxuKi9cbi5ndy0tbm8tZ3V0cyB7XG4gIG1hcmdpbi1sZWZ0OiAwOyB9XG4gIC5ndy0tbm8tZ3V0cyA+IC5nLCAuZ3ctLW5vLWd1dHMgPiAuZy0tdGFsbCwgLmd3LS1uby1ndXRzID4gLmctLWF1dG8sIC5ndy0tbm8tZ3V0cyA+IC5nLS1zaHJpbmstd3JhcCwgLmd3LS1uby1ndXRzID4gc2lkZWJhciwgLmd3LS1uby1ndXRzID4gbWFpbiB7XG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9XG5cbi8qKlxuKiBjZW50ZXJlZCBncmlkcyBhbGlnbiBncmlkIGl0ZW1zIGNlbnRyYWxseSB3aXRob3V0IG5lZWRpbmcgdG8gdXNlIHB1c2ggb3IgcHVsbFxuKiBjbGFzc2VzLlxuKi9cbi8qKlxuICogcmlnaHQgYWxpZ25lZCBncmlkc1xuICovXG4vKipcbiAqIG1pZGRsZSBhbGlnbmVkIGdyaWRzXG4gKi9cbi8qKlxuICogYm90dG9tIGFsaWduZWQgZ3JpZHNcbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXHRcdCRXSURUSFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFNpemVzIGluIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC4gVGhlc2UgYXJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBvdGhlclxuICogb2JqZWN0cyBhbmQgYWJzdHJhY3Rpb25zIGZvdW5kIGluIGludWl0LmNzcywgbW9zdCBjb21tb25seSB0aGUgZ3JpZCBzeXN0ZW1cbiAqIGFuZCBmYXV4IGZsZXhib3guXG4gKlxuICogV2UgaGF2ZSBhIG1peGluIHRvIGdlbmVyYXRlIG91ciB3aWR0aHMgYW5kIHRoZWlyIGJyZWFrcG9pbnQtc3BlY2lmaWNcbiAqIHZhcmlhdGlvbnMuXG4gKi9cbi8qKlxuXHQqIFdob2xlXG5cdCovXG4uZy0xXFwvMSB7XG4gIHdpZHRoOiAxMDAlOyB9XG5cbi8qKlxuXHQqIEhhbHZlc1xuXHQqL1xuLmctMVxcLzIsIC5nLTJcXC80LCAuZy0zXFwvNiwgLmctNFxcLzgsIC5nLTVcXC8xMCwgLmctNlxcLzEyIHtcbiAgd2lkdGg6IDUwJTsgfVxuXG4vKipcblx0KiBUaGlyZHNcblx0Ki9cbi5nLTFcXC8zLCAuZy0yXFwvNiwgLmctNFxcLzEyIHtcbiAgd2lkdGg6IDMzLjMzMyU7IH1cblxuLmctMlxcLzMsIC5nLTRcXC82LCAuZy04XFwvMTIge1xuICB3aWR0aDogNjYuNjY2JTsgfVxuXG4vKipcblx0KiBRdWFydGVyc1xuXHQqL1xuLmctMVxcLzQsIC5nLTJcXC84LCAuZy0zXFwvMTIge1xuICB3aWR0aDogMjUlOyB9XG5cbi5nLTNcXC80LCAuZy02XFwvOCwgLmctOVxcLzEyIHtcbiAgd2lkdGg6IDc1JTsgfVxuXG4vKipcblx0KiBGaWZ0aHNcblx0Ki9cbi5nLTFcXC81LCAuZy0yXFwvMTAge1xuICB3aWR0aDogMjAlOyB9XG5cbi5nLTJcXC81LCAuZy00XFwvMTAge1xuICB3aWR0aDogNDAlOyB9XG5cbi5nLTNcXC81LCAuZy02XFwvMTAge1xuICB3aWR0aDogNjAlOyB9XG5cbi5nLTRcXC81LCAuZy04XFwvMTAge1xuICB3aWR0aDogODAlOyB9XG5cbi8qKlxuXHQqIFNpeHRoc1xuXHQqL1xuLmctMVxcLzYsIC5nLTJcXC8xMiB7XG4gIHdpZHRoOiAxNi42NjYlOyB9XG5cbi5nLTVcXC82LCAuZy0xMFxcLzEyIHtcbiAgd2lkdGg6IDgzLjMzMyU7IH1cblxuLyoqXG5cdCogRWlnaHRoc1xuXHQqL1xuLmctMVxcLzgge1xuICB3aWR0aDogMTIuNSU7IH1cblxuLmctM1xcLzgge1xuICB3aWR0aDogMzcuNSU7IH1cblxuLmctNVxcLzgge1xuICB3aWR0aDogNjIuNSU7IH1cblxuLmctN1xcLzgge1xuICB3aWR0aDogODcuNSU7IH1cblxuLyoqXG5cdCogVGVudGhzXG5cdCovXG4uZy0xXFwvMTAge1xuICB3aWR0aDogMTAlOyB9XG5cbi5nLTNcXC8xMCB7XG4gIHdpZHRoOiAzMCU7IH1cblxuLmctN1xcLzEwIHtcbiAgd2lkdGg6IDcwJTsgfVxuXG4uZy05XFwvMTAge1xuICB3aWR0aDogOTAlOyB9XG5cbi8qKlxuXHQqIFR3ZWxmdGhzXG5cdCovXG4uZy0xXFwvMTIge1xuICB3aWR0aDogOC4zMzMlOyB9XG5cbi5nLTVcXC8xMiB7XG4gIHdpZHRoOiA0MS42NjYlOyB9XG5cbi5nLTdcXC8xMiB7XG4gIHdpZHRoOiA1OC4zMzMlOyB9XG5cbi5nLTExXFwvMTIge1xuICB3aWR0aDogOTEuNjY2JTsgfVxuXG4vKipcbiAqIElmIHlvdSBoYXZlIHNldCBgJHJlc3BvbnNpdmVgIHRvIOKAmHRydWXigJkgaW4gYF92YXJzLnNjc3NgIHRoZW4geW91IG5vdyBoYXZlXG4gKiBhY2Nlc3MgdG8gdGhlc2UgY2xhc3Nlcy4gWW91IGNhbiBkZWZpbmUgYXQgd2hpY2ggYnJlYWtwb2ludCB5b3XigJlkIGxpa2UgYW5cbiAqIGVsZW1lbnQgdG8gYmUgYSBjZXJ0YWluIHNpemUsIGUuZy46XG4gKlxuICogYDxkaXYgY2xhc3M9XCJnICBnLTEvNFx0Zy1sYXAtMS8yXHRnLXBhbG0tMS8xXCI+IC4uLiA8L2Rpdj5gXG4gKlxuICogVGhpcyB3b3VsZCBjcmVhdGUgYSBgZGl2YCB0aGF0LCBhdCDigJhkZXNrdG9w4oCZIHNpemVzLCB0YWtlcyB1cCBhIG9mLTQgb2YgdGhlXG4gKiBob3Jpem9udGFsIHNwYWNlLCBhIG9mLTIgb2YgdGhhdCBzcGFjZSBhdCDigJh0YWJsZXTigJkgc2l6ZXMsIGFuZCBnb2VzIGZ1bGwgd2lkdGhcbiAqIGF0IOKAmG1vYmlsZeKAmSBzaXplcy5cbiAqXG4gKiBEZW1vOiBqc2ZpZGRsZS5uZXQvaW51aXRjc3MvV1M0R2VcbiAqXG4gKi9cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpIHtcbiAgLyoqXG5cdCogV2hvbGVcblx0Ki9cbiAgLmctcGFsbS0xXFwvMSB7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgLyoqXG5cdCogSGFsdmVzXG5cdCovXG4gIC5nLXBhbG0tMVxcLzIsIC5nLXBhbG0tMlxcLzQsIC5nLXBhbG0tM1xcLzYsIC5nLXBhbG0tNFxcLzgsIC5nLXBhbG0tNVxcLzEwLCAuZy1wYWxtLTZcXC8xMiB7XG4gICAgd2lkdGg6IDUwJTsgfVxuICAvKipcblx0KiBUaGlyZHNcblx0Ki9cbiAgLmctcGFsbS0xXFwvMywgLmctcGFsbS0yXFwvNiwgLmctcGFsbS00XFwvMTIge1xuICAgIHdpZHRoOiAzMy4zMzMlOyB9XG4gIC5nLXBhbG0tMlxcLzMsIC5nLXBhbG0tNFxcLzYsIC5nLXBhbG0tOFxcLzEyIHtcbiAgICB3aWR0aDogNjYuNjY2JTsgfVxuICAvKipcblx0KiBRdWFydGVyc1xuXHQqL1xuICAuZy1wYWxtLTFcXC80LCAuZy1wYWxtLTJcXC84LCAuZy1wYWxtLTNcXC8xMiB7XG4gICAgd2lkdGg6IDI1JTsgfVxuICAuZy1wYWxtLTNcXC80LCAuZy1wYWxtLTZcXC84LCAuZy1wYWxtLTlcXC8xMiB7XG4gICAgd2lkdGg6IDc1JTsgfVxuICAvKipcblx0KiBGaWZ0aHNcblx0Ki9cbiAgLmctcGFsbS0xXFwvNSwgLmctcGFsbS0yXFwvMTAge1xuICAgIHdpZHRoOiAyMCU7IH1cbiAgLmctcGFsbS0yXFwvNSwgLmctcGFsbS00XFwvMTAge1xuICAgIHdpZHRoOiA0MCU7IH1cbiAgLmctcGFsbS0zXFwvNSwgLmctcGFsbS02XFwvMTAge1xuICAgIHdpZHRoOiA2MCU7IH1cbiAgLmctcGFsbS00XFwvNSwgLmctcGFsbS04XFwvMTAge1xuICAgIHdpZHRoOiA4MCU7IH1cbiAgLyoqXG5cdCogU2l4dGhzXG5cdCovXG4gIC5nLXBhbG0tMVxcLzYsIC5nLXBhbG0tMlxcLzEyIHtcbiAgICB3aWR0aDogMTYuNjY2JTsgfVxuICAuZy1wYWxtLTVcXC82LCAuZy1wYWxtLTEwXFwvMTIge1xuICAgIHdpZHRoOiA4My4zMzMlOyB9XG4gIC8qKlxuXHQqIEVpZ2h0aHNcblx0Ki9cbiAgLmctcGFsbS0xXFwvOCB7XG4gICAgd2lkdGg6IDEyLjUlOyB9XG4gIC5nLXBhbG0tM1xcLzgge1xuICAgIHdpZHRoOiAzNy41JTsgfVxuICAuZy1wYWxtLTVcXC84IHtcbiAgICB3aWR0aDogNjIuNSU7IH1cbiAgLmctcGFsbS03XFwvOCB7XG4gICAgd2lkdGg6IDg3LjUlOyB9XG4gIC8qKlxuXHQqIFRlbnRoc1xuXHQqL1xuICAuZy1wYWxtLTFcXC8xMCB7XG4gICAgd2lkdGg6IDEwJTsgfVxuICAuZy1wYWxtLTNcXC8xMCB7XG4gICAgd2lkdGg6IDMwJTsgfVxuICAuZy1wYWxtLTdcXC8xMCB7XG4gICAgd2lkdGg6IDcwJTsgfVxuICAuZy1wYWxtLTlcXC8xMCB7XG4gICAgd2lkdGg6IDkwJTsgfVxuICAvKipcblx0KiBUd2VsZnRoc1xuXHQqL1xuICAuZy1wYWxtLTFcXC8xMiB7XG4gICAgd2lkdGg6IDguMzMzJTsgfVxuICAuZy1wYWxtLTVcXC8xMiB7XG4gICAgd2lkdGg6IDQxLjY2NiU7IH1cbiAgLmctcGFsbS03XFwvMTIge1xuICAgIHdpZHRoOiA1OC4zMzMlOyB9XG4gIC5nLXBhbG0tMTFcXC8xMiB7XG4gICAgd2lkdGg6IDkxLjY2NiU7IH0gfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ4MXB4KSBhbmQgKG1heC13aWR0aDogOTE5cHgpIHtcbiAgLyoqXG5cdCogV2hvbGVcblx0Ki9cbiAgLmctbGFwLTFcXC8xIHtcbiAgICB3aWR0aDogMTAwJTsgfVxuICAvKipcblx0KiBIYWx2ZXNcblx0Ki9cbiAgLmctbGFwLTFcXC8yLCAuZy1sYXAtMlxcLzQsIC5nLWxhcC0zXFwvNiwgLmctbGFwLTRcXC84LCAuZy1sYXAtNVxcLzEwLCAuZy1sYXAtNlxcLzEyIHtcbiAgICB3aWR0aDogNTAlOyB9XG4gIC8qKlxuXHQqIFRoaXJkc1xuXHQqL1xuICAuZy1sYXAtMVxcLzMsIC5nLWxhcC0yXFwvNiwgLmctbGFwLTRcXC8xMiB7XG4gICAgd2lkdGg6IDMzLjMzMyU7IH1cbiAgLmctbGFwLTJcXC8zLCAuZy1sYXAtNFxcLzYsIC5nLWxhcC04XFwvMTIge1xuICAgIHdpZHRoOiA2Ni42NjYlOyB9XG4gIC8qKlxuXHQqIFF1YXJ0ZXJzXG5cdCovXG4gIC5nLWxhcC0xXFwvNCwgLmctbGFwLTJcXC84LCAuZy1sYXAtM1xcLzEyIHtcbiAgICB3aWR0aDogMjUlOyB9XG4gIC5nLWxhcC0zXFwvNCwgLmctbGFwLTZcXC84LCAuZy1sYXAtOVxcLzEyIHtcbiAgICB3aWR0aDogNzUlOyB9XG4gIC8qKlxuXHQqIEZpZnRoc1xuXHQqL1xuICAuZy1sYXAtMVxcLzUsIC5nLWxhcC0yXFwvMTAge1xuICAgIHdpZHRoOiAyMCU7IH1cbiAgLmctbGFwLTJcXC81LCAuZy1sYXAtNFxcLzEwIHtcbiAgICB3aWR0aDogNDAlOyB9XG4gIC5nLWxhcC0zXFwvNSwgLmctbGFwLTZcXC8xMCB7XG4gICAgd2lkdGg6IDYwJTsgfVxuICAuZy1sYXAtNFxcLzUsIC5nLWxhcC04XFwvMTAge1xuICAgIHdpZHRoOiA4MCU7IH1cbiAgLyoqXG5cdCogU2l4dGhzXG5cdCovXG4gIC5nLWxhcC0xXFwvNiwgLmctbGFwLTJcXC8xMiB7XG4gICAgd2lkdGg6IDE2LjY2NiU7IH1cbiAgLmctbGFwLTVcXC82LCAuZy1sYXAtMTBcXC8xMiB7XG4gICAgd2lkdGg6IDgzLjMzMyU7IH1cbiAgLyoqXG5cdCogRWlnaHRoc1xuXHQqL1xuICAuZy1sYXAtMVxcLzgge1xuICAgIHdpZHRoOiAxMi41JTsgfVxuICAuZy1sYXAtM1xcLzgge1xuICAgIHdpZHRoOiAzNy41JTsgfVxuICAuZy1sYXAtNVxcLzgge1xuICAgIHdpZHRoOiA2Mi41JTsgfVxuICAuZy1sYXAtN1xcLzgge1xuICAgIHdpZHRoOiA4Ny41JTsgfVxuICAvKipcblx0KiBUZW50aHNcblx0Ki9cbiAgLmctbGFwLTFcXC8xMCB7XG4gICAgd2lkdGg6IDEwJTsgfVxuICAuZy1sYXAtM1xcLzEwIHtcbiAgICB3aWR0aDogMzAlOyB9XG4gIC5nLWxhcC03XFwvMTAge1xuICAgIHdpZHRoOiA3MCU7IH1cbiAgLmctbGFwLTlcXC8xMCB7XG4gICAgd2lkdGg6IDkwJTsgfVxuICAvKipcblx0KiBUd2VsZnRoc1xuXHQqL1xuICAuZy1sYXAtMVxcLzEyIHtcbiAgICB3aWR0aDogOC4zMzMlOyB9XG4gIC5nLWxhcC01XFwvMTIge1xuICAgIHdpZHRoOiA0MS42NjYlOyB9XG4gIC5nLWxhcC03XFwvMTIge1xuICAgIHdpZHRoOiA1OC4zMzMlOyB9XG4gIC5nLWxhcC0xMVxcLzEyIHtcbiAgICB3aWR0aDogOTEuNjY2JTsgfSB9XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDgxcHgpIHtcbiAgLyoqXG5cdCogV2hvbGVcblx0Ki9cbiAgLmctbGFwLWFuZC11cC0xXFwvMSB7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgLyoqXG5cdCogSGFsdmVzXG5cdCovXG4gIC5nLWxhcC1hbmQtdXAtMVxcLzIsIC5nLWxhcC1hbmQtdXAtMlxcLzQsIC5nLWxhcC1hbmQtdXAtM1xcLzYsIC5nLWxhcC1hbmQtdXAtNFxcLzgsIC5nLWxhcC1hbmQtdXAtNVxcLzEwLCAuZy1sYXAtYW5kLXVwLTZcXC8xMiB7XG4gICAgd2lkdGg6IDUwJTsgfVxuICAvKipcblx0KiBUaGlyZHNcblx0Ki9cbiAgLmctbGFwLWFuZC11cC0xXFwvMywgLmctbGFwLWFuZC11cC0yXFwvNiwgLmctbGFwLWFuZC11cC00XFwvMTIge1xuICAgIHdpZHRoOiAzMy4zMzMlOyB9XG4gIC5nLWxhcC1hbmQtdXAtMlxcLzMsIC5nLWxhcC1hbmQtdXAtNFxcLzYsIC5nLWxhcC1hbmQtdXAtOFxcLzEyIHtcbiAgICB3aWR0aDogNjYuNjY2JTsgfVxuICAvKipcblx0KiBRdWFydGVyc1xuXHQqL1xuICAuZy1sYXAtYW5kLXVwLTFcXC80LCAuZy1sYXAtYW5kLXVwLTJcXC84LCAuZy1sYXAtYW5kLXVwLTNcXC8xMiB7XG4gICAgd2lkdGg6IDI1JTsgfVxuICAuZy1sYXAtYW5kLXVwLTNcXC80LCAuZy1sYXAtYW5kLXVwLTZcXC84LCAuZy1sYXAtYW5kLXVwLTlcXC8xMiB7XG4gICAgd2lkdGg6IDc1JTsgfVxuICAvKipcblx0KiBGaWZ0aHNcblx0Ki9cbiAgLmctbGFwLWFuZC11cC0xXFwvNSwgLmctbGFwLWFuZC11cC0yXFwvMTAge1xuICAgIHdpZHRoOiAyMCU7IH1cbiAgLmctbGFwLWFuZC11cC0yXFwvNSwgLmctbGFwLWFuZC11cC00XFwvMTAge1xuICAgIHdpZHRoOiA0MCU7IH1cbiAgLmctbGFwLWFuZC11cC0zXFwvNSwgLmctbGFwLWFuZC11cC02XFwvMTAge1xuICAgIHdpZHRoOiA2MCU7IH1cbiAgLmctbGFwLWFuZC11cC00XFwvNSwgLmctbGFwLWFuZC11cC04XFwvMTAge1xuICAgIHdpZHRoOiA4MCU7IH1cbiAgLyoqXG5cdCogU2l4dGhzXG5cdCovXG4gIC5nLWxhcC1hbmQtdXAtMVxcLzYsIC5nLWxhcC1hbmQtdXAtMlxcLzEyIHtcbiAgICB3aWR0aDogMTYuNjY2JTsgfVxuICAuZy1sYXAtYW5kLXVwLTVcXC82LCAuZy1sYXAtYW5kLXVwLTEwXFwvMTIge1xuICAgIHdpZHRoOiA4My4zMzMlOyB9XG4gIC8qKlxuXHQqIEVpZ2h0aHNcblx0Ki9cbiAgLmctbGFwLWFuZC11cC0xXFwvOCB7XG4gICAgd2lkdGg6IDEyLjUlOyB9XG4gIC5nLWxhcC1hbmQtdXAtM1xcLzgge1xuICAgIHdpZHRoOiAzNy41JTsgfVxuICAuZy1sYXAtYW5kLXVwLTVcXC84IHtcbiAgICB3aWR0aDogNjIuNSU7IH1cbiAgLmctbGFwLWFuZC11cC03XFwvOCB7XG4gICAgd2lkdGg6IDg3LjUlOyB9XG4gIC8qKlxuXHQqIFRlbnRoc1xuXHQqL1xuICAuZy1sYXAtYW5kLXVwLTFcXC8xMCB7XG4gICAgd2lkdGg6IDEwJTsgfVxuICAuZy1sYXAtYW5kLXVwLTNcXC8xMCB7XG4gICAgd2lkdGg6IDMwJTsgfVxuICAuZy1sYXAtYW5kLXVwLTdcXC8xMCB7XG4gICAgd2lkdGg6IDcwJTsgfVxuICAuZy1sYXAtYW5kLXVwLTlcXC8xMCB7XG4gICAgd2lkdGg6IDkwJTsgfVxuICAvKipcblx0KiBUd2VsZnRoc1xuXHQqL1xuICAuZy1sYXAtYW5kLXVwLTFcXC8xMiB7XG4gICAgd2lkdGg6IDguMzMzJTsgfVxuICAuZy1sYXAtYW5kLXVwLTVcXC8xMiB7XG4gICAgd2lkdGg6IDQxLjY2NiU7IH1cbiAgLmctbGFwLWFuZC11cC03XFwvMTIge1xuICAgIHdpZHRoOiA1OC4zMzMlOyB9XG4gIC5nLWxhcC1hbmQtdXAtMTFcXC8xMiB7XG4gICAgd2lkdGg6IDkxLjY2NiU7IH0gfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkxOXB4KSB7XG4gIC8qKlxuXHQqIFdob2xlXG5cdCovXG4gIC5nLXBvcnRhYmxlLTFcXC8xIHtcbiAgICB3aWR0aDogMTAwJTsgfVxuICAvKipcblx0KiBIYWx2ZXNcblx0Ki9cbiAgLmctcG9ydGFibGUtMVxcLzIsIC5nLXBvcnRhYmxlLTJcXC80LCAuZy1wb3J0YWJsZS0zXFwvNiwgLmctcG9ydGFibGUtNFxcLzgsIC5nLXBvcnRhYmxlLTVcXC8xMCwgLmctcG9ydGFibGUtNlxcLzEyIHtcbiAgICB3aWR0aDogNTAlOyB9XG4gIC8qKlxuXHQqIFRoaXJkc1xuXHQqL1xuICAuZy1wb3J0YWJsZS0xXFwvMywgLmctcG9ydGFibGUtMlxcLzYsIC5nLXBvcnRhYmxlLTRcXC8xMiB7XG4gICAgd2lkdGg6IDMzLjMzMyU7IH1cbiAgLmctcG9ydGFibGUtMlxcLzMsIC5nLXBvcnRhYmxlLTRcXC82LCAuZy1wb3J0YWJsZS04XFwvMTIge1xuICAgIHdpZHRoOiA2Ni42NjYlOyB9XG4gIC8qKlxuXHQqIFF1YXJ0ZXJzXG5cdCovXG4gIC5nLXBvcnRhYmxlLTFcXC80LCAuZy1wb3J0YWJsZS0yXFwvOCwgLmctcG9ydGFibGUtM1xcLzEyIHtcbiAgICB3aWR0aDogMjUlOyB9XG4gIC5nLXBvcnRhYmxlLTNcXC80LCAuZy1wb3J0YWJsZS02XFwvOCwgLmctcG9ydGFibGUtOVxcLzEyIHtcbiAgICB3aWR0aDogNzUlOyB9XG4gIC8qKlxuXHQqIEZpZnRoc1xuXHQqL1xuICAuZy1wb3J0YWJsZS0xXFwvNSwgLmctcG9ydGFibGUtMlxcLzEwIHtcbiAgICB3aWR0aDogMjAlOyB9XG4gIC5nLXBvcnRhYmxlLTJcXC81LCAuZy1wb3J0YWJsZS00XFwvMTAge1xuICAgIHdpZHRoOiA0MCU7IH1cbiAgLmctcG9ydGFibGUtM1xcLzUsIC5nLXBvcnRhYmxlLTZcXC8xMCB7XG4gICAgd2lkdGg6IDYwJTsgfVxuICAuZy1wb3J0YWJsZS00XFwvNSwgLmctcG9ydGFibGUtOFxcLzEwIHtcbiAgICB3aWR0aDogODAlOyB9XG4gIC8qKlxuXHQqIFNpeHRoc1xuXHQqL1xuICAuZy1wb3J0YWJsZS0xXFwvNiwgLmctcG9ydGFibGUtMlxcLzEyIHtcbiAgICB3aWR0aDogMTYuNjY2JTsgfVxuICAuZy1wb3J0YWJsZS01XFwvNiwgLmctcG9ydGFibGUtMTBcXC8xMiB7XG4gICAgd2lkdGg6IDgzLjMzMyU7IH1cbiAgLyoqXG5cdCogRWlnaHRoc1xuXHQqL1xuICAuZy1wb3J0YWJsZS0xXFwvOCB7XG4gICAgd2lkdGg6IDEyLjUlOyB9XG4gIC5nLXBvcnRhYmxlLTNcXC84IHtcbiAgICB3aWR0aDogMzcuNSU7IH1cbiAgLmctcG9ydGFibGUtNVxcLzgge1xuICAgIHdpZHRoOiA2Mi41JTsgfVxuICAuZy1wb3J0YWJsZS03XFwvOCB7XG4gICAgd2lkdGg6IDg3LjUlOyB9XG4gIC8qKlxuXHQqIFRlbnRoc1xuXHQqL1xuICAuZy1wb3J0YWJsZS0xXFwvMTAge1xuICAgIHdpZHRoOiAxMCU7IH1cbiAgLmctcG9ydGFibGUtM1xcLzEwIHtcbiAgICB3aWR0aDogMzAlOyB9XG4gIC5nLXBvcnRhYmxlLTdcXC8xMCB7XG4gICAgd2lkdGg6IDcwJTsgfVxuICAuZy1wb3J0YWJsZS05XFwvMTAge1xuICAgIHdpZHRoOiA5MCU7IH1cbiAgLyoqXG5cdCogVHdlbGZ0aHNcblx0Ki9cbiAgLmctcG9ydGFibGUtMVxcLzEyIHtcbiAgICB3aWR0aDogOC4zMzMlOyB9XG4gIC5nLXBvcnRhYmxlLTVcXC8xMiB7XG4gICAgd2lkdGg6IDQxLjY2NiU7IH1cbiAgLmctcG9ydGFibGUtN1xcLzEyIHtcbiAgICB3aWR0aDogNTguMzMzJTsgfVxuICAuZy1wb3J0YWJsZS0xMVxcLzEyIHtcbiAgICB3aWR0aDogOTEuNjY2JTsgfSB9XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTIwcHgpIHtcbiAgLyoqXG5cdCogV2hvbGVcblx0Ki9cbiAgLmctZGVzay0xXFwvMSB7XG4gICAgd2lkdGg6IDEwMCU7IH1cbiAgLyoqXG5cdCogSGFsdmVzXG5cdCovXG4gIC5nLWRlc2stMVxcLzIsIC5nLWRlc2stMlxcLzQsIC5nLWRlc2stM1xcLzYsIC5nLWRlc2stNFxcLzgsIC5nLWRlc2stNVxcLzEwLCAuZy1kZXNrLTZcXC8xMiB7XG4gICAgd2lkdGg6IDUwJTsgfVxuICAvKipcblx0KiBUaGlyZHNcblx0Ki9cbiAgLmctZGVzay0xXFwvMywgLmctZGVzay0yXFwvNiwgLmctZGVzay00XFwvMTIge1xuICAgIHdpZHRoOiAzMy4zMzMlOyB9XG4gIC5nLWRlc2stMlxcLzMsIC5nLWRlc2stNFxcLzYsIC5nLWRlc2stOFxcLzEyIHtcbiAgICB3aWR0aDogNjYuNjY2JTsgfVxuICAvKipcblx0KiBRdWFydGVyc1xuXHQqL1xuICAuZy1kZXNrLTFcXC80LCAuZy1kZXNrLTJcXC84LCAuZy1kZXNrLTNcXC8xMiB7XG4gICAgd2lkdGg6IDI1JTsgfVxuICAuZy1kZXNrLTNcXC80LCAuZy1kZXNrLTZcXC84LCAuZy1kZXNrLTlcXC8xMiB7XG4gICAgd2lkdGg6IDc1JTsgfVxuICAvKipcblx0KiBGaWZ0aHNcblx0Ki9cbiAgLmctZGVzay0xXFwvNSwgLmctZGVzay0yXFwvMTAge1xuICAgIHdpZHRoOiAyMCU7IH1cbiAgLmctZGVzay0yXFwvNSwgLmctZGVzay00XFwvMTAge1xuICAgIHdpZHRoOiA0MCU7IH1cbiAgLmctZGVzay0zXFwvNSwgLmctZGVzay02XFwvMTAge1xuICAgIHdpZHRoOiA2MCU7IH1cbiAgLmctZGVzay00XFwvNSwgLmctZGVzay04XFwvMTAge1xuICAgIHdpZHRoOiA4MCU7IH1cbiAgLyoqXG5cdCogU2l4dGhzXG5cdCovXG4gIC5nLWRlc2stMVxcLzYsIC5nLWRlc2stMlxcLzEyIHtcbiAgICB3aWR0aDogMTYuNjY2JTsgfVxuICAuZy1kZXNrLTVcXC82LCAuZy1kZXNrLTEwXFwvMTIge1xuICAgIHdpZHRoOiA4My4zMzMlOyB9XG4gIC8qKlxuXHQqIEVpZ2h0aHNcblx0Ki9cbiAgLmctZGVzay0xXFwvOCB7XG4gICAgd2lkdGg6IDEyLjUlOyB9XG4gIC5nLWRlc2stM1xcLzgge1xuICAgIHdpZHRoOiAzNy41JTsgfVxuICAuZy1kZXNrLTVcXC84IHtcbiAgICB3aWR0aDogNjIuNSU7IH1cbiAgLmctZGVzay03XFwvOCB7XG4gICAgd2lkdGg6IDg3LjUlOyB9XG4gIC8qKlxuXHQqIFRlbnRoc1xuXHQqL1xuICAuZy1kZXNrLTFcXC8xMCB7XG4gICAgd2lkdGg6IDEwJTsgfVxuICAuZy1kZXNrLTNcXC8xMCB7XG4gICAgd2lkdGg6IDMwJTsgfVxuICAuZy1kZXNrLTdcXC8xMCB7XG4gICAgd2lkdGg6IDcwJTsgfVxuICAuZy1kZXNrLTlcXC8xMCB7XG4gICAgd2lkdGg6IDkwJTsgfVxuICAvKipcblx0KiBUd2VsZnRoc1xuXHQqL1xuICAuZy1kZXNrLTFcXC8xMiB7XG4gICAgd2lkdGg6IDguMzMzJTsgfVxuICAuZy1kZXNrLTVcXC8xMiB7XG4gICAgd2lkdGg6IDQxLjY2NiU7IH1cbiAgLmctZGVzay03XFwvMTIge1xuICAgIHdpZHRoOiA1OC4zMzMlOyB9XG4gIC5nLWRlc2stMTFcXC8xMiB7XG4gICAgd2lkdGg6IDkxLjY2NiU7IH0gfVxuXG4vKipcbiAqIElmIHlvdSBoYXZlIHNldCB0aGUgYWRkaXRpb25hbCBgJHJlc3BvbnNpdmUtZXh0cmFgIHZhcmlhYmxlIHRvIOKAmHRydWXigJkgaW5cbiAqIGBfdmFycy5zY3NzYCB0aGVuIHlvdSBub3cgaGF2ZSBhY2Nlc3MgdG8gdGhlIGZvbGxvd2luZyBjbGFzcyBhdmFpbGFibGUgdG9cbiAqIGFjY29tb2RhdGUgbXVjaCBsYXJnZXIgc2NyZWVuIHJlc29sdXRpb25zLlxuICovXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0NDBweCkge1xuICAvKipcblx0KiBXaG9sZVxuXHQqL1xuICAuZy1kZXNrLXdpZGUtMVxcLzEge1xuICAgIHdpZHRoOiAxMDAlOyB9XG4gIC8qKlxuXHQqIEhhbHZlc1xuXHQqL1xuICAuZy1kZXNrLXdpZGUtMVxcLzIsIC5nLWRlc2std2lkZS0yXFwvNCwgLmctZGVzay13aWRlLTNcXC82LCAuZy1kZXNrLXdpZGUtNFxcLzgsIC5nLWRlc2std2lkZS01XFwvMTAsIC5nLWRlc2std2lkZS02XFwvMTIge1xuICAgIHdpZHRoOiA1MCU7IH1cbiAgLyoqXG5cdCogVGhpcmRzXG5cdCovXG4gIC5nLWRlc2std2lkZS0xXFwvMywgLmctZGVzay13aWRlLTJcXC82LCAuZy1kZXNrLXdpZGUtNFxcLzEyIHtcbiAgICB3aWR0aDogMzMuMzMzJTsgfVxuICAuZy1kZXNrLXdpZGUtMlxcLzMsIC5nLWRlc2std2lkZS00XFwvNiwgLmctZGVzay13aWRlLThcXC8xMiB7XG4gICAgd2lkdGg6IDY2LjY2NiU7IH1cbiAgLyoqXG5cdCogUXVhcnRlcnNcblx0Ki9cbiAgLmctZGVzay13aWRlLTFcXC80LCAuZy1kZXNrLXdpZGUtMlxcLzgsIC5nLWRlc2std2lkZS0zXFwvMTIge1xuICAgIHdpZHRoOiAyNSU7IH1cbiAgLmctZGVzay13aWRlLTNcXC80LCAuZy1kZXNrLXdpZGUtNlxcLzgsIC5nLWRlc2std2lkZS05XFwvMTIge1xuICAgIHdpZHRoOiA3NSU7IH1cbiAgLyoqXG5cdCogRmlmdGhzXG5cdCovXG4gIC5nLWRlc2std2lkZS0xXFwvNSwgLmctZGVzay13aWRlLTJcXC8xMCB7XG4gICAgd2lkdGg6IDIwJTsgfVxuICAuZy1kZXNrLXdpZGUtMlxcLzUsIC5nLWRlc2std2lkZS00XFwvMTAge1xuICAgIHdpZHRoOiA0MCU7IH1cbiAgLmctZGVzay13aWRlLTNcXC81LCAuZy1kZXNrLXdpZGUtNlxcLzEwIHtcbiAgICB3aWR0aDogNjAlOyB9XG4gIC5nLWRlc2std2lkZS00XFwvNSwgLmctZGVzay13aWRlLThcXC8xMCB7XG4gICAgd2lkdGg6IDgwJTsgfVxuICAvKipcblx0KiBTaXh0aHNcblx0Ki9cbiAgLmctZGVzay13aWRlLTFcXC82LCAuZy1kZXNrLXdpZGUtMlxcLzEyIHtcbiAgICB3aWR0aDogMTYuNjY2JTsgfVxuICAuZy1kZXNrLXdpZGUtNVxcLzYsIC5nLWRlc2std2lkZS0xMFxcLzEyIHtcbiAgICB3aWR0aDogODMuMzMzJTsgfVxuICAvKipcblx0KiBFaWdodGhzXG5cdCovXG4gIC5nLWRlc2std2lkZS0xXFwvOCB7XG4gICAgd2lkdGg6IDEyLjUlOyB9XG4gIC5nLWRlc2std2lkZS0zXFwvOCB7XG4gICAgd2lkdGg6IDM3LjUlOyB9XG4gIC5nLWRlc2std2lkZS01XFwvOCB7XG4gICAgd2lkdGg6IDYyLjUlOyB9XG4gIC5nLWRlc2std2lkZS03XFwvOCB7XG4gICAgd2lkdGg6IDg3LjUlOyB9XG4gIC8qKlxuXHQqIFRlbnRoc1xuXHQqL1xuICAuZy1kZXNrLXdpZGUtMVxcLzEwIHtcbiAgICB3aWR0aDogMTAlOyB9XG4gIC5nLWRlc2std2lkZS0zXFwvMTAge1xuICAgIHdpZHRoOiAzMCU7IH1cbiAgLmctZGVzay13aWRlLTdcXC8xMCB7XG4gICAgd2lkdGg6IDcwJTsgfVxuICAuZy1kZXNrLXdpZGUtOVxcLzEwIHtcbiAgICB3aWR0aDogOTAlOyB9XG4gIC8qKlxuXHQqIFR3ZWxmdGhzXG5cdCovXG4gIC5nLWRlc2std2lkZS0xXFwvMTIge1xuICAgIHdpZHRoOiA4LjMzMyU7IH1cbiAgLmctZGVzay13aWRlLTVcXC8xMiB7XG4gICAgd2lkdGg6IDQxLjY2NiU7IH1cbiAgLmctZGVzay13aWRlLTdcXC8xMiB7XG4gICAgd2lkdGg6IDU4LjMzMyU7IH1cbiAgLmctZGVzay13aWRlLTExXFwvMTIge1xuICAgIHdpZHRoOiA5MS42NjYlOyB9IH1cblxuLyogZW5kaWYgKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkUFVTSFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUHVzaCBjbGFzc2VzLCB0byBtb3ZlIGdyaWQgaXRlbXMgb3ZlciB0byB0aGUgcmlnaHQgYnkgY2VydGFpbiBhbW91bnRzLlxuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFBVTExcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFB1bGwgY2xhc3NlcywgdG8gbW92ZSBncmlkIGl0ZW1zIG92ZXIgdG8gdGhlIHJpZ2h0IGJ5IGNlcnRhaW4gYW1vdW50cy5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRERUJVR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qIGVuZGlmICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgQ1VTVE9NLkNTU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkVVRJTElUSUVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRGVU5DVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1JWElOU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTUlYSU5TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRNRU5VU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTUVOVVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJENPTExBUFNFRCBBTkNIT1JcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1PRElGSUVSU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkQkFDS0dST1VORCBNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEJBQ0tHUk9VTkQgTElOSyBTVEFURVMgTUlYSU5cblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFRZUE9HUkFQSFkgTUlYSU5TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRUWVBPR1JBUEhJQyBMSU5LIFNUQVRFUyBNSVhJTlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTEFZT1VUXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRJU0xBTkQgTUlYSU5TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRNQVJHSU4gQU5EIFBBRERJTkdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIHRoZXNlIG1peGlucyBzaG91bGRuJ3QgbmVlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGV4Y2VwdCBmb3IgaW4gdGhlIHBsYWNlaG9sZGVyc1xuICogZGVmaW5lZCBpbiBfbGF5b3V0cy5zY3NzXG4gKlxuICogcHJlZmVyIGV4dGVuZGluZyB0aG9zZSBwbGFjZWhvbGRlcnMgZnJvbSB5b3VyIHNlbGVjdG9ycyBvdmVyIGluY2x1ZGluZyB0aGVzZSBtaXhpbnNcbiAqXG4gKiB0aGlzIHdpbGwgcmVkdWNlIGR1cGxpY2F0aW9uIG9mIHRoZSBzYW1lIHByb3BlcnRpZXMgb3ZlciB5b3VyIHN0eWxlc2hlZXRzLCB3aGlsZVxuICogYWxsb3dpbmcgeW91IHRvIHJldXNlIGNvbnNpc3RlbnQgc3BhY2luZyBhY3Jvc3MgeW91ciBzdHlsZXNoZWV0c1xuICpcbiAqIHNpdHVhdGlvbnMgb24gd2hlbiB0byByYXRoZXIgdXNlIGFuIGluY2x1ZGUgaXMgaWYgeW91IG5lZWQgdG8gb3ZlcnJpZGUgbWFyZ2luIG9yXG4gKiBwYWRkaW5nIGluIGEgbWVkaWEgcXVlcnkgd2hlbiB0aGUgcGxhY2Vob2xkZXIgaGFzIGJlZW4gZXh0ZW5kZWQuIER1ZSB0byBzb3VyY2VcbiAqIG9yZGVyLCB5b3Ugd2lsbCBub3QgYWx3YXlzIGJlIGFibGUgdG8gb3ZlcnJpZGUgdGhlIHBsYWNlaG9sZGVycy5cbiAqIEluY2x1ZGluZyB0aGUgcmVsZXZhbnQgbWl4aW4gd2lsbCB0aGVuIGFsbG93IHlvdSB0byBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBpblxuICogeW91ciBtZWRpYSBxdWVyeS5cbiAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRNQVJHSU5cblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFBBRERJTkdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFdSQVAgTUlYSU5TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRET0NVTUVOVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogVGhpcyBzZWN0aW9uIGhvdXNlcyBzdHlsZXMgZm9yIHRoZSBiYXNlIGVsZW1lbnRzIG9mIHRoZSBwYWdlLCBnZW5lcmFsbHkgYm9keSBhbmRcbiAqIGh0bWxcbiAqL1xuLyoqXG4gKiBGaXggZmF0dHkgZm9udHMgaW4gQ2hyb21lIGFuZCBGaXJlZm94IG9uIE1hYzpcbiAqIGh0dHA6Ly9tYXhpbWlsaWFuaG9mZm1hbm4uY29tL3Bvc3RzL2JldHRlci1mb250LXJlbmRlcmluZy1vbi1vc3hcbiAqL1xuLyoqXG4gKiBVc2Ugc3RpY2t5IGZvb3RlcjpcbiAqIGh0dHA6Ly9waGlsaXB3YWx0b24uZ2l0aHViLmlvL3NvbHZlZC1ieS1mbGV4Ym94L2RlbW9zL3N0aWNreS1mb290ZXIvXG4gKlxuICogcmVxdWlyZXMgZmxleDogMSAwIGF1dG87IG9uIHByaW1hcnkgY29udGVudFxuICovXG4vKipcbiAqIFByZXZlbnQgQ2hyb21lIGFuZCBTYWZhcmkgZnJvbSBmbGFzaGluZyB3aGVuIGEgdXNlciB0YXBzIG9uIG1vYmlsZVxuICovXG5odG1sIHtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuXG4vKipcbiAqIGdldCA2MGZwcyBzY3JvbGxpbmcgYnkgZGlzYWJsaW5nIHBvaW50ZXIgZXZlbnRzOlxuICogaHR0cDovL3d3dy50aGVjc3NuaW5qYS5jb20vamF2YXNjcmlwdC9wb2ludGVyLWV2ZW50cy02MGZwc1xuICovXG4uZGlzYWJsZS1ob3Zlcixcbi5kaXNhYmxlLWhvdmVyICoge1xuICBwb2ludGVyLWV2ZW50czogbm9uZSAhaW1wb3J0YW50OyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkRk9OVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJElDT04gRk9OVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJiYXNlLWljb24tZm9udFwiO1xuICBzcmM6IHVybChcIi4uL2ZudC9iYXNlLWljb24tZm9udC9iYXNlLWljb24tZm9udC5lb3RcIik7XG4gIHNyYzogdXJsKFwiLi4vZm50L2Jhc2UtaWNvbi1mb250L2Jhc2UtaWNvbi1mb250LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcIi4uL2ZudC9iYXNlLWljb24tZm9udC9iYXNlLWljb24tZm9udC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiLi4vZm50L2Jhc2UtaWNvbi1mb250L2Jhc2UtaWNvbi1mb250LndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiLi4vZm50L2Jhc2UtaWNvbi1mb250L2Jhc2UtaWNvbi1mb250LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiLi4vZm50L2Jhc2UtaWNvbi1mb250L2Jhc2UtaWNvbi1mb250LnN2ZyNiYXNlLWljb24tZm9udFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEJBU0UgRk9OVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJPcGVuU2Fuc1wiO1xuICBzcmM6IHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udC5lb3RcIik7XG4gIHNyYzogdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LnN2ZyNPcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnRcIikgZm9ybWF0KFwic3ZnXCIpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW5TYW5zXCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQuc3ZnI09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiT3BlblNhbnNcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQuZW90XCIpO1xuICBzcmM6IHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udC5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udC50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udC5zdmcjT3BlblNhbnMtUmVndWxhci13ZWJmb250XCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiT3BlblNhbnNcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1MaWdodC13ZWJmb250LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1MaWdodC13ZWJmb250LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLUxpZ2h0LXdlYmZvbnQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcIi4uL2ZvbnQvb3Blbi1zYW5zL09wZW5TYW5zLUxpZ2h0LXdlYmZvbnQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1MaWdodC13ZWJmb250LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtTGlnaHQtd2ViZm9udC5zdmcjT3BlblNhbnMtTGlnaHQtd2ViZm9udFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xuICBmb250LXN0eWxlOiBub3JtYWw7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW5TYW5zXCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udC9vcGVuLXNhbnMvT3BlblNhbnMtUmVndWxhci13ZWJmb250LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCIuLi9mb250L29wZW4tc2Fucy9PcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnQuc3ZnI09wZW5TYW5zLVJlZ3VsYXItd2ViZm9udFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRIRUFERVIgRk9OVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2traXR0XCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udC9Sb2traXR0L3Jva2tpdHQtcmVndWxhci13ZWJmb250LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1yZWd1bGFyLXdlYmZvbnQuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udC9Sb2traXR0L3Jva2tpdHQtcmVndWxhci13ZWJmb250LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1yZWd1bGFyLXdlYmZvbnQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1yZWd1bGFyLXdlYmZvbnQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1yZWd1bGFyLXdlYmZvbnQuc3ZnI3Jva2tpdHQtcmVndWxhci13ZWJmb250XCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsOyB9XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJSb2traXR0XCI7XG4gIHNyYzogdXJsKFwiLi4vZm9udC9Sb2traXR0L3Jva2tpdHQtYm9sZC13ZWJmb250LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1ib2xkLXdlYmZvbnQuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udC9Sb2traXR0L3Jva2tpdHQtYm9sZC13ZWJmb250LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1ib2xkLXdlYmZvbnQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1ib2xkLXdlYmZvbnQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCIuLi9mb250L1Jva2tpdHQvcm9ra2l0dC1ib2xkLXdlYmZvbnQuc3ZnI3Jva2tpdHQtYm9sZC13ZWJmb250XCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEZPUk1TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRGT1JNU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmxhYmVsIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogNy4ycHg7XG4gIG1hcmdpbi1ib3R0b206IDAuNHJlbTsgfVxuXG50ZXh0YXJlYSB7XG4gIHJlc2l6ZTogbm9uZTtcbiAgbWF4LWhlaWdodDogMTIwLjBweDtcbiAgbWF4LWhlaWdodDogNi42NjY2N3JlbTsgfVxuXG5idXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhIHtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbmlucHV0LCBpbnB1dFt0eXBlPSdzZWFyY2gnXSwgdGV4dGFyZWEge1xuICBib3JkZXItcmFkaXVzOiAwOyB9XG5cbmlucHV0LCB0ZXh0YXJlYSB7XG4gIGJvcmRlcjogMHB4IHNvbGlkO1xuICBoZWlnaHQ6IGF1dG87XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IC41ZW07IH1cblxuaW5wdXQsIHRleHRhcmVhLCBzZWxlY3Qge1xuICBtYXJnaW4tYm90dG9tOiA3LjJweDtcbiAgbWFyZ2luLWJvdHRvbTogMC40cmVtO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgb3V0bGluZTogbm9uZTsgfVxuXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0sXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xuICB3aWR0aDogYXV0bzsgfVxuXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0ge1xuICBsZXR0ZXItc3BhY2luZzogLjNlbTsgfVxuXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl06OnBsYWNlaG9sZGVyIHtcbiAgbGV0dGVyLXNwYWNpbmc6IDA7IH1cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDBweDtcbiAgcGFkZGluZzogMHB4O1xuICBtYXJnaW46IDBweDsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEhFQURJTkdTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiAxOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkSU1BR0VTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBGaXggU1ZHIGltYWdlcyBub3Qgc2NhbGluZyBwcm9wb3J0aW9uYXRlbHkgaW4gSUU5LCBJRTEwLCBJRTExXG4gKi9cbmltZ1tpbWFnZUNvdmVyXSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJExJTktTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuYSwgYnV0dG9uLCAuYnRuLS1iYXNlLCAubWVudV9fc3ViIHtcbiAgdHJhbnNpdGlvbjogYWxsIDE1MG1zIGVhc2UtaW4tb3V0OyB9XG4gIGE6YWN0aXZlLCBidXR0b246YWN0aXZlLCAuYnRuLS1iYXNlOmFjdGl2ZSwgLm1lbnVfX3N1YjphY3RpdmUge1xuICAgIHRyYW5zaXRpb246IG5vbmU7IH1cblxuYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICBhLCBhOmhvdmVyIHtcbiAgICBvdXRsaW5lOiAwOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTElTVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ubWVudS0tcHJpbWFyeSwgLm1lbnVfX3N1YiB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkUlVMRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFRBQkxFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnRoLCB0ZCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkQkFTRVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmkge1xuICBmb250LXN0eWxlOiBub3JtYWw7IH1cblxuYmxvY2txdW90ZSB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgZm9udC1zaXplOiAycmVtO1xuICBwYWRkaW5nOiAyN3B4O1xuICBwYWRkaW5nOiAxLjVyZW07IH1cblxua2JkIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2U2ZTZlNjtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICBmb250LXNpemU6IDg1JTtcbiAgcGFkZGluZzogLjI1ZW0gLjVlbTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxuXG5ociB7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItbGVmdDogMDtcbiAgYm9yZGVyLXJpZ2h0OiAwO1xuICBib3JkZXItdG9wOiAwOyB9XG5cbmgxLCBoMiwgaDMge1xuICBmb250LWZhbWlseTogXCJSb2traXR0XCIsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICBsaW5lLWhlaWdodDogLjg7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbmgxIHNtYWxsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRDT01QT05FTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRDT01QT05FTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRCVVRUT05TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLmJ0bi0tYmFzZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgcGFkZGluZzogOXB4IDM2cHg7XG4gIHBhZGRpbmc6IDAuNXJlbSAycmVtOyB9XG5cbi5idG4tLWJhc2Uge1xuICBjb2xvcjogIzI3MjcyNzsgfVxuICAuYnRuLS1iYXNlOmhvdmVyLCAuYnRuLS1iYXNlOmZvY3VzIHtcbiAgICBjb2xvcjogI2ZmZjsgfVxuICAuYnRuLS1iYXNlOmFjdGl2ZSB7XG4gICAgY29sb3I6ICMyNzI3Mjc7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRMT0FERVJTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuc2lkZWJhciB7XG4gIHdpZHRoOiAyNjBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQwNDA0MDtcbiAgY29sb3I6IHdoaXRlOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTUVOVVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1FTlVcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ubWVudS0tcHJpbWFyeS1jb250YWluZXIge1xuICBwYWRkaW5nOiAyOS44OHB4IDA7XG4gIHBhZGRpbmc6IDEuNjZyZW0gMDsgfVxuXG4ubWVudS0tcHJpbWFyeSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nOiAyOS44OHB4IDA7XG4gIHBhZGRpbmc6IDEuNjZyZW0gMDsgfVxuXG4ubWVudV9faXRlbSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IHJpZ2h0OyB9XG4gIC5tZW51X19pdGVtID4gYSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZvbnQtZmFtaWx5OiBcIlJva2tpdHRcIiwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiAyLjU7XG4gICAgb3V0bGluZTogMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDM2cHg7XG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xuICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgcGFkZGluZy1yaWdodDogMnJlbTsgfVxuICAgIC5tZW51X19pdGVtID4gYTpiZWZvcmUge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiA2MyU7XG4gICAgICBsZWZ0OiAzNnB4O1xuICAgICAgbGVmdDogMnJlbTtcbiAgICAgIHJpZ2h0OiAzNnB4O1xuICAgICAgcmlnaHQ6IDJyZW07XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIG9wYWNpdHk6IDA7IH1cbiAgICAubWVudV9faXRlbSA+IGE6aG92ZXIsIC5tZW51X19pdGVtID4gYTpmb2N1cyB7XG4gICAgICBjb2xvcjogI2QwZWRlNzsgfVxuICAgIC5tZW51X19pdGVtID4gYTphY3RpdmUge1xuICAgICAgY29sb3I6ICNhY2RlZDU7IH1cbiAgLm1lbnVfX3N1YiAubWVudV9faXRlbSB7XG4gICAgZGlzcGxheTogYmxvY2s7IH1cblxuLm1lbnVfX2l0ZW0tLWN1cnJlbnQgPiBhLFxuLm1lbnVfX2l0ZW0tLWN1cnJlbnQtcGFyZW50ID4gYSwgLm1lbnVfX2l0ZW0tLWN1cnJlbnQgPiBhOmhvdmVyLFxuLm1lbnVfX2l0ZW0tLWN1cnJlbnQtcGFyZW50ID4gYTpob3ZlciwgLm1lbnVfX2l0ZW0tLWN1cnJlbnQgPiBhOmZvY3VzLFxuLm1lbnVfX2l0ZW0tLWN1cnJlbnQtcGFyZW50ID4gYTpmb2N1cywgLm1lbnVfX2l0ZW0tLWN1cnJlbnQgPiBhOmFjdGl2ZSxcbi5tZW51X19pdGVtLS1jdXJyZW50LXBhcmVudCA+IGE6YWN0aXZlIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xuICBjb2xvcjogI2FjZGVkNTsgfVxuICAubWVudV9faXRlbS0tY3VycmVudCA+IGE6YmVmb3JlLFxuICAubWVudV9faXRlbS0tY3VycmVudC1wYXJlbnQgPiBhOmJlZm9yZSwgLm1lbnVfX2l0ZW0tLWN1cnJlbnQgPiBhOmhvdmVyOmJlZm9yZSxcbiAgLm1lbnVfX2l0ZW0tLWN1cnJlbnQtcGFyZW50ID4gYTpob3ZlcjpiZWZvcmUsIC5tZW51X19pdGVtLS1jdXJyZW50ID4gYTpmb2N1czpiZWZvcmUsXG4gIC5tZW51X19pdGVtLS1jdXJyZW50LXBhcmVudCA+IGE6Zm9jdXM6YmVmb3JlLCAubWVudV9faXRlbS0tY3VycmVudCA+IGE6YWN0aXZlOmJlZm9yZSxcbiAgLm1lbnVfX2l0ZW0tLWN1cnJlbnQtcGFyZW50ID4gYTphY3RpdmU6YmVmb3JlIHtcbiAgICBvcGFjaXR5OiAxOyB9XG5cbi5tZW51X19pdGVtLS1jdXJyZW50ID4gYVtwYWdlU2Nyb2xsXSxcbi5tZW51X19pdGVtLS1jdXJyZW50LXBhcmVudCA+IGFbcGFnZVNjcm9sbF0ge1xuICBjdXJzb3I6IGN1cnNvcjtcbiAgY29sb3I6IHdoaXRlOyB9XG4gIC5tZW51X19pdGVtLS1jdXJyZW50ID4gYVtwYWdlU2Nyb2xsXTpiZWZvcmUsXG4gIC5tZW51X19pdGVtLS1jdXJyZW50LXBhcmVudCA+IGFbcGFnZVNjcm9sbF06YmVmb3JlIHtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIC5tZW51X19pdGVtLS1jdXJyZW50ID4gYVtwYWdlU2Nyb2xsXTpob3ZlcixcbiAgLm1lbnVfX2l0ZW0tLWN1cnJlbnQtcGFyZW50ID4gYVtwYWdlU2Nyb2xsXTpob3ZlciwgLm1lbnVfX2l0ZW0tLWN1cnJlbnQgPiBhW3BhZ2VTY3JvbGxdOmZvY3VzLFxuICAubWVudV9faXRlbS0tY3VycmVudC1wYXJlbnQgPiBhW3BhZ2VTY3JvbGxdOmZvY3VzIHtcbiAgICBjb2xvcjogI2QwZWRlNzsgfVxuICAubWVudV9faXRlbS0tY3VycmVudCA+IGFbcGFnZVNjcm9sbF06YWN0aXZlLFxuICAubWVudV9faXRlbS0tY3VycmVudC1wYXJlbnQgPiBhW3BhZ2VTY3JvbGxdOmFjdGl2ZSB7XG4gICAgY29sb3I6ICNhY2RlZDU7IH1cblxuLm1lbnVfX3N1YiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIG1heC1oZWlnaHQ6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxuICBhOmhvdmVyICsgLm1lbnVfX3N1YiwgLm1lbnVfX3N1Yjpob3ZlciB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzQwNDA0MDtcbiAgICBtYXgtaGVpZ2h0OiBub25lO1xuICAgIG92ZXJmbG93OiB2aXNpYmxlOyB9XG4gIC5tZW51X19zdWIgYSB7XG4gICAgbWluLXdpZHRoOiAyMjVweDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG4gIGE6aG92ZXIgKyAubWVudV9fc3ViID4gLm1lbnVfX2l0ZW0gYSwgLm1lbnVfX3N1Yjpob3ZlciA+IC5tZW51X19pdGVtID4gYSB7XG4gICAgbWF4LWhlaWdodDogOGVtO1xuICAgIHBhZGRpbmctdG9wOiAxZW07XG4gICAgcGFkZGluZy1ib3R0b206IDFlbTtcbiAgICBvcGFjaXR5OiAxOyB9XG5cbi5tZW51X19zdWIgLm1lbnVfX3N1YiB7XG4gIHRvcDogMDtcbiAgbGVmdDogMTAwJTsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFBSSU1BUlkgTUVOVVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi5tZW51LS1wcmltYXJ5LWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuXG4ubWVudS0tcHJpbWFyeVtBcHBNZW51XSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDI2MHB4O1xuICBsZWZ0OiAwO1xuICB0cmFuc2l0aW9uOiBhbGwgMG1zIGxpbmVhcjtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApOyB9XG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpIHtcbiAgICAubWVudS0tcHJpbWFyeVtBcHBNZW51XSB7XG4gICAgICByaWdodDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfSB9XG5cbi5tZW51LS1wcmltYXJ5IC5tZW51X19pdGVtIHtcbiAgbGV0dGVyLXNwYWNpbmc6IC4xNWVtOyB9XG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpIHtcbiAgICAubWVudS0tcHJpbWFyeSAubWVudV9faXRlbSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1FTlUgVE9HR0xFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLm1lbnUtdG9nZ2xlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuICAubWVudS10b2dnbGU6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7IH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MTlweCkge1xuICAgIC5tZW51LXRvZ2dsZSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH0gfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFBBR0VTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRQQUdFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnBlcnNvbmEge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWNkZWQ1OyB9XG5cbi5wZXJzb25hIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbjogYXV0bztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7IH1cblxuLnBlcnNvbmFfX21haW4ge1xuICBoZWlnaHQ6IDQwcHg7XG4gIG1hcmdpbi1ib3R0b206IDBweDtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW5TYW5zXCIsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogbm9ybWFsOyB9XG4gIC5wZXJzb25hX19tYWluIHNwYW4ge1xuICAgIGxpbmUtaGVpZ2h0OiAuODM7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZvbnQtZmFtaWx5OiBcIlJva2tpdHRcIiwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiAxLjJlbTsgfVxuICAgIC5wZXJzb25hX19tYWluIHNwYW46YWZ0ZXIge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQ7XG4gICAgICB0b3A6IDc2JTtcbiAgICAgIGxlZnQ6IC4wM2VtO1xuICAgICAgcmlnaHQ6IC4wM2VtOyB9XG4gIC5wZXJzb25hX19tYWluLnR5cGluZzphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQ7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTsgfVxuXG4ucGVyc29uYV9faW1nIHtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMjIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDI5Ljg4cHg7XG4gIG1hcmdpbi1ib3R0b206IDEuNjZyZW07IH1cblxuLnBvcnRmb2xpby1pdGVtOmJlZm9yZSB7XG4gIHBhZGRpbmctYm90dG9tOiAxMDAlOyB9XG5cbi5wb3J0Zm9saW8taXRlbV9faW1hZ2Uge1xuICBtYXJnaW4tYm90dG9tOiAwcHg7IH1cblxuLnBvcnRmb2xpby1pdGVtX19vdmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIGJvdHRvbTogYXV0bztcbiAgcmlnaHQ6IGF1dG87XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICB6LWluZGV4OiA1O1xuICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyNTBtcztcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcbiAgYW5pbWF0aW9uLWRpcmVjdGlvbjogbm9ybWFsO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkczsgfVxuICAucG9ydGZvbGlvLWl0ZW0taG9sZCAucG9ydGZvbGlvLWl0ZW1fX292ZXIge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAlLCAwJSk7IH1cbiAgLnBvcnRmb2xpby1pdGVtLW91dC1sZWZ0IC5wb3J0Zm9saW8taXRlbV9fb3ZlciB7XG4gICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogcmV2ZXJzZTtcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7IH1cbiAgLnBvcnRmb2xpby1pdGVtLW91dC10b3AgLnBvcnRmb2xpby1pdGVtX19vdmVyIHtcbiAgICBhbmltYXRpb24tZGlyZWN0aW9uOiByZXZlcnNlO1xuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkczsgfVxuICAucG9ydGZvbGlvLWl0ZW0tb3V0LXJpZ2h0IC5wb3J0Zm9saW8taXRlbV9fb3ZlciB7XG4gICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogcmV2ZXJzZTtcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7IH1cbiAgLnBvcnRmb2xpby1pdGVtLW91dC1ib3R0b20gLnBvcnRmb2xpby1pdGVtX19vdmVyIHtcbiAgICBhbmltYXRpb24tZGlyZWN0aW9uOiByZXZlcnNlO1xuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkczsgfVxuXG4ucG9ydGZvbGlvLWl0ZW1fX2NlbnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgYm90dG9tOiBhdXRvO1xuICByaWdodDogYXV0bztcbiAgd2lkdGg6IDEwMCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBwYWRkaW5nOiAzNnB4O1xuICBwYWRkaW5nOiAycmVtOyB9XG5cbi5wb3J0Zm9saW8taXRlbV9fdGl0bGUge1xuICBmb250LWZhbWlseTogXCJSb2traXR0XCIsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2U7XG4gIGNvbG9yOiAjNDA0MDQwO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBsaW5lLWhlaWdodDogLjg7IH1cblxuLnBvcnRmb2xpby1pdGVtX19zaG9ydCB7XG4gIGNvbG9yOiAjNDA0MDQwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDBweDsgfVxuXG4uZ29vZ2xlLW1hcC13cmFwcGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG5cbi5zZWJtLWdvb2dsZS1tYXAtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7IH1cblxuLmdvb2dsZS1tYXAtb3ZlcmxheSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIHRvcDogMDtcbiAgei1pbmRleDogNTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDUsIDI0NSwgMjQ1LCAwLjgpOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkVkVORE9SXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRWRU5ET1IgU1RZTEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRBVVRPQ09NUExFVEVcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJERBVEVQSUNLRVJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEZJTEUgVVBMT0FEXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRUT09MVElQU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkV1lTSVdZR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTU9ESUZJRVJTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBtb2RpZmllcmVzIG11c3QgY29tZSBsYXN0IHRoYXQgY2xhc3NlcyBjYW4gYmUgYXBwbGllZCBkaXJlY3RseVxuICogdG8gbWFya3VwIHRvIG92ZXJyaWRlIHN0eWxlc1xuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1PRElGSUVSU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkQkFDS0dST1VORFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkQkFDS0dST1VORFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEJBQ0tHUk9VTkQgQ09MT1JTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLmJnYy0tcHJpbWFyeS1kayB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM4OGNmYzM7IH1cblxuLmJnYy0tcHJpbWFyeSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNhY2RlZDU7IH1cblxuLmJnYy0tcHJpbWFyeS1sdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNkMGVkZTc7IH1cblxuLmJnYy0tc2Vjb25kYXJ5LWRrIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U4Y2EyMTsgfVxuXG4uYmdjLS1zZWNvbmRhcnkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRkNTRmOyB9XG5cbi5iZ2MtLXNlY29uZGFyeS1sdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmUxMmY7IH1cblxuLmJnYy0tdGVydGlhcnktZGsge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjI1MTJmOyB9XG5cbi5iZ2MtLXRlcnRpYXJ5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1Nzk1ZjsgfVxuXG4uYmdjLS10ZXJ0aWFyeS1sdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmNDlmOGY7IH1cblxuLmJnYy0tYmFzZS1kayB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyNzI3Mjc7IH1cblxuLmJnYy0tYmFzZSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0MDQwNDA7IH1cblxuLmJnYy0tYmFzZS1sdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNhMWExYTE7IH1cblxuLmJnYy0tYmFzZS1sdHIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2OyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkQkFDS0dST1VORCBMSU5LIFNUQVRFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkVFlQT0dSQVBIWVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkVFlQT0dSQVBIWVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkQUxJR05NRU5UXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLnRleHQtLXJpZ2h0IHtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRGT05UIENPTE9SIE1PRElGSUVSU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmEge1xuICBjb2xvcjogI2FjZGVkNTsgfVxuXG5hIHtcbiAgY29sb3I6ICNhY2RlZDU7IH1cbiAgYTpob3ZlciwgYTpmb2N1cyB7XG4gICAgY29sb3I6ICNkMGVkZTc7IH1cbiAgYTphY3RpdmUge1xuICAgIGNvbG9yOiAjODhjZmMzOyB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkRk9OVCBGQU1JTFlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFZJU0lCSUxJVFlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEhpZGUgZnJvbSBib3RoIHNjcmVlbnJlYWRlcnMgYW5kIGJyb3dzZXJzOiBoNWJwLmNvbS91XG4gKi9cbi5oaWRkZW4ge1xuICBkaXNwbGF5OiBub25lO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47IH1cblxuLyoqXG4gKiBIaWRlIGNvbnRlbnQgb2ZmLXNjcmVlbiB3aXRob3V0IHJlc29ydGluZyB0byBgZGlzcGxheTpub25lO2AsIGFsc28gcHJvdmlkZVxuICogYnJlYWtwb2ludCBzcGVjaWZpYyBoaWRkZW4gZWxlbWVudHMuXG4gKi9cbi5hY2Nlc3NpYmlsaXR5LFxuLnZpc3VhbGx5aGlkZGVuIHtcbiAgYm9yZGVyOiAwO1xuICBjbGlwOiByZWN0KDAgMCAwIDApO1xuICBoZWlnaHQ6IDFweDtcbiAgbWFyZ2luOiAtMXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxcHg7IH1cbiAgLmZvY3VzYWJsZS5hY2Nlc3NpYmlsaXR5OmFjdGl2ZSxcbiAgLmZvY3VzYWJsZS52aXN1YWxseWhpZGRlbjphY3RpdmUsIC5mb2N1c2FibGUuYWNjZXNzaWJpbGl0eTpmb2N1cyxcbiAgLmZvY3VzYWJsZS52aXN1YWxseWhpZGRlbjpmb2N1cyB7XG4gICAgcG9zaXRpb246IHN0YXRpYztcbiAgICBjbGlwOiBhdXRvO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogYXV0bztcbiAgICBtYXJnaW46IDA7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODBweCkge1xuICAuYWNjZXNzaWJpbGl0eS0tcGFsbSxcbiAgLnZpc3VhbGx5aGlkZGVuLS1wYWxtIHtcbiAgICBib3JkZXI6IDA7XG4gICAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IC0xcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMXB4OyB9IH1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0ODFweCkgYW5kIChtYXgtd2lkdGg6IDkxOXB4KSB7XG4gIC5hY2Nlc3NpYmlsaXR5LS1sYXAsXG4gIC52aXN1YWxseWhpZGRlbi0tbGFwIHtcbiAgICBib3JkZXI6IDA7XG4gICAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IC0xcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMXB4OyB9IH1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0ODFweCkge1xuICAuYWNjZXNzaWJpbGl0eS0tbGFwLWFuZC11cCxcbiAgLnZpc3VhbGx5aGlkZGVuLS1sYXAtYW5kLXVwIHtcbiAgICBib3JkZXI6IDA7XG4gICAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IC0xcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMXB4OyB9IH1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MTlweCkge1xuICAuYWNjZXNzaWJpbGl0eS0tcG9ydGFibGUsXG4gIC52aXN1YWxseWhpZGRlbi0tcG9ydGFibGUge1xuICAgIGJvcmRlcjogMDtcbiAgICBjbGlwOiByZWN0KDAgMCAwIDApO1xuICAgIGhlaWdodDogMXB4O1xuICAgIG1hcmdpbjogLTFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAxcHg7IH0gfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDkyMHB4KSB7XG4gIC5hY2Nlc3NpYmlsaXR5LS1kZXNrLFxuICAudmlzdWFsbHloaWRkZW4tLWRlc2sge1xuICAgIGJvcmRlcjogMDtcbiAgICBjbGlwOiByZWN0KDAgMCAwIDApO1xuICAgIGhlaWdodDogMXB4O1xuICAgIG1hcmdpbjogLTFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAxcHg7IH0gfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0NDBweCkge1xuICAuYWNjZXNzaWJpbGl0eS0tZGVzay13aWRlLFxuICAudmlzdWFsbHloaWRkZW4tLWRlc2std2lkZSB7XG4gICAgYm9yZGVyOiAwO1xuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgbWFyZ2luOiAtMXB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZzogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDFweDsgfSB9XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkV1lTSVdZRyBDTEFTU0VTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRUSU5ZTUNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRDS0VESVRPUlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkTEFZT1VUXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBsYXlvdXQsIGFzIHdpdGggbW9kaWZpZXIsIG11c3QgY29tZSBsYXN0IHRoYXQgY2xhc3NlcyBjYW4gYmUgYXBwbGllZCBkaXJlY3RseVxuICogdG8gbWFya3VwIGFzIG1vZGlmaWVyc1xuICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFMTCBMQVlPVVRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJERJU1BMQVlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEZPT1RFUlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKiAgICAkR1JJRFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRXh0ZW5kIGdyaWQgbW9kaWZpZXJzIGhlcmVcbiAqL1xubWFpbiB7XG4gIGZsZXg6IDE7IH1cbiAgLm9sZGllIG1haW4ge1xuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7IH1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qICAgICRIRUFERVJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ubG9nbyB7XG4gIHBhZGRpbmc6IDAgMzZweDtcbiAgcGFkZGluZzogMCAycmVtO1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcdFx0JElTTEFORFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4uaXNsYW5kIHtcbiAgcGFkZGluZy10b3A6IDUuNXJlbTtcbiAgcGFkZGluZy1ib3R0b206IDUuNXJlbTsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJE1BUkdJTlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi5wb3J0Zm9saW8taXRlbV9fdGl0bGUsIC5wb3J0Zm9saW8taXRlbV9fc2hvcnQge1xuICBtYXJnaW4tYm90dG9tOiAzNnB4O1xuICBtYXJnaW4tYm90dG9tOiAycmVtOyB9XG5cbi5mbHVzaC0tYm90dG9tIHtcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFBBRERJTkdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4uZ29vZ2xlLW1hcC1vdmVybGF5LCAuc29mdC0tbGFyZ2Uge1xuICBwYWRkaW5nOiAzNnB4O1xuICBwYWRkaW5nOiAycmVtOyB9XG5cbi5zb2Z0LS1sYXJnZS0tdG9wIHtcbiAgcGFkZGluZy10b3A6IDM2cHg7XG4gIHBhZGRpbmctdG9wOiAycmVtOyB9XG5cbi5zb2Z0LS10b3Age1xuICBwYWRkaW5nLXRvcDogMjdweDtcbiAgcGFkZGluZy10b3A6IDEuNXJlbTsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJFdSQVBTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLndyYXAtLWxhcmdlLCAud3JhcCwgLndyYXAtLXNtYWxsIHtcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW07XG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbTsgfVxuXG4vKipcbiAqIEdlbmVyYXRlcyBjbGFzc2VzIGFuZCBwbGFjZWhvbGRlcnMgZm9yIHdyYXBzIGFuZCB0aGVpciB3aWR0aHNcbiAqIGUuZy5cblxuICAld3JhcC13aWR0aC0tbGFyZ2UgeyBtYXgtd2lkdGg6IDEyODBweDt9XG4gIC53cmFwLS1sYXJnZSB7IC4uLiB9XG4gICV3cmFwLXdpZHRoICAgICAgICB7IG1heC13aWR0aDogOTYwcHg7fVxuICAud3JhcCB7IC4uLiB9XG4gICV3cmFwLXdpZHRoLS1zbWFsbCB7IG1heC13aWR0aDogNjQwcHg7fVxuICAud3JhcC0tc21hbGwgeyAuLi4gfVxuICovXG4ud3JhcC0tbGFyZ2Uge1xuICBtYXgtd2lkdGg6IDEyMDBweDsgfVxuXG4ud3JhcCB7XG4gIG1heC13aWR0aDogMTI4MHB4OyB9XG5cbi53cmFwLS1zbWFsbCwgLmNvbnRlbnQtLWxlZnQge1xuICBtYXgtd2lkdGg6IDk2MHB4OyB9XG5cbi5jb250ZW50LS1sZWZ0IHtcbiAgbWFyZ2luLWxlZnQ6IDBweDsgfVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFOSU1BVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFOSU1BVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSogICAgJEFOSU1BVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5Aa2V5ZnJhbWVzIGZsYXNoIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgNDAlIHtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIDUwJSB7XG4gICAgb3BhY2l0eTogMTsgfVxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwOyB9IH1cblxuLnBlcnNvbmFfX21haW4udHlwaW5nOmFmdGVyLCAuYW5pbS1mbGFzaCB7XG4gIGFuaW1hdGlvbi1uYW1lOiBmbGFzaDsgfVxuXG5Aa2V5ZnJhbWVzIGluLWxlZnQge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuLnBvcnRmb2xpby1pdGVtLWluLWxlZnQgLnBvcnRmb2xpby1pdGVtX19vdmVyLCAucG9ydGZvbGlvLWl0ZW0tb3V0LXJpZ2h0IC5wb3J0Zm9saW8taXRlbV9fb3ZlciwgLmFuaW0taW4tbGVmdCB7XG4gIGFuaW1hdGlvbi1uYW1lOiBpbi1sZWZ0OyB9XG5cbkBrZXlmcmFtZXMgaW4tcmlnaHQge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICAgIG9wYWNpdHk6IDE7IH0gfVxuXG4ucG9ydGZvbGlvLWl0ZW0taW4tcmlnaHQgLnBvcnRmb2xpby1pdGVtX19vdmVyLCAucG9ydGZvbGlvLWl0ZW0tb3V0LWxlZnQgLnBvcnRmb2xpby1pdGVtX19vdmVyLCAuYW5pbS1pbi1yaWdodCB7XG4gIGFuaW1hdGlvbi1uYW1lOiBpbi1yaWdodDsgfVxuXG5Aa2V5ZnJhbWVzIGluLWJvdHRvbSB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTAwJSk7XG4gICAgb3BhY2l0eTogMDsgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gICAgb3BhY2l0eTogMTsgfSB9XG5cbi5wb3J0Zm9saW8taXRlbS1pbi1ib3R0b20gLnBvcnRmb2xpby1pdGVtX19vdmVyLCAucG9ydGZvbGlvLWl0ZW0tb3V0LXRvcCAucG9ydGZvbGlvLWl0ZW1fX292ZXIsIC5hbmltLWluLWJvdHRvbSB7XG4gIGFuaW1hdGlvbi1uYW1lOiBpbi1ib3R0b207IH1cblxuQGtleWZyYW1lcyBpbi10b3Age1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICBvcGFjaXR5OiAwOyB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuLnBvcnRmb2xpby1pdGVtLWluLXRvcCAucG9ydGZvbGlvLWl0ZW1fX292ZXIsIC5wb3J0Zm9saW8taXRlbS1vdXQtYm90dG9tIC5wb3J0Zm9saW8taXRlbV9fb3ZlciwgLmFuaW0taW4tdG9wIHtcbiAgYW5pbWF0aW9uLW5hbWU6IGluLXRvcDsgfVxuXG4vKipcbiAqIGltcG9ydCBwcmludCBzdHlsZXNcbiAqL1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vKlxuVGhlbWUgTmFtZTogVGhlbWVfTmFtZVxuVGhlbWUgVVJJOiB0aGVtZV91cmxcbkRlc2NyaXB0aW9uOiB0aGVtZV9kZXNjcmlwdGlvblxuQXV0aG9yOiBhdXRob3JfbmFtZVxuQXV0aG9yIFVSSTogYXV0aG9yX3VybFxuVmVyc2lvbjogdGhlbWVfdmVyc2lvblxuLlxuQW55IGdlbmVyYWwgaW5mb3JtYXRpb24sIGxpY2Vuc2Ugc3RhdGVtZW50cywgcGx1Z2luIHJlcXVpcmVtZW50cywgb3IgYW55IG90aGVyIGluZm9ybWF0aW9uIHlvdVxubWlnaHQgd2FudCB0byBzaGFyZS5cbi5cbiovXG5cbi8qKlxuICogQ29uZmlnXG4gKlxuICogQ29uZmlnIGlzIGRlZmluZWQgYmVmb3JlIGRlZmF1bHRzIHNvIHRoYXQgdmFyaWFibGVzIG92ZXJyaWRlIHRoZWlyICFkZWZhdWx0XG4gKiBjb3VudGVycGFydHNcbiAqL1xuQGltcG9ydCBcImN1c3RvbS9jb25maWdcIjtcbkBpbXBvcnQgXCJjb3JlL2NvbmZpZy1kZWZhdWx0c1wiO1xuXG5cblxuXG5cbi8qKlxuICogSW1wb3J0IHRoZSByZXN0IG9mIHRoZSBmcmFtZXdvcmssIGZvbGxvd2VkIGJ5IGN1c3RvbSBzdHlsZXNcbiAqL1xuQGltcG9ydCBcImNvcmUvaW1wb3J0c1wiO1xuQGltcG9ydCBcImN1c3RvbS9pbXBvcnRzXCI7XG5cblxuXG5cblxuLyoqXG4gKiBpbXBvcnQgcHJpbnQgc3R5bGVzXG4gKi9cbkBpbXBvcnQgXCJjb3JlL3V0aWxpdGllcy9wcmludFwiO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICBWQVJTLlNDU1NcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEFueSB2YXJpYWJsZXMgeW91IGZpbmQgc2V0IGluIHRoaXMgZnJhbWV3b3JrJ3MgYF9kZWZhdWx0cy5zY3NzYCB0aGF0IHlvdSBkbyBub3Qgd2lzaCB0b1xuICoga2VlcCwgc2ltcGx5IHJlZGVmaW5lIGhlcmUuIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGlzIGZyYW1ld29yaywgZm9yIGV4YW1wbGUsIHNldHNcbiAqIHlvdXIgYCRmcy1iYXNlYCBhdCAxNnB4IGFuZCB5b3Ugd2lzaCBpdCB0byBiZSAxNHB4LCBzaW1wbHkgcmVkZWNsYXJlXG4gKiB0aGF0IHZhcmlhYmxlIGluIHRoaXMgZmlsZS4gdGhpcyBmcmFtZXdvcmsgaWdub3JlcyBpdHMgb3duIHZhcmlhYmxlcyBpbiBmYXZvdXIgb2ZcbiAqIHVzaW5nIHlvdXIgb3duLCBzbyB5b3UgY2FuIGNvbXBsZXRlbHkgbW9kaWZ5IGhvdyB0aGlzIGZyYW1ld29yayB3b3JrcyB3aXRob3V0IGV2ZXJcbiAqIGhhdmluZyB0byBhbHRlciB0aGUgZnJhbWV3b3JrIGl0c2VsZi5cbiAqL1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJE9CSkVDVFMtQU5ELUFCU1RSQUNUSU9OU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogQWxsIG9mIHRoaXMgZnJhbWV3b3JrJ3Mgb2JqZWN0cyBhbmQgYWJzdHJhY3Rpb25zIGFyZSBpbml0aWFsbHkgdHVybmVkIG9mZiBieVxuICogZGVmYXVsdC4gVGhpcyBtZWFucyB0aGF0IHlvdSBzdGFydCBhbnkgcHJvamVjdCB3aXRoIGFzIGxpdHRsZSBhcyBwb3NzaWJsZSxcbiAqIGFuZCBpbnRyb2R1Y2luZyBvYmplY3RzIGFuZCBhYnN0cmFjdGlvbnMgaXMgYXMgc2ltcGxlIGFzIHN3aXRjaGluZyB0aGVcbiAqIGZvbGxvd2luZyB2YXJpYWJsZXMgdG8gYHRydWVgLlxuICovXG4kdXNlLWFycm93czogICAgICAgICAgICAgZmFsc2U7XG4kdXNlLWJlYXV0b25zOiAgICAgICAgICAgZmFsc2U7XG4kdXNlLWJsb2NrLWxpc3Q6ICAgICAgICAgZmFsc2U7XG4kdXNlLWJyZWFkY3J1bWI6ICAgICAgICAgZmFsc2U7XG4kdXNlLWNvbHVtbnM6ICAgICAgICAgICAgZmFsc2U7XG4kdXNlLWZsZXgtdmlkZW86ICAgICAgICAgZmFsc2U7XG4kdXNlLWZseW91dDogICAgICAgICAgICAgZmFsc2U7XG4kdXNlLWdyZXlib3g6ICAgICAgICAgICAgZmFsc2U7XG4kdXNlLWdyaWRzOiAgICAgICAgICAgICAgdHJ1ZTtcbiRncmlkLXVzZS1mcmFjdGlvbnM6ICAgICB0cnVlO1xuJHJlc3BvbnNpdmUtZXh0cmE6ICAgICAgIHRydWU7XG4kdXNlLWljb24tdGV4dDogICAgICAgICAgZmFsc2U7XG4kdXNlLWxpbmstY29tcGxleDogICAgICAgZmFsc2U7XG4kdXNlLWxvemVuZ2VzOiAgICAgICAgICAgZmFsc2U7XG4kdXNlLW1hcmdpbmFsaWE6ICAgICAgICAgZmFsc2U7XG4kdXNlLW1hdHJpeDogICAgICAgICAgICAgZmFsc2U7XG4kdXNlLW1lZGlhOiAgICAgICAgICAgICAgZmFsc2U7XG4kdXNlLW5hdjogICAgICAgICAgICAgICAgZmFsc2U7XG4kdXNlLW9wdGlvbnM6ICAgICAgICAgICAgZmFsc2U7XG4kdXNlLXBhZ2luYXRpb246ICAgICAgICAgZmFsc2U7XG4kdXNlLXJ1bGVzOiAgICAgICAgICAgICAgZmFsc2U7XG4kdXNlLXNwbGl0OiAgICAgICAgICAgICAgZmFsc2U7XG4kdXNlLXNwcml0ZTogICAgICAgICAgICAgZmFsc2U7XG4kdXNlLXN0YXRzOiAgICAgICAgICAgICAgZmFsc2U7XG4kdXNlLXRoaXMtb3ItdGhpczogICAgICAgZmFsc2U7XG4kdXNlLWljb24tYXMtaW5saW5lLXN2ZzogZmFsc2U7XG5cbiR1c2UtYWxlcnRzOiAgICAgICAgICAgICBmYWxzZTtcbiR1c2UtYnV0dG9uczogICAgICAgICAgICB0cnVlOyAvLyB1c2UgZWl0aGVyIHRoZXNlLCBvciBiZWF1dG9ucywgYnV0IG5vdCBib3RoXG4kdXNlLWNrZWRpdG9yOiAgICAgICAgICAgZmFsc2U7XG4kdXNlLWZvcm1zLWFmZml4ZXM6ICAgICAgZmFsc2U7XG4kdXNlLWljb24tYXMtZm9udDogICAgICAgZmFsc2U7XG4kdXNlLWljb24tYXMtaW5saW5lLXN2ZzogZmFsc2U7XG4kdXNlLXByaW50OiAgICAgICAgICAgICAgZmFsc2U7XG4kdXNlLXByb2dyZXNzLWJhcnM6ICAgICAgZmFsc2U7XG4kdXNlLXJhdGlvLW9iamVjdDogICAgICAgdHJ1ZTtcbiR1c2UtdmVydGljYWwtY2VudGVyOiAgICBmYWxzZTtcbiR1c2UtdGlueW1jZTogICAgICAgICAgICBmYWxzZTtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRPVkVSUklERVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFBsYWNlIGFueSB2YXJpYWJsZXMgdGhhdCBzaG91bGQgb3ZlcnJpZGUgY29yZSBfZGVmYXVsdHMuc2NzcyBoZXJlLlxuICovXG4kZnMtZ2lnYTogIDk2cHghZGVmYXVsdDsgLy8gLmZzLS1naWdhXG4kZnMtbWVnYTogIDcycHghZGVmYXVsdDsgLy8gLmZzLS1tZWdhXG4kZnMta2lsbzogIDQ4cHg7IC8vIC5mcy0ta2lsb1xuXG4kZnMtaDE6ICAgIDQ4cHg7IC8vIC5mcy0tYWxwaGFcbiRmcy1oMjogICAgNDBweDsgLy8gLmZzLS1iZXRhXG4kZnMtaDM6ICAgIDM2cHg7IC8vIC5mcy0tZ2FtbWFcbiRmcy1oNDogICAgMjRweDsgLy8gLmZzLS1kZWx0YVxuJGZzLWg1OiAgICAxOHB4OyAvLyAuZnMtLWVwc2lsb25cbiRmcy1oNjogICAgMTZweDsgLy8gLmZzLS16ZXRhXG5cbiRmcy1taWxsaTogMTRweDsgLy8gLmZzLS1taWxsaVxuJGZzLW1pY3JvOiAxMHB4OyAvLyAuZnMtLW1pY3JvXG4kZnMtbmFubzogICA4cHg7IC8vIC5mcy0tbmFub1xuXG4kbGFwLXN0YXJ0OiAgICAgNDgxcHg7XG4kZGVzay1zdGFydDogICAgOTIwcHg7XG4kZGVzay13aWRlLXN0YXJ0OiAgIDE0NDBweDtcblxuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJENVU1RPTVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUGxhY2UgYW55IG9mIHlvdXIgb3duIHZhcmlhYmxlcyB0aGF0IHNpdCBvbiB0b3Agb2YgY29yZSBfZGVmYXVsdHMuc2NzcyBoZXJlLlxuICovXG4kZnMtYmFzZTogMThweDtcbiRiYXNlLWxpbmUtaGVpZ2h0OiAgMjJweDtcbiRiYXNlLXNwYWNpbmctdW5pdDogMS41O1xuXG4kZ3JpZC1ndXR0ZXI6IDI7XG5cbiRiYXNlLXVpLWNvbG9yOiAjNDA0MDQwO1xuJGJyYW5kLWNvbG9yOiAjYWNkZWQ1O1xuJHNlbGVjdGlvbi1jb2xvcjogJGJyYW5kLWNvbG9yO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEZPTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBJY29uIEZvbnRcbiAqXG4gKiBEZXBlbmRhbnQgb24gJHVzZS1pY29ucyBiZWluZyB0cnVlLiBUaGVzZSB2YXJpYWJsZXMgYXJlIHVzZWQgaW4gdGhlIGZvbnQtZmFjZSBtaXhpbi5cbiAqXG4gKiBUaGlzIGZvbnQgaXMgZW5hYmxlZCB2aWEgY3VzdG9tL2Jhc2UvX2ZvbnRzLnNjc3NcbiAqL1xuJGZvbnQtaWNvbiAgICAgICAgICA6IFwiYmFzZS1pY29uLWZvbnRcIjtcbiRmb250LWljb24tcGF0aCAgICAgOiBcIi4uL2ZudC9iYXNlLWljb24tZm9udFwiO1xuJGZvbnQtaWNvbi1maWxlbmFtZSA6IFwiYmFzZS1pY29uLWZvbnRcIjtcbiRmb250LWljb24tc3RhY2sgICAgOiAkZm9udC1pY29uO1xuXG5cbi8qKlxuICogQmFzZSBGb250IEZhY2VcbiAqXG4gKiBUaGlzIGZvbnQgaXMgZW5hYmxlZCB2aWEgY3VzdG9tL2Jhc2UvX2ZvbnRzLnNjc3NcbiAqL1xuJGZvbnQtYmFzZSAgICAgICAgICA6IFwiT3BlblNhbnNcIjtcbiRmb250LWJhc2UtcGF0aCAgICAgOiBcIi4uL2ZvbnQvb3Blbi1zYW5zXCI7XG4kZm9udC1iYXNlLWZpbGVuYW1lIDogXCJPcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnRcIjtcbiRmb250LWJhc2Utc3RhY2sgICAgOiAkZm9udC1iYXNlLCBBcmlhbCwgc2Fucy1zZXJpZjtcblxuLyoqXG4gKiBCYXNlIEZvbnQgVmFyaWF0aW9uc1xuICovXG4kZm9udC1iYXNlLWZpbGVuYW1lLWkgIDogXCJPcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnRcIjsgLy8gaXRhbGljXG4kZm9udC1iYXNlLWZpbGVuYW1lLWIgIDogXCJPcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnRcIjsgLy8gYm9sZFxuJGZvbnQtYmFzZS1maWxlbmFtZS1sICA6IFwiT3BlblNhbnMtTGlnaHQtd2ViZm9udFwiOyAvLyBib2xkXG4kZm9udC1iYXNlLWZpbGVuYW1lLWJpIDogXCJPcGVuU2Fucy1SZWd1bGFyLXdlYmZvbnRcIjsgLy8gYm9sZC1pdGFsaWNcblxuXG5cblxuXG4vKipcbiAqIEhlYWRlciBGb250IEZhY2VcbiAqXG4gKiBUaGlzIGZvbnQgaXMgZW5hYmxlZCB2aWEgY3VzdG9tL2hlYWRlci9fZm9udHMuc2Nzc1xuICovXG4kZm9udC1oZWFkZXIgICAgICAgICAgOiBcIlJva2tpdHRcIjtcbiRmb250LWhlYWRlci1wYXRoICAgICA6IFwiLi4vZm9udC9Sb2traXR0XCI7XG4kZm9udC1oZWFkZXItZmlsZW5hbWUgOiBcInJva2tpdHQtcmVndWxhci13ZWJmb250XCI7XG4kZm9udC1oZWFkZXItc3RhY2sgICAgOiAkZm9udC1oZWFkZXIsIEFyaWFsLCBzYW5zLXNlcmlmO1xuXG4vKipcbiAqIGhlYWRlciBGb250IFZhcmlhdGlvbnNcbiAqL1xuJGZvbnQtaGVhZGVyLWZpbGVuYW1lLWIgIDogXCJyb2traXR0LWJvbGQtd2ViZm9udFwiOyAvLyBib2xkXG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQ09MT1JTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBUaGUgYmFzZSBjb2xvciBmb3IgdGV4dCwgYm9yZGVycywgZXRjLlxuICovXG4kY2xyLWJhc2UgICAgICA6ICRiYXNlLXVpLWNvbG9yO1xuJGNsci1iYXNlLWx0ICAgOiAjYTFhMWExO1xuJGNsci1iYXNlLWx0ciAgOiAjZTZlNmU2O1xuJGNsci1iYXNlLWx0c3QgOiAjZjVmNWY1O1xuJGNsci1iYXNlLWRrICAgOiBkYXJrZW4oJGNsci1iYXNlLCAxMCUpO1xuXG4vKipcbiAqIFRoZSBwcmltYXJ5IG5vbi1iYXNlIGNvbG9yXG4gKi9cbiRjbHItcHJpbWFyeSAgICAgIDogJGJyYW5kLWNvbG9yO1xuJGNsci1wcmltYXJ5LWx0ICAgOiBsaWdodGVuKCRjbHItcHJpbWFyeSwgMTAlKTtcbiRjbHItcHJpbWFyeS1sdHIgIDogbGlnaHRlbigkY2xyLXByaW1hcnksIDM1JSk7XG4kY2xyLXByaW1hcnktbHRzdCA6IGxpZ2h0ZW4oJGNsci1wcmltYXJ5LCA0MCUpO1xuJGNsci1wcmltYXJ5LWRrICAgOiBkYXJrZW4oJGNsci1wcmltYXJ5LCAxMCUpO1xuXG4vKipcbiAqIFRoZSBzZWNvbmRhcnkgbm9uLWJhc2UgY29sb3JcbiAqL1xuJGNsci1zZWNvbmRhcnkgICAgICA6ICNlZGQ1NGY7XG4kY2xyLXNlY29uZGFyeS1sdCAgIDogI2ZmZTEyZjtcbiRjbHItc2Vjb25kYXJ5LWx0ciAgOiBsaWdodGVuKCRjbHItc2Vjb25kYXJ5LCAzNSUpO1xuJGNsci1zZWNvbmRhcnktbHRzdCA6IGxpZ2h0ZW4oJGNsci1zZWNvbmRhcnksIDQwJSk7XG4kY2xyLXNlY29uZGFyeS1kayAgIDogZGFya2VuKCRjbHItc2Vjb25kYXJ5LCAxMCUpO1xuXG4vKipcbiAqIFRoZSB0ZXJ0aWFyeSBub24tYmFzZSBjb2xvclxuICovXG4kY2xyLXRlcnRpYXJ5ICAgICAgOiAjZjU3OTVmO1xuJGNsci10ZXJ0aWFyeS1sdCAgIDogI2Y0OWY4ZjtcbiRjbHItdGVydGlhcnktbHRyICA6IGxpZ2h0ZW4oJGNsci10ZXJ0aWFyeSwgMzUlKTtcbiRjbHItdGVydGlhcnktbHRzdCA6IGxpZ2h0ZW4oJGNsci10ZXJ0aWFyeSwgNDAlKTtcbiRjbHItdGVydGlhcnktZGsgICA6IGRhcmtlbigkY2xyLXRlcnRpYXJ5LCAxMCUpO1xuXG4vLyBuZXV0cmFsc1xuJGNsci1udHJsLW1pbiA6ICNmZmY7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGl0ZVxuJGNsci1udHJsLTEwICA6IGRhcmtlbigkY2xyLW50cmwtbWluLCAxMCUpO1xuJGNsci1udHJsLTIwICA6IGRhcmtlbigkY2xyLW50cmwtbWluLCAyMCUpO1xuJGNsci1udHJsLTUwICA6IGRhcmtlbigkY2xyLW50cmwtbWluLCA1MCUpO1xuJGNsci1udHJsLTgwICA6IGRhcmtlbigkY2xyLW50cmwtbWluLCA4MCUpO1xuJGNsci1udHJsLTkwICA6IGRhcmtlbigkY2xyLW50cmwtbWluLCA5MCUpO1xuJGNsci1udHJsLW1heCA6IGRhcmtlbigkY2xyLW50cmwtbWluLCAxMDAlKTsgICAvLyBibGFja1xuXG4vLyBzdWNjZXNzIGNvbG91cnNcbiRjbHItc3VjY2VzcyAgICAgIDogIzQ2ODg0NztcbiRjbHItc3VjY2Vzcy1sdCAgIDogbGlnaHRlbigkY2xyLXN1Y2Nlc3MsIDIwJSk7XG4kY2xyLXN1Y2Nlc3MtbHRyICA6IGxpZ2h0ZW4oJGNsci1zdWNjZXNzLCA0NSUpO1xuJGNsci1zdWNjZXNzLWx0c3QgOiBsaWdodGVuKCRjbHItc3VjY2VzcywgNTAlKTtcbiRjbHItc3VjY2Vzcy1kayAgIDogZGFya2VuKCRjbHItc3VjY2VzcywgMTAlKTtcblxuLy8gd2FybmluZyBjb2xvdXJzXG4kY2xyLXdhcm5pbmcgICAgICAgOiAjYzA5ODUzO1xuJGNsci13YXJuaW5nLWx0ICAgIDogbGlnaHRlbigkY2xyLXdhcm5pbmcsIDIwJSk7XG4kY2xyLXdhcm5pbmctbHRyICAgOiBsaWdodGVuKCRjbHItd2FybmluZywgMzUlKTtcbiRjbHItd2FybmluZy1sdHN0ICA6IGxpZ2h0ZW4oJGNsci13YXJuaW5nLCA0MCUpO1xuJGNsci13YXJuaW5nLWRrICAgIDogZGFya2VuKCRjbHItd2FybmluZywgMTAlKTtcblxuLy8gZGFuZ2VyIC8gZXJyb3IgLyBpbXBvcnRhbnQgY29sb3Vyc1xuJGNsci1kYW5nZXIgICAgICA6ICNiOTRhNDg7XG4kY2xyLWRhbmdlci1sdCAgIDogbGlnaHRlbigkY2xyLWRhbmdlciwgMjAlKTtcbiRjbHItZGFuZ2VyLWx0ciAgOiBsaWdodGVuKCRjbHItZGFuZ2VyLCAzNSUpO1xuJGNsci1kYW5nZXItbHRzdCA6IGxpZ2h0ZW4oJGNsci1kYW5nZXIsIDQwJSk7XG4kY2xyLWRhbmdlci1kayAgIDogZGFya2VuKCRjbHItZGFuZ2VyLCAxMCUpO1xuXG4vLyBpbmZvIGNvbG91cnNcbiRjbHItaW5mbyAgICAgIDogIzNhODdhZDtcbiRjbHItaW5mby1sdCAgIDogbGlnaHRlbigkY2xyLWluZm8sIDIwJSk7XG4kY2xyLWluZm8tbHRyICA6IGxpZ2h0ZW4oJGNsci1pbmZvLCA0MCUpO1xuJGNsci1pbmZvLWx0c3QgOiBsaWdodGVuKCRjbHItaW5mbywgNDUlKTtcbiRjbHItaW5mby1kayAgIDogZGFya2VuKCRjbHItaW5mbywgMTAlKTtcblxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgJERFRkFVTFRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBpbnVpdC5jc3PigJkgZGVmYXVsdCB2YXJpYWJsZXMuIFJlZGVmaW5lIHRoZXNlIGluIHlvdXIgYF92YXJzLnNjc3NgIGZpbGUgKGZvdW5kXG4gKiBpbiB0aGUgaW51aXQuY3NzLXdlYi10ZW1wbGF0ZSkgdG8gb3ZlcnJpZGUgdGhlbS5cbiAqL1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBCYXNlIHZhcmlhYmxlcy4gVGhlc2UgYXJlIGluY2x1ZGVkIGZpcnN0IGFzIHRoZXkgcHJvdmlkZSBhIGJhc2lzIGZvciBjYWxjdWxhdGlvbnNcbiAqIHRocm91Z2hvdXQgdGhlIGZyYW1ld29yay5cbiAqL1xuJGZzLWJhc2U6ICAxNnB4IWRlZmF1bHQ7XG4kYmFzZS1saW5lLWhlaWdodDogIDI0cHghZGVmYXVsdDtcblxuLyoqXG4gKiBCYXNlIGZvbnQtZmFtaWx5LlxuICovXG4kYmFzZS1mb250LWZhbWlseTogIHNhbnMtc2VyaWYhZGVmYXVsdDtcblxuLyoqXG4gKiBEZWZhdWx0IGNvbG91ciBmb3Igb2JqZWN0c+KAmSBib3JkZXJzIGV0Yy5cbiAqL1xuJGJhc2UtdWktY29sb3I6ICAgI2NjYyFkZWZhdWx0O1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRGUkFNRVdPUktcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIGludWl0LmNzcyB3aWxsIHdvcmsgdGhlc2UgbmV4dCBvbmVzIG91dCBmb3IgdXNlIHdpdGhpbiB0aGUgZnJhbWV3b3JrLlxuICpcbiAqIEFzc2lnbiBvdXIgYCRiYXNlLWxpbmUtaGVpZ2h0YCB0byBhIG5ldyBzcGFjaW5nIHZhciBmb3IgbW9yZSB0cmFuc3BhcmVuY3kuXG4gKi9cbiRiYXNlLXNwYWNpbmctdW5pdDogJGJhc2UtbGluZS1oZWlnaHQgLyAkZnMtYmFzZSFkZWZhdWx0O1xuJGhhbGYtc3BhY2luZy11bml0OiAkYmFzZS1zcGFjaW5nLXVuaXQgLyAyIWRlZmF1bHQ7XG4kbGluZS1oZWlnaHQtcmF0aW86ICRiYXNlLWxpbmUtaGVpZ2h0IC8gJGZzLWJhc2UhZGVmYXVsdDtcblxuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRERUJVR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRGVidWcgbW9kZSB3aWxsIHZpc3VhbGx5IGhpZ2hsaWdodCBhbnkgcG90ZW50aWFsIG1hcmt1cC9hY2Nlc3NpYmlsaXR5IHF1aXJrc1xuICogaW4gdGhlIGJyb3dzZXIuIFNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYC5cbiAqL1xuJGRlYnVnLW1vZGU6ICAgIGZhbHNlIWRlZmF1bHQ7XG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgJFJBSUxTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBVc2luZyBSYWlscz8gWW91J2xsIG5lZWQgdGhlIGZvbnQtZmFjZSBtaXhpbiB0byBiZWhhdmUgZGlmZmVyZW50bHkgdG8gY29ycmVjdGx5XG4gKiBsb2FkIGZvbnQgYXNzZXRzXG4gKi9cbiR1c2UtcmFpbHM6ICAgIGZhbHNlIWRlZmF1bHQ7XG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgJEJPUkRFUi1CT1hcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIERvIHlvdSB3YW50IGFsbCBlbGVtZW50cyB0byBhZG9wdCBgYm94LXNpemluZzpib3JkZXItYm94O2AgYXMgcGVyXG4gKiBwYXVsaXJpc2guY29tLzIwMTIvYm94LXNpemluZy1ib3JkZXItYm94LWZ0dyA/XG4gKi9cbiRnbG9iYWwtYm9yZGVyLWJveDogdHJ1ZSFkZWZhdWx0O1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRQUkVGSVhFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8vIFZhcmlhYmxlIHNldHRpbmdzIGZvciAvYWRkb25zL3ByZWZpeGVyLnNjc3NcbiRwcmVmaXgtZm9yLXdlYmtpdDogICAgdHJ1ZSAhZGVmYXVsdDtcbiRwcmVmaXgtZm9yLW1vemlsbGE6ICAgdHJ1ZSAhZGVmYXVsdDtcbiRwcmVmaXgtZm9yLW1pY3Jvc29mdDogdHJ1ZSAhZGVmYXVsdDtcbiRwcmVmaXgtZm9yLW9wZXJhOiAgICAgdHJ1ZSAhZGVmYXVsdDtcbiRwcmVmaXgtZm9yLXNwZWM6ICAgICAgdHJ1ZSAhZGVmYXVsdDtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkR1JJRFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIFVzZSBlaXRoZXIgYSBmbGV4Ym94IGJhc2VkIGdyaWQsIGFuIGlubGluZS1ibG9jayBiYXNlZCBncmlkLCBvciBib3RoIVxuICovXG4kdXNlLWZsZXhib3gtZ3JpZDogdHJ1ZSFkZWZhdWx0O1xuJHVzZS1sZWdhY3ktZ3JpZDogIHRydWUhZGVmYXVsdDtcblxuLyoqXG4gKiBBIHVuaXRsZXNzIHZhbHVlIHdpbGwgb3V0cHV0IHJlbSB1bml0cyB3aXRoIHB4IGZhbGxiYWNrIGZvciBndXR0ZXJzLFxuICogb3RoZXJ3aXNlIGEgdW5pdCB2YWx1ZSB3aWxsIG91dHB1dCBvbmx5IHRoYXQgdmFsdWVcbiAqL1xuJGdyaWQtZ3V0dGVyOiAkYmFzZS1zcGFjaW5nLXVuaXQhZGVmYXVsdDtcblxuJGdyaWQtdXNlLWZyYWN0aW9uczogZmFsc2UhZGVmYXVsdDtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkUkVTUE9OU0lWRVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUmVzcG9uc2l2ZW5lc3M/XG4gKi9cbiRyZXNwb25zaXZlOiAgICB0cnVlIWRlZmF1bHQ7XG5cbi8qKlxuICogUmVzcG9uc2l2ZW5lc3MgZm9yIHdpZGVzY3JlZW4vaGlnaCByZXNvbHV0aW9uIGRlc2t0b3AgbW9uaXRvcnMgYW5kIGJleW9uZD9cbiAqIE5vdGU6IGAkcmVzcG9uc2l2ZWAgdmFyaWFibGUgYWJvdmUgbXVzdCBiZSBzZXQgdG8gdHJ1ZSBiZWZvcmUgZW5hYmxpbmcgdGhpcy5cbiAqL1xuJHJlc3BvbnNpdmUtZXh0cmE6ICBmYWxzZSFkZWZhdWx0O1xuXG4vKipcbiAqIFJlc3BvbnNpdmUgcHVzaCBhbmQgcHVsbCBwcm9kdWNlIGEgTE9UIG9mIGNvZGUsIG9ubHkgdHVybiB0aGVtIG9uIGlmIHlvdVxuICogZGVmaW5pdGVseSBuZWVkIHRoZW0uXG4gKi9cbiRwdXNoOiAgICAgICAgZmFsc2UhZGVmYXVsdDtcbi8qKlxuICogTm90ZTogYCRwdXNoYCB2YXJpYWJsZSBhYm92ZSBtdXN0IGJlIHNldCB0byB0cnVlIGJlZm9yZSBlbmFibGluZyB0aGVzZS5cbiAqL1xuJHBhbG0tcHVzaDogICAgIGZhbHNlIWRlZmF1bHQ7XG4kbGFwLXB1c2g6ICAgICAgZmFsc2UhZGVmYXVsdDtcbiRsYXAtYW5kLXVwLXB1c2g6ICAgZmFsc2UhZGVmYXVsdDtcbiRwb3J0YWJsZS1wdXNoOiAgIGZhbHNlIWRlZmF1bHQ7XG4kZGVzay1wdXNoOiAgICAgZmFsc2UhZGVmYXVsdDtcblxuJHB1bGw6ICAgICAgICBmYWxzZSFkZWZhdWx0O1xuLyoqXG4gKiBOb3RlOiBgJHB1bGxgIHZhcmlhYmxlIGFib3ZlIG11c3QgYmUgc2V0IHRvIHRydWUgYmVmb3JlIGVuYWJsaW5nIHRoZXNlLlxuICovXG4kcGFsbS1wdWxsOiAgICAgZmFsc2UhZGVmYXVsdDtcbiRsYXAtcHVsbDogICAgICBmYWxzZSFkZWZhdWx0O1xuJGxhcC1hbmQtdXAtcHVsbDogICBmYWxzZSFkZWZhdWx0O1xuJHBvcnRhYmxlLXB1bGw6ICAgZmFsc2UhZGVmYXVsdDtcbiRkZXNrLXB1bGw6ICAgICBmYWxzZSFkZWZhdWx0O1xuXG4vKipcbiAqIFRlbGwgaW51aXQuY3NzIHdoZW4gYnJlYWtwb2ludHMgc3RhcnQuXG4gKi9cbiRsYXAtc3RhcnQ6ICAgICA0ODFweCFkZWZhdWx0O1xuJGRlc2stc3RhcnQ6ICAgIDg4MHB4IWRlZmF1bHQ7XG4kZGVzay13aWRlLXN0YXJ0OiAgIDEyODBweCFkZWZhdWx0O1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRGT05ULVNJWkVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBGb250LXNpemVzIChpbiBwaXhlbHMpLiBSZWZlciB0byByZWxldmFudCBzZWN0aW9ucyBmb3IgdGhlaXIgaW1wbGVtZW50YXRpb25zLlxuICovXG4kZnMtZ2lnYTogIDk2cHghZGVmYXVsdDsgLy8gLmZzLS1naWdhXG4kZnMtbWVnYTogIDcycHghZGVmYXVsdDsgLy8gLmZzLS1tZWdhXG4kZnMta2lsbzogIDQ4cHghZGVmYXVsdDsgLy8gLmZzLS1raWxvXG5cbiRmcy1oMTogICAgMzZweCFkZWZhdWx0OyAvLyAuZnMtLWFscGhhXG4kZnMtaDI6ICAgIDMwcHghZGVmYXVsdDsgLy8gLmZzLS1iZXRhXG4kZnMtaDM6ICAgIDI0cHghZGVmYXVsdDsgLy8gLmZzLS1nYW1tYVxuJGZzLWg0OiAgICAyMHB4IWRlZmF1bHQ7IC8vIC5mcy0tZGVsdGFcbiRmcy1oNTogICAgMTZweCFkZWZhdWx0OyAvLyAuZnMtLWVwc2lsb25cbiRmcy1oNjogICAgMTRweCFkZWZhdWx0OyAvLyAuZnMtLXpldGFcblxuJGZzLW1pbGxpOiAxMnB4IWRlZmF1bHQ7IC8vIC5mcy0tbWlsbGlcbiRmcy1taWNybzogMTBweCFkZWZhdWx0OyAvLyAuZnMtLW1pY3JvXG4kZnMtbmFubzogICA4cHghZGVmYXVsdDsgLy8gLmZzLS1uYW5vXG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgJFFVT1RFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRW5nbGlzaCBxdW90ZSBtYXJrcz9cbiAqL1xuJGVuZ2xpc2gtcXVvdGVzOiAgdHJ1ZSFkZWZhdWx0O1xuXG4vKipcbiAqIElmIHlvdSB3YW50IEVuZ2xpc2ggcXVvdGVzIHRoZW4gcGxlYXNlIGRvIG5vdCBlZGl0IHRoZXNlOyB0aGV54oCZcmUgb25seSBoZXJlXG4gKiBiZWNhdXNlIFNhc3MgbmVlZHMgdGhlbS5cbiAqL1xuJG9wZW4tcXVvdGU6ICBudWxsO1xuJGNsb3NlLXF1b3RlOiAgIG51bGw7XG5cbi8qKlxuICogSWYgeW91IG5lZWQgbm9uLUVuZ2xpc2ggcXVvdGVzLCBwbGVhc2UgYWx0ZXIgdGhlIGZvbGxvd2luZyB2YWx1ZXMgYWNjb3JkaW5nbHk6XG4gKi9cbkBpZiAkZW5nbGlzaC1xdW90ZXMgIT0gdHJ1ZXtcbiAgJG9wZW4tcXVvdGU6ICBcXDAwQUI7XG4gICRjbG9zZS1xdW90ZTogICBcXDAwQkI7XG59XG5cblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkVEFCTEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJGFkdmFuY2VkLXRhYmxlczogZmFsc2UhZGVmYXVsdDtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkSU1BR0VTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJGFkdmFuY2VkLWltYWdlczogZmFsc2UhZGVmYXVsdDtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkQ09ERVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiRhZHZhbmNlZC1jb2RlOiBmYWxzZSFkZWZhdWx0O1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRCUkFORFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogQnJhbmQgc3R1ZmZcbiAqL1xuJGJyYW5kLWNvbG9yOiAgICAgIzRhOGVjMiFkZWZhdWx0O1xuJGJyYW5kLWZhY2U6ICAgIFwiSGVsdmV0aWNhIE5ldWVcIiwgc2Fucy1zZXJpZiFkZWZhdWx0O1xuXG4vKipcbiAqIEhvdyBiaWcgd291bGQgeW91IGxpa2Ugcm91bmQgY29ybmVycyB0byBiZSBieSBkZWZhdWx0P1xuICovXG4kYnJhbmQtcm91bmQ6ICAgIDRweCFkZWZhdWx0O1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRDT0xPUlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4kc2VsZWN0aW9uLWNvbG9yOiAkYnJhbmQtY29sb3IhZGVmYXVsdDtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkT0JKRUNUUyBBTkQgQUJTVFJBQ1RJT05TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBXaGljaCBvYmplY3RzIGFuZCBhYnN0cmFjdGlvbnMgd291bGQgeW91IGxpa2UgdG8gdXNlP1xuICovXG4kdXNlLWdyaWRzOiAgICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtY29sdW1uczogICAgICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1uYXY6ICAgICAgICAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLW9wdGlvbnM6ICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtcGFnaW5hdGlvbjogICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1icmVhZGNydW1iOiAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLW1lZGlhOiAgICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtbWFyZ2luYWxpYTogICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1ibG9jay1saXN0OiAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLW1hdHJpeDogICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2Utc3BsaXQ6ICAgICAgICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS10aGlzLW9yLXRoaXM6ICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLWxpbmstY29tcGxleDogICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtZmx5b3V0OiAgICAgICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1hcnJvd3M6ICAgICAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLXNwcml0ZTogICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtaWNvbi10ZXh0OiAgICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1iZWF1dG9uczogICAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLWxvemVuZ2VzOiAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtcnVsZXM6ICAgICAgICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1zdGF0czogICAgICAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLWdyZXlib3g6ICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcblxuJHVzZS1hbGVydHM6ICAgICAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLWJ1dHRvbnM6ICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtY2tlZGl0b3I6ICAgICAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1mb3JtLWFmZml4ZXM6ICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLWljb24tYXMtZm9udDogICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtaWNvbi1hcy1pbmxpbmUtc3ZnOiBmYWxzZSFkZWZhdWx0O1xuJHVzZS1wcm9ncmVzcy1iYXJzOiAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLXByaW50OiAgICAgICAgICAgICAgZmFsc2UhZGVmYXVsdDtcbiR1c2UtcmF0aW8tb2JqZWN0OiAgICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS10aW55bWNlOiAgICAgICAgICAgIGZhbHNlIWRlZmF1bHQ7XG4kdXNlLXZlcnRpY2FsLWNlbnRlcjogICAgZmFsc2UhZGVmYXVsdDtcblxuXG5cblxuXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgIElOVUlULkNTU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qISpcbiAqXG4gKiBpbnVpdGNzcy5jb20gLS0gQGludWl0Y3NzIC0tIEBjc3N3aXphcmRyeVxuICpcbiAqL1xuLyoqXG4gKiBpbnVpdC5jc3MgYWN0cyBhcyBhIGJhc2Ugc3R5bGVzaGVldCB3aGljaCB5b3Ugc2hvdWxkIGV4dGVuZCB3aXRoIHlvdXIgb3duXG4gKiB0aGVtZSBzdHlsZXNoZWV0LlxuICpcbiAqIGludWl0LmNzcyBhaW1zIHRvIGRvIHRoZSBoZWF2eSBsaWZ0aW5nOyBzb3J0aW5nIG9iamVjdHMgYW5kIGFic3RyYWN0aW9ucyxcbiAqIGRlc2lnbiBwYXR0ZXJucyBhbmQgZmlkZGx5IGJpdHMgb2YgQ1NTLCB3aGlsc3QgbGVhdmluZyBhcyBtdWNoIGRlc2lnbiBhc1xuICogcG9zc2libGUgdG8geW91LiBpbnVpdC5jc3MgaXMgdGhlIHNjYWZmb2xkaW5nIHRvIHlvdXIgZGVjb3JhdG9yLlxuICpcbiAqIFRoaXMgc3R5bGVzaGVldCBpcyBoZWF2aWx5IGRvY3VtZW50ZWQgYW5kIGNvbnRhaW5zIGxvdHMgb2YgY29tbWVudHMsIHBsZWFzZVxuICogdGFrZSBjYXJlIHRvIHJlYWQgYW5kIHJlZmVyIHRvIHRoZW0gYXMgeW91IGJ1aWxkLiBGb3IgZnVydGhlciBzdXBwb3J0IHBsZWFzZVxuICogdHdlZXQgYXQgQGludWl0Y3NzLlxuICpcbiAqIE93aW5nIHRvIHRoZSBhbW91bnQgb2YgY29tbWVudHMgcGxlYXNlIG9ubHkgZXZlciB1c2UgbWluaWZpZWQgQ1NTIGluXG4gKiBwcm9kdWN0aW9uLiBUaGlzIGZpbGUgaXMgcHVyZWx5IGEgZGV2IGRvY3VtZW50LlxuICpcbiAqIFRoZSB0YWJsZSBvZiBjb250ZW50cyBiZWxvdyBtYXBzIHRvIHNlY3Rpb24gdGl0bGVzIG9mIHRoZSBzYW1lIG5hbWUsIHRvIGp1bXBcbiAqIHRvIGFueSBzZWN0aW9uIHNpbXBseSBydW4gYSBmaW5kIGZvciAkW1NFQ1RJT04tVElUTEVdLlxuICpcbiAqIE1vc3Qgb2JqZWN0cyBhbmQgYWJzdHJhY3Rpb25zIGNvbWUgd2l0aCBhIGNodW5rIG9mIG1hcmt1cCB0aGF0IHlvdSBzaG91bGQgYmVcbiAqIGFibGUgdG8gcGFzdGUgaW50byBhbnkgdmlldyB0byBxdWlja2x5IHNlZSBob3cgdGhlIENTUyB3b3JrcyBpbiBjb25qdW5jdGlvblxuICogd2l0aCB0aGUgY29ycmVjdCBIVE1MLlxuICpcbiAqIGludWl0LmNzcyBpcyB3cml0dGVuIHRvIHRoaXMgc3RhbmRhcmQ6IGdpdGh1Yi5jb20vY3Nzd2l6YXJkcnkvQ1NTLUd1aWRlbGluZXNcbiAqXG4gKiBMSUNFTlNFXG4gKlxuICogQ29weXJpZ2h0IDIwMTMgSGFycnkgUm9iZXJ0c1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogVGhhbmsgeW91IGZvciBjaG9vc2luZyBpbnVpdC5jc3MuIE1heSB5b3VyIHdlYiBmb250cyByZW5kZXIgcGVyZmVjdGx5LlxuICovXG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQ09OVEVOVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIENPTlRFTlRTLi4uLi4uLi4uLi4uWW914oCZcmUgcmVhZGluZyBpdCFcbiAqIFdBUk5JTkcuLi4uLi4uLi4uLi4uSGVyZSBiZSBkcmFnb25zIVxuICogSU1QT1JUUy4uLi4uLi4uLi4uLi5CZWdpbiBpbXBvcnRpbmcgdGhlIHNlY3Rpb25zIGJlbG93XG4gKlxuICogTUlYSU5TLi4uLi4uLi4uLi4uLi5TdXBlci1zaW1wbGUgU2FzcyBzdHVmZlxuICogTk9STUFMSVpFLi4uLi4uLi4uLi5ub3JtYWxpemUuY3NzXG4gKiBSRVNFVC4uLi4uLi4uLi4uLi4uLlNldCBzb21lIGRlZmF1bHRzXG4gKiBDTEVBUkZJWC4uLi4uLi4uLi4uLlxuICogU0hBUkVELi4uLi4uLi4uLi4uLi5TaGFyZWQgZGVjbGFyYXRpb25zXG4gKlxuICogTUFJTi4uLi4uLi4uLi4uLi4uLi5IaWdoLWxldmVsIGVsZW1lbnRzIGxpa2UgYGh0bWxgLCBgYm9keWAsIGV0Yy5cbiAqIEhFQURJTkdTLi4uLi4uLi4uLi4uRG91YmxlLXN0cmFuZGVkIGhlYWRpbmcgaGllcmFyY2h5XG4gKiBQQVJBR1JBUEhTLi4uLi4uLi4uLlxuICogU01BTExQUklOVC4uLi4uLi4uLi5TbWFsbGVyIHRleHQgZWxlbWVudHMgbGlrZSBgc21hbGxgXG4gKiBRVU9URVMuLi4uLi4uLi4uLi4uLlxuICogQ09ERS4uLi4uLi4uLi4uLi4uLi5cbiAqIExJU1RTLi4uLi4uLi4uLi4uLi4uXG4gKiBJTUFHRVMuLi4uLi4uLi4uLi4uLlxuICogVEFCTEVTLi4uLi4uLi4uLi4uLi5cbiAqIEZPUk1TLi4uLi4uLi4uLi4uLi4uXG4gKlxuICogR1JJRFMuLi4uLi4uLi4uLi4uLi5GbHVpZCwgcHJvcG9ydGlvbmFsIGFuZCBuZXN0YWJsZSBncmlkc1xuICogQ09MVU1OUy4uLi4uLi4uLi4uLi5DU1MzIGNvbHVtbnNcbiAqIE5BVi4uLi4uLi4uLi4uLi4uLi4uQSBzaW1wbGUgYWJzdHJhY3Rpb24gdG8gcHV0IGEgbGlzdCBpbiBob3Jpem9udGFsIG5hdiBtb2RlXG4gKiBPUFRJT05TLi4uLi4uLi4uLi4uLkdyb3VwZWQgbmF2IGl0ZW1zXG4gKiBQQUdJTkFUSU9OLi4uLi4uLi4uLlZlcnkgc3RyaXBwZWQgYmFjaywgYmFzaWMgcGFnaW5hdG9yXG4gKiBCUkVBRENSVU1CLi4uLi4uLi4uLlNpbXBsZSBicmVhZGNydW1iIHRyYWlsIG9iamVjdFxuICogTUVESUEuLi4uLi4uLi4uLi4uLi5NZWRpYSBvYmplY3RcbiAqIE1BUkdJTkFMSUEuLi4uLi4uLi4uU2ltcGxlIG1hcmdpbmFsaWEgY29udGVudFxuICogSVNMQU5ELi4uLi4uLi4uLi4uLi5Cb3hlZCBvZmYgY29udGVudFxuICogQkxPQ0stTElTVC4uLi4uLi4uLi5CbG9ja3kgbGlzdHMgb2YgY29udGVudFxuICogTUFUUklYLi4uLi4uLi4uLi4uLi5HcmlkZGVkIGxpc3RzXG4gKiBTUExJVC4uLi4uLi4uLi4uLi4uLkEgc2ltcGxlIHNwbGl0LWluLXR3byBvYmplY3RcbiAqIFRISVMtT1ItVEhJUy4uLi4uLi4uT3B0aW9ucyBvYmplY3RcbiAqIExJTkstQ09NUExFWC4uLi4uLi4uXG4gKiBGTFlPVVQuLi4uLi4uLi4uLi4uLkZseW91dC1vbi1ob3ZlciBvYmplY3RcbiAqIEFSUk9XUy4uLi4uLi4uLi4uLi4uQ1NTIGFycm93c1xuICogU1BSSVRFLi4uLi4uLi4uLi4uLi5HZW5lcmljIHNwcml0aW5nIGVsZW1lbnRcbiAqIElDT04tVEVYVC4uLi4uLi4uLi4uSWNvbiBhbmQgdGV4dCBjb3VwbGluZ3NcbiAqIEJFQVVUT05TLi4uLi4uLi4uLi4uVXNlIHRoZSBiZWF1dG9ucyBtaWNybyBsaWJyYXJ5XG4gKiBMT1pFTkdFUy4uLi4uLi4uLi4uLkJhc2ljIGxvemVuZ2Ugc3R5bGVzXG4gKiBSVUxFUy4uLi4uLi4uLi4uLi4uLkhvcml6b250YWwgcnVsZXNcbiAqIFNUQVRTLi4uLi4uLi4uLi4uLi4uU2ltcGxlIHN0YXRzIG9iamVjdFxuICogR1JFWUJPWC4uLi4uLi4uLi4uLi5XaXJlZnJhbWluZyBzdHlsZXNcbiAqXG4gKiBXSURUSFMuLi4uLi4uLi4uLi4uLldpZHRoIGNsYXNzZXMgZm9yIHVzZSBhbG9uZ3NpZGUgdGhlIGdyaWQgc3lzdGVtIGV0Yy5cbiAqIFBVU0guLi4uLi4uLi4uLi4uLi4uUHVzaCBjbGFzc2VzIGZvciBtYW5pcHVsYXRpbmcgZ3JpZHNcbiAqIFBVTEwuLi4uLi4uLi4uLi4uLi4uUHVsbCBjbGFzc2VzIGZvciBtYW5pcHVsYXRpbmcgZ3JpZHNcbiAqIEJSQU5ELi4uLi4uLi4uLi4uLi4uSGVscGVyIGNsYXNzIHRvIGFwcGx5IGJyYW5kIHRyZWF0bWVudCB0byBlbGVtZW50c1xuICogREVCVUcuLi4uLi4uLi4uLi4uLi5FbmFibGUgdG8gYWRkIHZpc3VhbCBmbGFncyBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4gKi9cblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRXQVJOSU5HXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLypcbiAqIGludWl0LmNzcywgYmVpbmcgYW4gT08gZnJhbWV3b3JrLCB3b3JrcyBpbiBrZWVwaW5nIHdpdGggdGhlIG9wZW4vY2xvc2VkXG4gKiBwcmluY2lwbGUuIFRoZSB2YXJpYWJsZXMgeW91IHNldCBwcmV2aW91c2x5IGFyZSBub3cgYmVpbmcgdXNlZCB0aHJvdWdob3V0XG4gKiBpbnVpdC5jc3MgdG8gc3R5bGUgZXZlcnl0aGluZyB3ZSBuZWVkIGZvciBhIGJhc2UuIEFueSBjdXN0b20gc3R5bGVzIFNIT1VMRFxuICogTk9UIGJlIGFkZGVkIG9yIG1vZGlmaWVkIGluIGludWl0LmNzcyBkaXJlY3RseSwgYnV0IGFkZGVkIHZpYSB5b3VyIHRoZW1lXG4gKiBzdHlsZXNoZWV0IGFzIHBlciB0aGUgb3Blbi9jbG9zZWQgcHJpbmNpcGxlOlxuICpcbiAqIGNzc3dpemFyZHJ5LmNvbS8yMDEyLzA2L3RoZS1vcGVuLWNsb3NlZC1wcmluY2lwbGUtYXBwbGllZC10by1jc3NcbiAqXG4gKiBUcnkgbm90IHRvIGVkaXQgYW55IENTUyBiZXlvbmQgdGhpcyBwb2ludDsgaWYgeW91IGZpbmQgeW91IG5lZWQgdG8gZG8gc29cbiAqIGl0IGlzIGEgZmFpbGluZyBvZiB0aGUgZnJhbWV3b3JrIHNvIHBsZWFzZSB0d2VldCBhdCBAaW51aXRjc3MuXG4gKi9cblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcInV0aWxpdGllcy9mdW5jdGlvbnMvIWFsbFwiO1xuQGltcG9ydCBcInV0aWxpdGllcy9taXhpbnMvIWFsbFwiO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEJBU0VcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdiYXNlLyFhbGwnO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJENPTVBPTkVOVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdjb21wb25lbnRzLyFhbGwnO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJExBWU9VVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ2xheW91dC8hYWxsJztcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRERUJVR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgXCJ1dGlsaXRpZXMvZGVidWdcIjtcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEZVTkNUSU9OU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ21hcC1nZXQtZGVlcCc7XG5AaW1wb3J0ICdweC10by1yZW0nO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTUFQIEdFVCBERUVQXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy9cbi8vIEdldCB2YWx1ZXMgb3V0IG9mIG5lc3RlZCBtYXBzIC0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamxvbmcvODc2MDI3NVxuLy9cblxuLy8gJGJnLWltZ3M6IChcbi8vICAgJ2ZpcnN0LWltYWdlJzogKFxuLy8gICAgIGRlc2s6ICgnaGVpZ2h0JzogMTA2LCAnd2lkdGgnOiAxMjMpLFxuLy8gICAgIGxhcDogKCdoZWlnaHQnOiAxMDYsICd3aWR0aCc6IDIzNCksXG4vLyAgICAgcGFsbTogKCdoZWlnaHQnOiAxMDYsICd3aWR0aCc6IDM0NSksXG4vLyAgICksXG4vLyAgICdzZWNvbmQtaW1hZ2UnOiAoXG4vLyAgICAgZGVzazogKCdoZWlnaHQnOiAxMDYsICd3aWR0aCc6IDEyMyksXG4vLyAgICAgbGFwOiAoJ2hlaWdodCc6IDEwNiwgJ3dpZHRoJzogMjM0KSxcbi8vICAgICBwYWxtOiAoJ2hlaWdodCc6IDEwNiwgJ3dpZHRoJzogMzQ1KSxcbi8vICAgKSxcbi8vICAgJ3RoaXJkLWltYWdlJzogKFxuLy8gICAgIGRlc2s6ICgnaGVpZ2h0JzogMTA2LCAnd2lkdGgnOiAxMjMpLFxuLy8gICAgIGxhcDogKCdoZWlnaHQnOiAxMDYsICd3aWR0aCc6IDIzNCksXG4vLyAgICAgcGFsbTogKCdoZWlnaHQnOiAxMDYsICd3aWR0aCc6IDM0NSksXG4vLyAgICksXG4vLyApO1xuXG4vLyBAbWl4aW4gYmctaW1nLXJhdGlvLXJlc3BvbnNpdmUtZG8oJGltZ3MpIHtcbi8vICAgQGVhY2ggJGltZy1uYW1lLCAkdmlld3BvcnRzIGluICRpbWdzIHtcblxuLy8gICAgIEBlYWNoICR2cCBpbiBtYXAta2V5cygkdmlld3BvcnRzKSB7XG4vLyAgICAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeSgkdnApIHtcbi8vICAgICAgICAgLmJnaS0tI3skaW1nLW5hbWV9IHtcbi8vICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltYWdlcy8jeyRpbWctbmFtZX0tI3skdnB9LnN2ZycpO1xuLy8gICAgICAgICAgIHdpZHRoOiBtYXAtZGVlcC1nZXQoJHZpZXdwb3J0cywgJHZwLCB3aWR0aCk7XG4vLyAgICAgICAgICAgaGVpZ2h0OiBtYXAtZGVlcC1nZXQoJHZpZXdwb3J0cywgJHZwLCBoZWlnaHQpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICB9XG4vLyB9XG5cbi8vIEBpbmNsdWRlIGJnLWltZy1yYXRpby1yZXNwb25zaXZlLWRvKCRiZy1pbWdzKTtcblxuLy8gLyogb3Igc2ltcGx5ICovXG4vLyAuZmlyc3QtaW1hZ2Utd2lkdGgtZGVzayB7XG4vLyAgIHdpZHRoOiBtYXAtZGVlcC1nZXQoJGJnLWltZ3MsICdmaXJzdC1pbWFnZScsIGRlc2ssIHdpZHRoKTtcbi8vIH1cblxuLy8gLyogaW4gZ2VuZXJhbCAqL1xuLy8gLmNsYXNzIHtcbi8vICAgW3Byb3BlcnR5XTogbWFwLWRlZXAtZ2V0KCRtYXAsIGtleTEsIGtleTIsIC4uLiwga2V5bik7XG4vLyB9XG5cbkBmdW5jdGlvbiBtYXAtZGVlcC1nZXQoJG1hcCwgJGtleXMuLi4pIHtcbiAgJHZhbHVlOiAkbWFwO1xuXG4gIEBlYWNoICRrZXkgaW4gJGtleXMgeyAkdmFsdWU6IG1hcC1nZXQoJHZhbHVlLCAka2V5KTt9XG5cbiAgQHJldHVybiAkdmFsdWU7XG59XG5cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFBYIFRPIFJFTVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qXG4gKiBDb252ZXJ0IGEgcHggdmFsdWUgdG8gdGhlIGVxdWl2YWxlbnQgcmVtIHZhbHVlLlxuICpcbiAqIFRha2VzIGJvdGggcHggdmFsdWVzLCBhbmQgdW5pdGxlc3MgdmFsdWVzLlxuICpcbiAqIFdpbGwgdXNlICRmcy1iYXNlIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHRha2VzIGEgc2Vjb25kIHBhcmFtZXRlciwgZGVmYXVsdGVkIHRvXG4gKiAxNnB4LlxuICpcbiAqIFZhbHVlIHByb3ZpZGVkIHNob3VsZCBiZSBzYW1lIGFzIHBpeGVsIHZhbHVlIG9uIGh0bWwgdGFnXG4gKlxuICogRXhhbXBsZTpcblxuICAubXktY2xhc3Mge1xuICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDI0cHgpOyAvLyA9PiAxLjVyZW1cbiAgfVxuXG4gIC8vIG9yXG5cbiAgLm15LWNsYXNzIHtcbiAgICBmb250LXNpemU6IHB4LXRvLXJlbSgyNCk7IC8vID0+IDEuNXJlbVxuICB9XG4gKi9cblxuQGZ1bmN0aW9uIHB4LXRvLXJlbSgkdmFsLCAkcm9vdC12YWw6IDE2cHgpIHtcbiAgJHZhbDogaWYodW5pdGxlc3MoJHZhbCksICR2YWwgKiAxcHgsICR2YWwpO1xuICAkZGl2aXNvcjogaWYoZ2xvYmFsLXZhcmlhYmxlLWV4aXN0cyhmcy1iYXNlKSwgJGZzLWJhc2UsICRyb290LXZhbCk7XG5cbiAgQHJldHVybiAkdmFsIC8gJGRpdmlzb3IgKyByZW07XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwiYWNjZXNzaWJpbGl0eVwiO1xuQGltcG9ydCBcImFycm93c1wiO1xuQGltcG9ydCBcImZvbnQtZmFjZVwiO1xuQGltcG9ydCBcImZvbnQtc2l6ZVwiO1xuQGltcG9ydCBcImhlYWRpbmdzXCI7XG5AaW1wb3J0IFwibWVkaWEtcXVlcnlcIjtcbkBpbXBvcnQgXCJwcmVmaXhlclwiO1xuQGltcG9ydCBcInB4LWFuZC1yZW1cIjtcbkBpbXBvcnQgXCJ0cnVuY2F0ZVwiO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQUNDRVNTSUJJTElUWVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBtaXhpbiBhY2Nlc3NpYmlsaXR5e1xuICBib3JkZXI6MDtcbiAgY2xpcDpyZWN0KDAgMCAwIDApO1xuICBoZWlnaHQ6MXB4O1xuICBtYXJnaW46LTFweDtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xuICBwYWRkaW5nOjA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6MXB4O1xufVxuIiwiXG4vKipcbiAqIENTUyBhcnJvd3MhISEgQnV0Li4uIGJlZm9yZSB5b3UgcmVhZCBvbiwgeW91IG1pZ2h0IHdhbnQgdG8gZ3JhYiBhIGNvZmZlZS4uLlxuICpcbiAqIFRoaXMgbWl4aW4gY3JlYXRlcyBhIENTUyBhcnJvdyBvbiBhIGdpdmVuIGVsZW1lbnQuIFdlIGNhbiBoYXZlIHRoZSBhcnJvd1xuICogYXBwZWFyIGluIG9uZSBvZiAxMiBsb2NhdGlvbnMsIHRodXM6XG4gKlxuICogICAgIDAxICAwMiAgMDNcbiAqICArLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogMTIgfCAgICAgICAgICB8IDA0XG4gKiAgfCAgICAgICAgICB8XG4gKiAxMSB8ICAgICAgICAgIHwgMDVcbiAqICB8ICAgICAgICAgIHxcbiAqIDEwIHwgICAgICAgICAgfCAwNlxuICogICstLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgMDkgIDA4ICAwN1xuICpcbiAqIFlvdSBwYXNzIHRoaXMgcG9zaXRpb24gaW4gYWxvbmcgd2l0aCBhIGRlc2lyZWQgYXJyb3cgY29sb3IgYW5kIG9wdGlvbmFsXG4gKiBib3JkZXIgY29sb3IsIGZvciBleGFtcGxlOlxuICpcbiAqIGBAaW5jbHVkZSBhcnJvdyh0b3AsIGxlZnQsIHJlZClgXG4gKlxuICogZm9yIGp1c3QgYSBzaW5nbGUsIHJlZCBhcnJvdywgb3I6XG4gKlxuICogYEBpbmNsdWRlIGFycm93KGJvdHRvbSwgY2VudGVyLCByZWQsIGJsYWNrKWBcbiAqXG4gKiB3aGljaCB3aWxsIGNyZWF0ZSBhIHJlZCB0cmlhbmdsZSB3aXRoIGEgYmxhY2sgYm9yZGVyIHdoaWNoIHNpdHMgYXQgdGhlIGJvdHRvbVxuICogY2VudGVyIG9mIHRoZSBlbGVtZW50LiBDYWxsIHRoZSBtaXhpbiB0aHVzOlxuICpcbiAgIC5mb297XG4gICAgIGJhY2tncm91bmQtY29sb3I6I0JBREE1NTtcbiAgICAgYm9yZGVyOjFweCBzb2xpZCAjQUNFO1xuICAgICBAaW5jbHVkZSBhcnJvdyh0b3AsIGxlZnQsICNCQURBNTUsICNBQ0UpO1xuICAgfVxuICpcbiAqL1xuQG1peGluIGFycm93KCRhcnJvdy1lZGdlLCAkYXJyb3ctbG9jYXRpb24sICRhcnJvdy1jb2xvciwgJGJvcmRlci1jb2xvcjogJGFycm93LWNvbG9yKXtcblxuICBAaWYgJGFycm93LWVkZ2UgPT0gdG9we1xuXG4gICAgQGV4dGVuZCAlYXJyb3ctLXRvcDtcblxuICAgICY6YmVmb3Jle1xuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjokYm9yZGVyLWNvbG9yIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAmOmFmdGVye1xuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjokYXJyb3ctY29sb3IhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIEBpZiAkYXJyb3ctbG9jYXRpb24gPT0gbGVmdHtcbiAgICAgIEBleHRlbmQgJWFycm93LS1sZWZ0O1xuICAgIH1cblxuICAgIEBpZiAkYXJyb3ctbG9jYXRpb24gPT0gY2VudGVye1xuICAgICAgQGV4dGVuZCAlYXJyb3ctLWNlbnRlcjtcbiAgICB9XG5cbiAgICBAaWYgJGFycm93LWxvY2F0aW9uID09IHJpZ2h0e1xuICAgICAgQGV4dGVuZCAlYXJyb3ctLXJpZ2h0O1xuICAgIH1cblxuICB9XG5cbiAgQGlmICRhcnJvdy1lZGdlID09IHJpZ2h0e1xuXG4gICAgQGV4dGVuZCAlYXJyb3ctLWZhcjtcblxuICAgICY6YmVmb3Jle1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6JGJvcmRlci1jb2xvciFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgJjphZnRlcntcbiAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiRhcnJvdy1jb2xvciFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQGlmICRhcnJvdy1sb2NhdGlvbiA9PSB0b3B7XG4gICAgICBAZXh0ZW5kICVhcnJvdy0tdXBwZXI7XG4gICAgfVxuXG4gICAgQGlmICRhcnJvdy1sb2NhdGlvbiA9PSBjZW50ZXJ7XG4gICAgICBAZXh0ZW5kICVhcnJvdy0tbWlkZGxlO1xuICAgIH1cblxuICAgIEBpZiAkYXJyb3ctbG9jYXRpb24gPT0gYm90dG9te1xuICAgICAgQGV4dGVuZCAlYXJyb3ctLWxvd2VyO1xuICAgIH1cblxuICB9XG5cbiAgQGlmICRhcnJvdy1lZGdlID09IGJvdHRvbXtcblxuICAgIEBleHRlbmQgJWFycm93LS1ib3R0b207XG5cbiAgICAmOmJlZm9yZXtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6JGJvcmRlci1jb2xvciFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgJjphZnRlcntcbiAgICAgIGJvcmRlci10b3AtY29sb3I6JGFycm93LWNvbG9yIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICBAaWYgJGFycm93LWxvY2F0aW9uID09IGxlZnR7XG4gICAgICBAZXh0ZW5kICVhcnJvdy0tbGVmdDtcbiAgICB9XG5cbiAgICBAaWYgJGFycm93LWxvY2F0aW9uID09IGNlbnRlcntcbiAgICAgIEBleHRlbmQgJWFycm93LS1jZW50ZXI7XG4gICAgfVxuXG4gICAgQGlmICRhcnJvdy1sb2NhdGlvbiA9PSByaWdodHtcbiAgICAgIEBleHRlbmQgJWFycm93LS1yaWdodDtcbiAgICB9XG5cbiAgfVxuXG4gIEBpZiAkYXJyb3ctZWRnZSA9PSBsZWZ0e1xuXG4gICAgQGV4dGVuZCAlYXJyb3ctLW5lYXI7XG5cbiAgICAmOmJlZm9yZXtcbiAgICAgIGJvcmRlci1yaWdodC1jb2xvcjokYm9yZGVyLWNvbG9yIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAmOmFmdGVye1xuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiRhcnJvdy1jb2xvciFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQGlmICRhcnJvdy1sb2NhdGlvbiA9PSB0b3B7XG4gICAgICBAZXh0ZW5kICVhcnJvdy0tdXBwZXI7XG4gICAgfVxuXG4gICAgQGlmICRhcnJvdy1sb2NhdGlvbiA9PSBjZW50ZXJ7XG4gICAgICBAZXh0ZW5kICVhcnJvdy0tbWlkZGxlO1xuICAgIH1cblxuICAgIEBpZiAkYXJyb3ctbG9jYXRpb24gPT0gYm90dG9te1xuICAgICAgQGV4dGVuZCAlYXJyb3ctLWxvd2VyO1xuICAgIH1cblxuICB9XG5cbn1cbiIsIi8qKlxuICogQ3JlYXRlIGEgZnVsbHkgZm9ybWVkIHR5cGUgc3R5bGUgKHNpemluZyBhbmQgdmVydGljYWwgcmh5dGhtKSBieSBwYXNzaW5nIGluIGFcbiAqIHNpbmdsZSB2YWx1ZSwgZS5nLjpcbiAqXG4gICBgQGluY2x1ZGUgZm9udC1zaXplKDEwcHgpO2BcbiAqXG4gKiBUaGFua3MgdG8gQHJlZGNsb3YzciBmb3IgdGhlIGBsaW5lLWhlaWdodGAgU2FzczpcbiAqIHR3aXR0ZXIuY29tL3JlZGNsb3Yzci9zdGF0dXMvMjUwMzAxNTM5MzIxNzk4NjU3XG4gKi9cbkBtaXhpbiBmb250LXNpemUoJGZvbnQtc2l6ZSwgJGxpbmUtaGVpZ2h0OmZhbHNlLCAkcHgtZmFsbGJhY2s6ZmFsc2Upe1xuXG4gIEBpZiB1bml0bGVzcygkZm9udC1zaXplKXtcbiAgICBAaW5jbHVkZSBweC1hbmQtcmVtKGZvbnQtc2l6ZSwgJGZvbnQtc2l6ZSk7XG4gIH0gQGVsc2Uge1xuXHRcdEBpZiAoJHB4LWZhbGxiYWNrKSB7IGZvbnQtc2l6ZTogJGZvbnQtc2l6ZTt9XG4gICAgZm9udC1zaXplOigkZm9udC1zaXplIC8gJGZzLWJhc2UpICogMXJlbTtcbiAgfVxuXG4gIEBpZiAkbGluZS1oZWlnaHQgPT0gdHJ1ZSB7XG4gICAgbGluZS1oZWlnaHQ6Y2VpbCgkZm9udC1zaXplIC8gJGJhc2UtbGluZS1oZWlnaHQpICogKCRiYXNlLWxpbmUtaGVpZ2h0IC8gJGZvbnQtc2l6ZSk7XG4gIH1cbn1cblxuIiwiLyoqXG4gKiBTdHlsZSBhbnkgbnVtYmVyIG9mIGhlYWRpbmdzIGluIG9uZSBmZWxsIHN3b29wLCBlLmcuOlxuICpcbiAgIC5mb297XG4gICAgIEBpbmNsdWRlIGhlYWRpbmdzKDEsIDMpe1xuICAgICAgIGNvbG9yOiNCQURBNTU7XG4gICAgIH1cbiAgfVxuICpcbiAqIFdpdGggdGhhbmtzIHRvIEBsYXJfenp6LCBAcGFyYW5vaWRhLCBAcm93YW5tYW5uaW5nIGFuZCB1bHRpbWF0ZWx5XG4gKiBAdGhpZXJyeWxlbW91bGVjIGZvciByZWZpbmluZyBhbmQgaW1wcm92aW5nIG15IGluaXRpYWwgbWl4aW4uXG4gKi9cbkBtaXhpbiBoZWFkaW5ncygkZnJvbTogMSwgJHRvOiA2KXtcbiAgJWJhc2UtaGVhZGluZyB7XG4gICAgQGNvbnRlbnRcbiAgfVxuXG4gIEBpZiAkZnJvbSA+PSAxIGFuZCAkdG8gPD0gNntcbiAgICBAZm9yICRpIGZyb20gJGZyb20gdGhyb3VnaCAkdG97XG4gICAgICBoI3skaX17XG4gICAgICAgIEBleHRlbmQgJWJhc2UtaGVhZGluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogTWVkaWEgcXVlcnkgbWl4aW4uXG4gKlxuICogSXTigJlzIG5vdCBncmVhdCBwcmFjdGljZSB0byBkZWZpbmUgc29saWQgYnJlYWtwb2ludHMgdXAtZnJvbnQsIHByZWZlcnJpbmcgdG9cbiAqIG1vZGlmeSB5b3VyIGRlc2lnbiB3aGVuIGl0IG5lZWRzIGl0LCByYXRoZXIgdGhhbiBhc3N1bWluZyB5b3XigJlsbCB3YW50IGFcbiAqIGNoYW5nZSBhdCDigJhtb2JpbGXigJkuIEhvd2V2ZXIsIGFzIGludWl0LmNzcyBpcyByZXF1aXJlZCB0byB0YWtlIGEgaGFuZHMgb2ZmXG4gKiBhcHByb2FjaCB0byBkZXNpZ24gZGVjaXNpb25zLCB0aGlzIGlzIHRoZSBjbG9zZXN0IHdlIGNhbiBnZXQgdG8gYmFrZWQtaW5cbiAqIHJlc3BvbnNpdmVuZXNzLiBJdOKAmXMgZmxleGlibGUgZW5vdWdoIHRvIGFsbG93IHlvdSB0byBzZXQgeW91ciBvd24gYnJlYWtwb2ludHNcbiAqIGJ1dCBzb2xpZCBlbm91Z2ggdG8gYmUgZnJhbWV3b3JraWZpZWQuXG4gKlxuICogV2UgZGVmaW5lIHNvbWUgYnJvYWQgYnJlYWtwb2ludHMgaW4gb3VyIHZhcnMgZmlsZSB0aGF0IGFyZSBwaWNrZWQgdXAgaGVyZVxuICogZm9yIHVzZSBpbiBhIHNpbXBsZSBtZWRpYSBxdWVyeSBtaXhpbi4gT3VyIG9wdGlvbnMgYXJlOlxuICpcbiAqIHBhbG1cbiAqIGxhcFxuICogbGFwLWFuZC11cFxuICogcG9ydGFibGVcbiAqIGRlc2tcbiAqIGRlc2std2lkZVxuICpcbiAqIE5vdCB1c2luZyBhIG1lZGlhIHF1ZXJ5IHdpbGwsIG5hdHVyYWxseSwgc2VydmUgc3R5bGVzIHRvIGFsbCBkZXZpY2VzLlxuICpcbiAqIGBAaW5jbHVkZSBtZWRpYS1xdWVyeShwYWxtKXsgW3N0eWxlcyBoZXJlXSB9YFxuICpcbiAqIFdlIHdvcmsgb3V0IHlvdXIgZW5kIHBvaW50cyBmb3IgeW91OlxuICovXG4kcGFsbS1lbmQ6ICAgICAgICAkbGFwLXN0YXJ0IC0gMXB4O1xuJGxhcC1lbmQ6ICAgICAgICAgJGRlc2stc3RhcnQgLSAxcHg7XG5cbkBtaXhpbiBtZWRpYS1xdWVyeSgkbWVkaWEtcXVlcnkpe1xuXG4gIEBpZiAkbWVkaWEtcXVlcnkgPT0gcGFsbXtcblxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDokcGFsbS1lbmQpIHsgQGNvbnRlbnQ7IH1cblxuICB9XG5cbiAgQGlmICRtZWRpYS1xdWVyeSA9PSBsYXB7XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JGxhcC1zdGFydCkgYW5kIChtYXgtd2lkdGg6JGxhcC1lbmQpIHsgQGNvbnRlbnQ7IH1cblxuICB9XG5cbiAgQGlmICRtZWRpYS1xdWVyeSA9PSBsYXAtYW5kLXVwe1xuXG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiRsYXAtc3RhcnQpIHsgQGNvbnRlbnQ7IH1cblxuICB9XG5cbiAgQGlmICRtZWRpYS1xdWVyeSA9PSBwb3J0YWJsZXtcblxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDokbGFwLWVuZCkgeyBAY29udGVudDsgfVxuXG4gIH1cblxuICBAaWYgJG1lZGlhLXF1ZXJ5ID09IGRlc2t7XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JGRlc2stc3RhcnQpIHsgQGNvbnRlbnQ7IH1cblxuICB9XG5cbiAgQGlmICRtZWRpYS1xdWVyeSA9PSBkZXNrLXdpZGV7XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRkZXNrLXdpZGUtc3RhcnQpIHsgQGNvbnRlbnQ7IH1cblxuICB9XG5cbiAgQGlmICRtZWRpYS1xdWVyeSA9PSBoaS1yZXMge1xuXG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxLjUpLFxuICAgIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMy8yKSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMS41KSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuNSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuXG4gIH1cblxufVxuIiwiLyoqXG4gKiBGb3JjZSBvdmVybHkgbG9uZyBzcGFucyBvZiB0ZXh0IHRvIHRydW5jYXRlLCBlLmcuOlxuICpcbiAgIGBAaW5jbHVkZSB0cnVuY2F0ZSgxMDAlKTtgXG4gKlxuICogV2hlcmUgYCR0cnVuY2F0aW9uLWJvdW5kYXJ5YCBpcyBhIHVuaXRlZCBtZWFzdXJlbWVudC5cbiAqL1xuQG1peGluIHRydW5jYXRlKCR0cnVuY2F0aW9uLWJvdW5kYXJ5KXtcbiAgbWF4LXdpZHRoOiR0cnVuY2F0aW9uLWJvdW5kYXJ5O1xuICB3aGl0ZS1zcGFjZTpub3dyYXA7XG4gIG92ZXJmbG93OmhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzplbGxpcHNpcztcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRBTEwgQkFTRSBJTVBPUlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcInJlc2V0XCI7XG5AaW1wb3J0IFwibm9ybWFsaXplXCI7XG5cbkBpbXBvcnQgXCJkb2N1bWVudFwiO1xuXG5AaW1wb3J0IFwiY29kZVwiO1xuQGltcG9ydCBcImZvcm1zXCI7XG5AaW1wb3J0IFwiZ2VuZXJhbC10eXBvZ3JhcGh5XCI7XG5AaW1wb3J0IFwiaGVhZGluZ3NcIjtcbkBpbXBvcnQgXCJpbWFnZXNcIjtcbkBpbXBvcnQgXCJsaXN0c1wiO1xuQGltcG9ydCBcInBhcmFncmFwaHNcIjtcbkBpbXBvcnQgXCJxdW90ZXNcIjtcbkBpbXBvcnQgXCJzbWFsbHByaW50XCI7XG5AaW1wb3J0IFwidGFibGVzXCI7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkUkVTRVRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEEgbW9yZSBjb25zaWRlcmVkIHJlc2V0OyBtb3JlIG9mIGEgcmVzdGFydC4uLlxuICogQXMgcGVyOiBjc3N3aXphcmRyeS5jb20vMjAxMS8xMC9yZXNldC1yZXN0YXJ0ZWRcbiAqL1xuXG5AaWYgJGdsb2JhbC1ib3JkZXItYm94ID09IHRydWV7XG4gIC8qKlxuICAqIExldOKAmXMgbWFrZSB0aGUgYm94IG1vZGVsIGFsbCBuaWNlLCBzaGFsbCB3ZS4uLj9cbiAgKi9cbiAgKntcbiAgICAmLFxuICAgICY6YmVmb3JlLFxuICAgICY6YWZ0ZXJ7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7fVxuICB9XG59XG5cbi8qKlxuICogVGhlIHVzdWFsLi4uXG4gKi9cbmgxLGgyLGgzLGg0LGg1LGg2LFxucCxibG9ja3F1b3RlLHByZSxcbmRsLGRkLG9sLHVsLFxuZm9ybSxmaWVsZHNldCxsZWdlbmQsXG50YWJsZSx0aCx0ZCxjYXB0aW9uLFxuaHJ7XG4gIG1hcmdpbjowO1xuICBwYWRkaW5nOjA7XG59XG5cbi8qKlxuICogR2l2ZSBhIGhlbHAgY3Vyc29yIHRvIGVsZW1lbnRzIHRoYXQgZ2l2ZSBleHRyYSBpbmZvIG9uIGA6aG92ZXJgLlxuICovXG5hYmJyW3RpdGxlXSxkZm5bdGl0bGVde1xuICBjdXJzb3I6aGVscDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdW5kZXJsaW5lcyBmcm9tIHBvdGVudGlhbGx5IHRyb3VibGVzb21lIGVsZW1lbnRzLlxuICovXG51LGluc3tcbiAgdGV4dC1kZWNvcmF0aW9uOm5vbmU7XG59XG5cbi8qKlxuICogQXBwbHkgZmF1eCB1bmRlcmxpbmUgdmlhIGBib3JkZXItYm90dG9tYC5cbiAqL1xuaW5ze1xuICBib3JkZXItYm90dG9tOjFweCBzb2xpZDtcbn1cblxuLyoqXG4gKiBTbyB0aGF0IGBhbHRgIHRleHQgaXMgdmlzdWFsbHkgb2Zmc2V0IGlmIGltYWdlcyBkb27igJl0IGxvYWQuXG4gKi9cbmltZ3tcbiAgZm9udC1zdHlsZTppdGFsaWM7XG59XG5cbi8qKlxuICogR2l2ZSBmb3JtIGVsZW1lbnRzIHNvbWUgY3Vyc29yIGludGVyYWN0aW9ucy4uLlxuICovXG5sYWJlbCxcbmlucHV0LFxudGV4dGFyZWEsXG5idXR0b24sXG5zZWxlY3QsXG5vcHRpb257XG4gIGN1cnNvcjpwb2ludGVyO1xufVxuICAudGV4dC1pbnB1dDphY3RpdmUsXG4gIC50ZXh0LWlucHV0OmZvY3VzLFxuICB0ZXh0YXJlYTphY3RpdmUsXG4gIHRleHRhcmVhOmZvY3Vze1xuICAgIGN1cnNvcjp0ZXh0O1xuICAgIG91dGxpbmU6bm9uZTtcbiAgfVxuIiwiLyohIG5vcm1hbGl6ZS5jc3MgdjMuMC4zIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyBhbmQgSUUgdGV4dCBzaXplIGFkanVzdCBhZnRlciBkZXZpY2Ugb3JpZW50YXRpb24gY2hhbmdlLFxuICogICAgd2l0aG91dCBkaXNhYmxpbmcgdXNlciB6b29tLlxuICovXG5cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsgLyogMSAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgZGVmYXVsdCBtYXJnaW4uXG4gKi9cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLyogSFRNTDUgZGlzcGxheSBkZWZpbml0aW9uc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYW55IEhUTUw1IGVsZW1lbnQgaW4gSUUgOC85LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBkZXRhaWxzYCBvciBgc3VtbWFyeWAgaW4gSUUgMTAvMTFcbiAqIGFuZCBGaXJlZm94LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBtYWluYCBpbiBJRSAxMS5cbiAqL1xuXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbm1haW4sXG5tZW51LFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5cbmF1ZGlvLFxuY2FudmFzLFxucHJvZ3Jlc3MsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBQcmV2ZW50IGRpc3BsYXlpbmcgYGF1ZGlvYCB3aXRob3V0IGNvbnRyb2xzIGluIE1vYmlsZSBTYWZhcmkgNC81LzYvNy5cbiAqL1xuXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLlxuICogSGlkZSB0aGUgYHRlbXBsYXRlYCBlbGVtZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICovXG5cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBMaW5rc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSBvZiBmb2N1c2VkIGVsZW1lbnRzIHdoZW4gdGhleSBhcmUgYWxzbyBpbiBhblxuICogYWN0aXZlL2hvdmVyIHN0YXRlLlxuICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7XG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IHN0eWxpbmcgb2YgYGFiYnJbdGl0bGVdYC5cbiAqIDEuIENvcnJlY3Qgc3R5bGluZyBpbiBGaXJlZm94IDM5IGFuZCBPcGVyYSAxMi5cbiAqIDIuIENvcnJlY3QgbWlzc2luZyBzdHlsaW5nIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICovXG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBzdHlsaW5nIG9mIGIgYW5kIHN0cm9uZy5cbiAqIDEuIENvcnJlY3QgZHVwbGljYXRlIGFwcGxpY2F0aW9uIG9mIGBib2xkZXJgIGluIFNhZmFyaSA2LjAuMi5cbiAqIDIuIENvcnJlY3Qgc3R5bGUgc2V0IHRvIGBib2xkYCBpbiBFZGdlIDEyKywgU2FmYXJpIDYuMissIGFuZCBDaHJvbWUgMTgrLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogaW5oZXJpdDsgLyogMSAqL1xufVxuXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqL1xuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqL1xuXG5tYXJrIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDtcbiAgY29sb3I6ICMwMDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYW5kIHZhcmlhYmxlIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuLyoqXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBhZmZlY3RpbmcgYGxpbmUtaGVpZ2h0YCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbWcge1xuICBib3JkZXI6IDA7XG59XG5cbi8qKlxuICogQ29ycmVjdCBvdmVyZmxvdyBub3QgaGlkZGVuIGluIElFIDkvMTAvMTEuXG4gKi9cblxuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpLlxuICovXG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgc3R5bGluZyBvZiBgaHJgLlxuICogMS4gQ29ycmVjdCBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBGaXJlZm94LlxuICogMi4gQ29ycmVjdCBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAvMTEgYW5kIEVkZ2UgMTIuXG4gKi9cblxuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xuICBoZWlnaHQ6IDA7IC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5wcmUge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQtc2l6ZSBmb3IgcHJlZm9ybWF0dGVkIHRleHQuXG4gKiAyLiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuXG4vKipcbiAqIDEuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuXG4gKiAyLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBmb250OiBpbmhlcml0OyAvKiAxICovXG4gIG1hcmdpbjogMDsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLzExLlxuICovXG5cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXG4gKiBDb3JyZWN0IGBidXR0b25gIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3gsIElFIDgvOS8xMC8xMSwgYW5kIE9wZXJhLlxuICogQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbiAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4gKi9cblxuYnV0dG9uLFxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCAvKiAxICovXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyOyAvKiAzICovXG59XG5cbi8qKlxuICogUmUtc2V0IGRlZmF1bHQgY3Vyc29yIGZvciBkaXNhYmxlZCBlbGVtZW50cy5cbiAqL1xuXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIGJvcmRlciBpbiBGaXJlZm94IDQrLlxuICovXG5cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG4vKipcbiAqIFJlc3RvcmUgZm9jdXMgc3R5bGUgaW4gRmlyZWZveCA0KyAodW5zZXQgYnkgYSBydWxlIGFib3ZlKVxuICovXG5cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcbmlucHV0Oi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0O1xufVxuXG4vKipcbiAqIEFkZHJlc3MgRmlyZWZveCA0KyBzZXR0aW5nIGBsaW5lLWhlaWdodGAgb24gYGlucHV0YCB1c2luZyBgIWltcG9ydGFudGAgaW5cbiAqIHRoZSBVQSBzdHlsZXNoZWV0LlxuICovXG5cbmlucHV0IHtcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbn1cblxuLyoqXG4gKiBJdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IGRvbid0IGF0dGVtcHQgdG8gc3R5bGUgdGhlc2UgZWxlbWVudHMuXG4gKiBGaXJlZm94J3MgaW1wbGVtZW50YXRpb24gZG9lc24ndCByZXNwZWN0IGJveC1zaXppbmcsIHBhZGRpbmcsIG9yIHdpZHRoLlxuICpcbiAqIDEuIEFkZHJlc3MgYm94IHNpemluZyBzZXQgdG8gYGNvbnRlbnQtYm94YCBpbiBJRSA4LzkvMTAuXG4gKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LzEwLlxuICovXG5cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cbiAgcGFkZGluZzogMDsgLyogMiAqL1xufVxuXG4vKipcbiAqIEZpeCB0aGUgY3Vyc29yIHN0eWxlIGZvciBDaHJvbWUncyBpbmNyZW1lbnQvZGVjcmVtZW50IGJ1dHRvbnMuIEZvciBjZXJ0YWluXG4gKiBgZm9udC1zaXplYCB2YWx1ZXMgb2YgdGhlIGBpbnB1dGAsIGl0IGNhdXNlcyB0aGUgY3Vyc29yIHN0eWxlIG9mIHRoZVxuICogZGVjcmVtZW50IGJ1dHRvbiB0byBjaGFuZ2UgZnJvbSBgZGVmYXVsdGAgdG8gYHRleHRgLlxuICovXG5cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYGFwcGVhcmFuY2VgIHNldCB0byBgc2VhcmNoZmllbGRgIGluIFNhZmFyaSBhbmQgQ2hyb21lLlxuICovXG5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIFJlc3RvcmUgZm9udCB3ZWlnaHQgKHVuc2V0IGJ5IGEgcnVsZSBhYm92ZSkuXG4gKiBOT1RFOiB0aGUgZGVmYXVsdCBjYW5ub3Qgc2FmZWx5IGJlIGNoYW5nZWQgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC5cbiAqL1xuXG5vcHRncm91cCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgJERPQ1VNRU5UXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaHRtbHtcbiAgLypcbiAgICogQ2FuJ3QgdXNlIHJlbGF0aXZlIHVuaXRzIG9uIGh0bWwgZHVlIHRvIGJ1ZyBvblxuICAgKiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAgICogQ29kZVBlbjogaHR0cDovL2NvZGVwZW4uaW8vbGFycnlib3RoYS9wZW4vd0tZWVhFXG4gICAqIENocm9tZSBCdWcgVHJhY2tlcjogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMxOTYyMyNjMTZcbiAgICovXG4gIC8vIGZvbnQtc2l6ZTojeygkZnMtYmFzZS8xNnB4KSoxMDAlfTtcblxuICAvKlxuICAgKiBUT0RPOiB1c2UgcmVsYXRpdmUgdW5pdCBvbmNlIENocm9tZSBidWcgaXMgZml4ZWRcbiAgICovXG4gIGZvbnQtc2l6ZTogJGZzLWJhc2U7XG4gIG1pbi1oZWlnaHQ6MTAwJTtcbn1cblxuaHRtbCwgYm9keSwgYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1iYXNlLXN0YWNrO1xuICBjb2xvcjogJGJhc2UtdWktY29sb3I7XG59XG5cbi8qKlxuICogRmlyZUZveCBvbiBBbmRyb2lkIGFkZHMgZ3JhZGllbnRzIHRvIHRoZXNlIGVsZW1lbnRzXG4gKiBMZXQncyBlbmQgdGhlIHR5cmFubnlcbiAqL1xuYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG59XG5cbmJvZHkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBmb250LXNpemU6IDFlbTtcbiAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC1yYXRpbztcbiAgbWFyZ2luOiAwO1xufVxuXG4vKlxuICogUmVtb3ZlIHRleHQtc2hhZG93IGluIHNlbGVjdGlvbiBoaWdobGlnaHQ6IGg1YnAuY29tL2lcbiAqIFRoZXNlIHNlbGVjdGlvbiBkZWNsYXJhdGlvbnMgaGF2ZSB0byBiZSBzZXBhcmF0ZVxuICovXG5cbjo6LW1vei1zZWxlY3Rpb24ge1xuICBiYWNrZ3JvdW5kOiAkc2VsZWN0aW9uLWNvbG9yO1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XG59XG46OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICRzZWxlY3Rpb24tY29sb3I7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LXNoYWRvdzogbm9uZTtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRDT0RFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBVc2UgYW4gZXhwbGljaXQgZm9udCBzdGFjayB0byBlbnN1cmUgYnJvd3NlcnMgcmVuZGVyIGNvcnJlY3QgYGxpbmUtaGVpZ2h0YC5cbiAqL1xucHJle1xuICBvdmVyZmxvdzphdXRvO1xufVxuICBwcmUgbWFya3tcbiAgICBiYWNrZ3JvdW5kOm5vbmU7XG4gICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQ7XG4gICAgY29sb3I6aW5oZXJpdDtcbiAgfVxuXG5AaWYgJGFkdmFuY2VkLWNvZGUge1xuLyoqXG4gKiBBZGQgY29tbWVudHMgdG8geW91ciBjb2RlIGV4YW1wbGVzLCBlLmcuOlxuICpcbiAgIDxjb2RlPiZsdDsvZGl2Jmd0OzxzcGFuIGNsYXNzPWNvZGUtY29tbWVudD4mbHQ7IS0tIC93cmFwcGVyIC0tJmd0Ozwvc3Bhbj48L2NvZGU+XG4gKlxuICovXG4uY29kZS1jb21tZW50e1xuICAvKipcbiAgICogT3ZlcnJpZGUgdGhpcyBzZXR0aW5nIGluIHlvdXIgdGhlbWUgc3R5bGVzaGVldFxuICAgKi9cbiAgb3BhY2l0eTowLjc1O1xuICBmaWx0ZXI6YWxwaGEob3BhY2l0eT03NSk7XG59XG5cblxuLyoqXG4gKiBZb3UgY2FuIGFkZCBsaW5lIG51bWJlcnMgdG8geW91ciBjb2RlIGV4YW1wbGVzIGJ1dCBiZSB3YXJuZWQsIGl0IHJlcXVpcmVzXG4gKiBzb21lIHByZXR0eSBmdW5reSBsb29raW5nIG1hcmt1cCwgZS5nLjpcbiAqXG4gICA8b2wgY2xhc3M9bGluZS1udW1iZXJzPlxuICAgICA8bGk+PGNvZGU+Lm5hdns8L2NvZGU+PC9saT5cbiAgICAgPGxpPjxjb2RlPiAgbGlzdC1zdHlsZTpub25lOzwvY29kZT48L2xpPlxuICAgICA8bGk+PGNvZGU+ICBtYXJnaW4tbGVmdDowOzwvY29kZT48L2xpPlxuICAgICA8bGk+PGNvZGU+fTwvY29kZT48L2xpPlxuICAgICA8bGk+PGNvZGU+ICAubmF2ID4gbGksPC9jb2RlPjwvbGk+XG4gICAgIDxsaT48Y29kZT4gICAgLm5hdiA+IGxpID4gYXs8L2NvZGU+PC9saT5cbiAgICAgPGxpPjxjb2RlPiAgICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrOzwvY29kZT48L2xpPlxuICAgICA8bGk+PGNvZGU+ICAgICAgICpkaXNwbGF5OmlubGluZS1ibG9jazs8L2NvZGU+PC9saT5cbiAgICAgPGxpPjxjb2RlPiAgICAgIHpvb206MTs8L2NvZGU+PC9saT5cbiAgICAgPGxpPjxjb2RlPiAgICB9PC9jb2RlPjwvbGk+XG4gICA8L29sPlxuICpcbiAqIDEuIE1ha2UgdGhlIGxpc3QgbG9vayBsaWtlIGNvZGUuXG4gKiAyLiBHaXZlIHRoZSBsaXN0IGZsdXNoIG51bWJlcnMgd2l0aCBhIGxlYWRpbmcgemVyby5cbiAqIDMuIE1ha2Ugc3VyZSBsaW5lcyBvZiBjb2RlIGRvbuKAmXQgd3JhcC5cbiAqIDQuIEdpdmUgdGhlIGNvZGUgZm9ybSBieSBmb3JjaW5nIHRoZSBgY29kZWAgdG8gaG9ub3VyIHdoaXRlLXNwYWNlLlxuICovXG4ubGluZS1udW1iZXJze1xuICBmb250LWZhbWlseTptb25vc3BhY2UsIHNlcmlmOyAgICAgICAgICAgLyogWzFdICovXG4gIGxpc3Qtc3R5bGU6ZGVjaW1hbC1sZWFkaW5nLXplcm8gaW5zaWRlOyAvKiBbMl0gKi9cbiAgd2hpdGUtc3BhY2U6bm93cmFwOyAgICAgICAgICAgICAgICAgICAgIC8qIFszXSAqL1xuICBvdmVyZmxvdzphdXRvOyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogWzNdICovXG4gIG1hcmdpbi1sZWZ0OjA7XG59XG4gIC5saW5lLW51bWJlcnMgY29kZXtcbiAgICB3aGl0ZS1zcGFjZTpwcmU7ICAgICAgICAgIC8qIFs0XSAqL1xuICB9XG59Ly8gZW5kaWZcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICRGT1JNU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICpcbiAqIERlbW86IGpzZmlkZGxlLm5ldC9pbnVpdGNzcy9NaEhIVVxuICpcbiAqL1xuZmllbGRzZXR7XG4gIHBhZGRpbmc6JGJhc2Utc3BhY2luZy11bml0O1xufVxuXG5cbi8qKlxuICogVGV4dCBpbnB1dHNcbiAqXG4gKiBJbnN0ZWFkIG9mIGEgYFt0eXBlXWAgc2VsZWN0b3IgZm9yIGVhY2gga2luZCBvZiBmb3JtIGlucHV0LCB3ZSBqdXN0IHVzZSBhXG4gKiBjbGFzcyB0byB0YXJnZXQgYW55L2V2ZXJ5IG9uZSwgZS5nLjpcbiAgIDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9dGV4dC1pbnB1dD5cbiAgIDxpbnB1dCB0eXBlPWVtYWlsIGNsYXNzPXRleHQtaW5wdXQ+XG4gICA8aW5wdXQgdHlwZT1wYXNzd29yZCBjbGFzcz10ZXh0LWlucHV0PlxuICpcbiAqL1xuLnRleHQtaW5wdXQsXG50ZXh0YXJlYXtcbiAgLyoqXG4gICAqIFN0eWxlIHRoZXNlIHZpYSB5b3VyIHRoZW1lIHN0eWxlc2hlZXQuXG4gICAqL1xufVxuXG5cbi8qKlxuICogUmFkaW9zIGFuZCBDaGVja2JveGVzXG4gKlxuICogTWFrZSByYWRpb3MgYW5kIGNoZWNrYm94ZXMgYXBwZWFyIGNsaWNrYWJsZVxuICovXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0sXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xuXHRjdXJzb3I6IHBvaW50ZXI7XG5cdGJvcmRlcjogbm9uZTtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG5cdFx0JFNIQVJFRFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogV2hlcmUgYG1hcmdpbi1ib3R0b21gIGlzIGNvbmNlcm5lZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZVxuICogYmFzZSBsaW5lLWhlaWdodC4gVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCBhIGNvbnNpc3RlbnQgdmVydGljYWwgcmh5dGhtLlxuICogQXMgcGVyOiBjc3N3aXphcmRyeS5jb20vMjAxMi8wNi9zaW5nbGUtZGlyZWN0aW9uLW1hcmdpbi1kZWNsYXJhdGlvbnNcbiAqL1xuLyoqXG4gKiBCYXNlIGVsZW1lbnRzXG4gKi9cbmgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxcbnVsLG9sLGRsLFxuYmxvY2txdW90ZSxwLGFkZHJlc3MsXG50YWJsZSxcbmZpZWxkc2V0LGZpZ3VyZSxcbnByZSB7XG5cdG1hcmdpbi10b3A6IDA7XG5cdEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0KTtcbn1cblxuXG5cbi8qKlxuICogYGhyYCBlbGVtZW50cyBvbmx5IHRha2UgdXAgYSBmZXcgcGl4ZWxzLCBzbyB3ZSBuZWVkIHRvIGdpdmUgdGhlbSBzcGVjaWFsXG4gKiB0cmVhdG1lbnQgcmVnYXJkaW5nIHZlcnRpY2FsIHJoeXRobS5cbiAqL1xuaHIgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1ib3R0b20sICRiYXNlLXNwYWNpbmctdW5pdCk7fVxuXG5cbi8qKlxuICogV2hlcmUgYG1hcmdpbi1sZWZ0YCBpcyBjb25jZXJuZWQgd2Ugd2FudCB0byB0cnkgYW5kIGluZGVudCBjZXJ0YWluIGVsZW1lbnRzXG4gKiBieSBhIGNvbnNpc3RlbnQgYW1vdW50LiBEZWZpbmUgdGhhdCBhbW91bnQgb25jZSwgaGVyZS5cbiAqL1xudWwsb2wsZGQgeyBtYXJnaW4tbGVmdDogMS41ZW07fVxuXG4iLCIvLyBUaGlzIG1peGluIG91dHB1dHMgYSBwcm9wZXJ0eSB3aXRoIHJlbSB1bml0cyBhbmQgYSBweCBmYWxsYmFjay5cbi8vIFZhbHVlcyBwYXNzZWQgd2l0aG91dCB1bml0cyBhcmUgdXNlZCBhcyBtdWx0aXBsaWVycyBmb3IgdGhlIGZpbmFsXG4vLyByZW0gYW5kIHB4IHZhbHVlcywgYWxsIG90aGVyIHVuaXRzIGFyZSBvdXRwdXQgd2l0aG91dCBtb2RpZmljYXRpb24uXG4vLyAkZnMtYmFzZSByZXByZXNlbnRzIHRoZSByb290IHZhbHVlIG9mIHRoZSBkb2N1bWVudCBmb250LXNpemVcbi8vIGluIHBpeGVscy5cbi8vXG4vLyBpLmUuIGh0bWwgeyBmb250LXNpemU6IDEwMCU7fSAvLyAtPiAxNnB4XG5cbi8vIFVzYWdlOlxuLy8gQGluY2x1ZGUgcHgtYW5kLXJlbShbcHJvcGVydHldLCBbbXVsdGlwbGllciB8IGV4cGxpY2l0IHZhbHVlXSBbLCAuLi5dKTtcblxuLy8gRXhhbXBsZSAxOlxuLy9cbi8vICRmcy1iYXNlOiAxNnB4O1xuLy9cbi8vIC5tYXJnaW4geyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbiwgMik7fVxuLy9cbi8vIGJlY29tZXNcbi8vXG4vLyAubWFyZ2luIHtcbi8vICBtYXJnaW46IDMycHg7XG4vLyAgbWFyZ2luOiAycmVtO1xuLy8gfVxuXG4vLyBFeGFtcGxlIDI6XG4vL1xuLy8gJGZzLWJhc2U6IDE2cHg7XG4vL1xuLy8gLnBhZGRpbmcgeyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmcsIDEgMiUgMS41ZW0pO31cbi8vXG4vLyBiZWNvbWVzXG4vL1xuLy8gLnBhZGRpbmcge1xuLy8gIHBhZGRpbmc6IDE2cHggMiUgMS41ZW07XG4vLyAgcGFkZGluZzogMXJlbSAyJSAxLjVlbTtcbi8vIH1cblxuQGZ1bmN0aW9uIGZpeDhfZ2V0X3B4X2FuZF9yZW1fdmFsKCR2YWwpIHtcbiAgJG91dHB1dDogKCk7XG5cbiAgQGlmIHR5cGUtb2YoJHZhbCkgPT0gJ3N0cmluZycge1xuICAgIEBpZiAkdmFsID09ICdhdXRvJyBvciAkdmFsID09ICchaW1wb3J0YW50JyB7XG4gICAgICAkb3V0cHV0OiBqb2luKCR2YWwsICR2YWwpO1xuICAgICAgQHJldHVybiAkb3V0cHV0O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGlmICR2YWwgPT0gMCBvciAkdmFsID09IDBweCB7XG4gICAgICAkb3V0cHV0OiBqb2luKDAsIDApO1xuICAgIH0gQGVsc2UgaWYgdW5pdGxlc3MoJHZhbCkge1xuICAgICAgJG91dHB1dDogam9pbigkdmFsICogJGZzLWJhc2UsICR2YWwgKyByZW0pO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJG91dHB1dDogam9pbigkdmFsLCAkdmFsKTtcbiAgICB9XG4gICAgQHJldHVybiAkb3V0cHV0O1xuICB9XG5cbiAgQHdhcm4gXCIjeyR2YWx9IGlzIG5vdCBhIHZhbGlkIHZhbHVlXCI7XG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbkBtaXhpbiBweC1hbmQtcmVtKCRwcm9wLCAkdmFscykge1xuICAkcHgtbGlzdDogKCk7XG4gICRyZW0tbGlzdDogKCk7XG5cbiAgQGVhY2ggJHZhbCBpbiAkdmFscyB7XG4gICAgJGNhbGNzOiBmaXg4X2dldF9weF9hbmRfcmVtX3ZhbCgkdmFsKTtcbiAgICAkcHgtbGlzdDogYXBwZW5kKCRweC1saXN0LCBudGgoJGNhbGNzLCAxKSk7XG4gICAgJHJlbS1saXN0OiBhcHBlbmQoJHJlbS1saXN0LCBudGgoJGNhbGNzLCAyKSk7XG4gIH1cblxuICAjeyRwcm9wfTogJHB4LWxpc3Q7XG4gICN7JHByb3B9OiAkcmVtLWxpc3Q7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkSEVBRElOR1NcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEFzIHBlcjogY3Nzd2l6YXJkcnkuY29tLzIwMTIvMDIvcHJhZ21hdGljLXByYWN0aWNhbC1mb250LXNpemluZy1pbi1jc3NcbiAqXG4gKiBXaGVuIHdlIGRlZmluZSBhIGhlYWRpbmcgd2UgYWxzbyBkZWZpbmUgYSBjb3JyZXNwb25kaW5nIGNsYXNzIHRvIGdvIHdpdGggaXQuXG4gKiBUaGlzIGFsbG93cyB1cyB0byBhcHBseSwgc2F5LCBgY2xhc3M9ZnMtLWgxYCB0byBhIGBoM2A7IGEgZG91YmxlLXN0cmFuZGVkXG4gKiBoZWFkaW5nIGhpZXJhcmNoeS5cbiAqL1xuJWZzLS1oMSB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDEpO31cbmgxLCAuZnMtLWgxIHsgQGV4dGVuZCAlZnMtLWgxO31cblxuJWZzLS1oMiB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDIpO31cbmgyLCAuZnMtLWgyIHsgQGV4dGVuZCAlZnMtLWgyO31cblxuJWZzLS1oMyB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDMpO31cbmgzLCAuZnMtLWgzIHsgQGV4dGVuZCAlZnMtLWgzO31cblxuJWZzLS1oNCB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDQpO31cbmg0LCAuZnMtLWg0IHsgQGV4dGVuZCAlZnMtLWg0O31cblxuJWZzLS1oNSB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDUpO31cbmg1LCAuZnMtLWg1IHsgQGV4dGVuZCAlZnMtLWg1O31cblxuJWZzLS1oNiB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDYpO31cbmg2LCAuZnMtLWg2IHsgQGV4dGVuZCAlZnMtLWg2O31cblxuXG5cblxuXG4vKipcbiAqIEEgc2VyaWVzIG9mIGNsYXNzZXMgZm9yIHNldHRpbmcgbWFzc2l2ZSB0eXBlOyBmb3IgdXNlIGluIGhlcm9lcywgbWFzdGhlYWRzLFxuICogcHJvbW9zLCBldGMuXG4gKi9cbiVmcy0tZ2lnYSB7IEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtZ2lnYSk7fVxuLmZzLS1naWdhIHsgQGV4dGVuZCAlZnMtLWdpZ2E7fVxuXG4lZnMtLW1lZ2EgeyBAaW5jbHVkZSBmb250LXNpemUoJGZzLW1lZ2EpO31cbi5mcy0tbWVnYSB7IEBleHRlbmQgJWZzLS1tZWdhO31cblxuJWZzLS1raWxvIHsgQGluY2x1ZGUgZm9udC1zaXplKCRmcy1raWxvKTt9XG4uZnMtLWtpbG8geyBAZXh0ZW5kICVmcy0ta2lsbzt9XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRJTUFHRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIERlbW86IGpzZmlkZGxlLm5ldC9pbnVpdGNzcy95TXR1clxuICovXG4vKlxuICogUHJldmVudCBpbWFnZXMgYW5kIGVtYmVkcyBmcm9tIGV4Y2VlZGluZyB3aWR0aCBvZiBjb250YWluaW5nIGVsZW1lbnRcbiAqIHdpZHRoOjsgYW5kIGhlaWdodDo7IGFib3ZlIGFwcGx5XG4gKi9cbmltZywgZW1iZWQsIG9iamVjdCwgdmlkZW8ge1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiBJbWFnZXMgaW4gYGZpZ3VyZWAgZWxlbWVudHMuXG4gKi9cbmZpZ3VyZSA+IGltZ3tcblx0ZGlzcGxheTpibG9jaztcbn1cblxuXG5AaWYgJGFkdmFuY2VkLWltYWdlcyB7XG4vKipcbiAqIFJvdW5kZWQgaW1hZ2VzLlxuICovXG4uaW1nLS1yb3VuZCB7IGJvcmRlci1yYWRpdXM6JGJyYW5kLXJvdW5kOyB9XG5cblxuLyoqXG4gKiBJbWFnZSBwbGFjZW1lbnQgdmFyaWF0aW9ucy5cbiAqL1xuLmltZy0tcmlnaHR7XG4gICAgZmxvYXQ6cmlnaHQ7XG4gICAgbWFyZ2luLWJvdHRvbTokYmFzZS1zcGFjaW5nLXVuaXQ7XG4gICAgbWFyZ2luLWxlZnQ6JGJhc2Utc3BhY2luZy11bml0O1xufVxuLmltZy0tbGVmdHtcbiAgICBmbG9hdDpsZWZ0O1xuICAgIG1hcmdpbi1yaWdodDokYmFzZS1zcGFjaW5nLXVuaXQ7XG4gICAgbWFyZ2luLWJvdHRvbTokYmFzZS1zcGFjaW5nLXVuaXQ7XG59XG4uaW1nLS1jZW50ZXJ7XG4gICAgZGlzcGxheTpibG9jaztcbiAgICBtYXJnaW4tcmlnaHQ6YXV0bztcbiAgICBtYXJnaW4tYm90dG9tOiRiYXNlLXNwYWNpbmctdW5pdDtcbiAgICBtYXJnaW4tbGVmdDphdXRvO1xufVxuXG5cbi8qKlxuICogS2VlcCB5b3VyIGltYWdlcyBvbiB5b3VyIGJhc2VsaW5lLlxuICpcbiAqIFBsZWFzZSBub3RlLCB0aGVzZSB3aWxsIG5vdCB3b3JrIHRvbyBuaWNlbHkgd2l0aCBmbHVpZCBpbWFnZXMgYW5kIHdpbGxcbiAqIGRpc3RvcnQgd2hlbiByZXNpemVkIGJlbG93IGEgY2VydGFpbiB3aWR0aC4gVXNlIHdpdGggY2F1dGlvbi5cbiAqL1xuLmltZy0tc2hvcnR7XG4gICAgaGVpZ2h0OjUgKiAkYmFzZS1zcGFjaW5nLXVuaXQ7XG59XG4uaW1nLS1tZWRpdW17XG4gICAgaGVpZ2h0OjEwICogJGJhc2Utc3BhY2luZy11bml0O1xufVxuLmltZy0tdGFsbHtcbiAgICBoZWlnaHQ6MTUgKiAkYmFzZS1zcGFjaW5nLXVuaXQ7XG59XG59Ly8gZW5kaWZcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJExJU1RTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBSZW1vdmUgdmVydGljYWwgc3BhY2luZyBmcm9tIG5lc3RlZCBsaXN0cy5cbiAqL1xubGl7XG4gICAgPiB1bCxcbiAgICA+IG9se1xuICAgICAgICAgbWFyZ2luLXRvcDowO1xuICAgICAgICAgbWFyZ2luLWJvdHRvbTowO1xuICAgICB9XG59XG5cbi8qKlxuICogSGF2ZSBhIG51bWJlcmVkIGB1bGAgd2l0aG91dCB0aGUgc2VtYW50aWNzIGltcGxpZWQgYnkgdXNpbmcgYW4gYG9sYC5cbiAqL1xuLyp1bCovLm51bWJlcmVkLWxpc3R7XG4gICAgbGlzdC1zdHlsZS10eXBlOmRlY2ltYWw7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRQQVJBR1JBUEhTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBUaGUgYC5sZWRlYCBjbGFzcyBpcyB1c2VkIHRvIG1ha2UgdGhlIGludHJvZHVjdG9yeSB0ZXh0ICh1c3VhbGx5IGEgcGFyYWdyYXBoKVxuICogb2YgYSBkb2N1bWVudCBzbGlnaHRseSBsYXJnZXIuXG4gKi9cbi5sZWRlLFxuLmxlYWR7XG4gICAgQGluY2x1ZGUgZm9udC1zaXplKCRmcy1iYXNlICogMS4xMjUpO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkUVVPVEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBJZiBFbmdsaXNoIHF1b3RlcyBhcmUgc2V0IGluIGBfdmFycy5zY3NzYCwgZGVmaW5lIHRoZW0gaGVyZS5cbiAqL1xuQGlmICRlbmdsaXNoLXF1b3RlcyA9PSB0cnVle1xuICAgICRvcGVuLXF1b3RlOiAgICBcXDIwMUMgIWdsb2JhbDtcbiAgICAkY2xvc2UtcXVvdGU6ICAgXFwyMDFEICFnbG9iYWw7XG59XG5cblxuLyoqXG4gKiBCaWcgdXAgQGJvYmxldDogaHRtbDVkb2N0b3IuY29tL2Jsb2NrcXVvdGUtcS1jaXRlXG4gKi9cblxuLyoqXG4gKiBJbmxpbmUgcXVvdGVzLlxuICovXG5xIHtcbiAgICBxdW90ZXM6XCJcXDIwMThcIiBcIlxcMjAxOVwiIFwiI3skb3Blbi1xdW90ZX1cIiBcIiN7JGNsb3NlLXF1b3RlfVwiO1xuXG4gICAgJjpiZWZvcmV7XG4gICAgICAgIGNvbnRlbnQ6XCJcXDIwMThcIjtcbiAgICAgICAgY29udGVudDpvcGVuLXF1b3RlO1xuICAgIH1cbiAgICAmOmFmdGVye1xuICAgICAgICBjb250ZW50OlwiXFwyMDE5XCI7XG4gICAgICAgIGNvbnRlbnQ6Y2xvc2UtcXVvdGU7XG4gICAgfVxuXG4gICAgcTpiZWZvcmV7XG4gICAgICAgIGNvbnRlbnQ6XCJcXDIwMUNcIjtcbiAgICAgICAgY29udGVudDpvcGVuLXF1b3RlO1xuICAgIH1cbiAgICBxOmFmdGVye1xuICAgICAgICBjb250ZW50OlwiXFwyMDFEXCI7XG4gICAgICAgIGNvbnRlbnQ6Y2xvc2UtcXVvdGU7XG4gICAgfVxufVxuXG4lYmxvY2txdW90ZS0tZmFuY3kge1xuICAgIC8qKlxuICAgICAqIC40ZW0gaXMgcm91Z2hseSBlcXVhbCB0byB0aGUgd2lkdGggb2YgdGhlIG9wZW5pbmcg4oCcIHRoYXQgd2Ugd2lzaCB0byBoYW5nLlxuICAgICAqL1xuICAgIHRleHQtaW5kZW50Oi0wLjQxZW07XG5cbiAgICBxdW90ZXM6XCIjeyRvcGVuLXF1b3RlfVwiIFwiI3skY2xvc2UtcXVvdGV9XCI7XG5cbiAgICBwOmJlZm9yZXtcbiAgICAgICAgY29udGVudDpcIiN7JG9wZW4tcXVvdGV9XCI7XG4gICAgICAgIGNvbnRlbnQ6b3Blbi1xdW90ZTtcbiAgICB9XG4gICAgcDphZnRlcntcbiAgICAgICAgY29udGVudDpcIlwiO1xuICAgICAgICBjb250ZW50Om5vLWNsb3NlLXF1b3RlO1xuICAgIH1cbiAgICBwOmxhc3Qtb2YtdHlwZTphZnRlcntcbiAgICAgICAgY29udGVudDpcIiN7JGNsb3NlLXF1b3RlfVwiO1xuICAgICAgICBjb250ZW50OmNsb3NlLXF1b3RlO1xuICAgIH1cblxuICAgIHE6YmVmb3Jle1xuICAgICAgICBjb250ZW50OlwiXFwyMDE4XCI7XG4gICAgICAgIGNvbnRlbnQ6b3Blbi1xdW90ZTtcbiAgICB9XG4gICAgcTphZnRlcntcbiAgICAgICAgY29udGVudDpcIlxcMjAxOVwiO1xuICAgICAgICBjb250ZW50OmNsb3NlLXF1b3RlO1xuICAgIH1cbn1cblxuXG4vKipcbiAqXG4gICA8YmxvY2txdW90ZT5cbiAgICAgICA8cD5JbnNhbml0eTogZG9pbmcgdGhlIHNhbWUgdGhpbmcgb3ZlciBhbmQgb3ZlciBhZ2FpbiBhbmQgZXhwZWN0aW5nXG4gICAgICAgZGlmZmVyZW50IHJlc3VsdHMuPC9wPlxuICAgICAgIDxiIGNsYXNzPXNvdXJjZT5BbGJlcnQgRWluc3RlaW48L2I+XG4gICA8L2Jsb2NrcXVvdGU+XG4gKlxuICovXG5ibG9ja3F1b3RlIHtcbiAgICBwOmZpcnN0LW9mLXR5cGV7XG4gICAgICAgIG1hcmdpbi10b3A6MDtcbiAgICB9XG5cbiAgICBwOmxhc3Qtb2YtdHlwZXtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTowO1xuICAgIH1cbn1cblxuLnNvdXJjZXtcbiAgICBkaXNwbGF5OmJsb2NrO1xuICAgIHRleHQtaW5kZW50OjA7XG5cbiAgICAmOmJlZm9yZXtcbiAgICAgICAgY29udGVudDpcIlxcMjAxNFwiO1xuICAgIH1cbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFNNQUxMUFJJTlRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEEgc2VyaWVzIG9mIGNsYXNzZXMgZm9yIHNldHRpbmcgdGlueSB0eXBlOyBmb3IgdXNlIGluIHNtYWxscHJpbnQgZXRjLlxuICovXG4lZnMtLW1pbGxpIHsgQGluY2x1ZGUgZm9udC1zaXplKCRmcy1taWxsaSk7fVxuLmZzLS1taWxsaSB7IEBleHRlbmQgJWZzLS1taWxsaTt9XG5cbiVmcy0tbWljcm8geyBAaW5jbHVkZSBmb250LXNpemUoJGZzLW1pY3JvKTt9XG4uZnMtLW1pY3JvIHsgQGV4dGVuZCAlZnMtLW1pY3JvO31cblxuJWZzLS1uYW5vXHQgeyBAaW5jbHVkZSBmb250LXNpemUoJGZzLW5hbm8pO31cbi5mcy0tbmFub1x0IHsgQGV4dGVuZCAlZnMtLW5hbm87fVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgJFRBQkxFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogV2UgaGF2ZSBhIGxvdCBhdCBvdXIgZGlzcG9zYWwgZm9yIG1ha2luZyB2ZXJ5IGNvbXBsZXggdGFibGUgY29uc3RydWN0cywgZS5nLjpcbiAqXG4gICA8dGFibGUgY2xhc3M9XCJ0YWJsZS0tYm9yZGVyZWQgIHRhYmxlLS1zdHJpcGVkICB0YWJsZS0tZGF0YVwiPlxuICAgICA8Y29sZ3JvdXA+XG4gICAgICAgPGNvbCBjbGFzcz10MTA+XG4gICAgICAgPGNvbCBjbGFzcz10MTA+XG4gICAgICAgPGNvbCBjbGFzcz10MTA+XG4gICAgICAgPGNvbD5cbiAgICAgPC9jb2xncm91cD5cbiAgICAgPHRoZWFkPlxuICAgICAgIDx0cj5cbiAgICAgICAgIDx0aCBjb2xzcGFuPTM+Rm9vPC90aD5cbiAgICAgICAgIDx0aD5CYXI8L3RoPlxuICAgICAgIDwvdHI+XG4gICAgICAgPHRyPlxuICAgICAgICAgPHRoPkxvcmVtPC90aD5cbiAgICAgICAgIDx0aD5JcHN1bTwvdGg+XG4gICAgICAgICA8dGggY2xhc3M9bnVtZXJpY2FsPkRvbG9yPC90aD5cbiAgICAgICAgIDx0aD5TaXQ8L3RoPlxuICAgICAgIDwvdHI+XG4gICAgIDwvdGhlYWQ+XG4gICAgIDx0Ym9keT5cbiAgICAgICA8dHI+XG4gICAgICAgICA8dGggcm93c3Bhbj0zPlNpdDwvdGg+XG4gICAgICAgICA8dGQ+RG9sb3I8L3RkPlxuICAgICAgICAgPHRkIGNsYXNzPW51bWVyaWNhbD4wMy43ODg8L3RkPlxuICAgICAgICAgPHRkPkxvcmVtPC90ZD5cbiAgICAgICA8L3RyPlxuICAgICAgIDx0cj5cbiAgICAgICAgIDx0ZD5Eb2xvcjwvdGQ+XG4gICAgICAgICA8dGQgY2xhc3M9bnVtZXJpY2FsPjMyLjIxMDwvdGQ+XG4gICAgICAgICA8dGQ+TG9yZW08L3RkPlxuICAgICAgIDwvdHI+XG4gICAgICAgPHRyPlxuICAgICAgICAgPHRkPkRvbG9yPC90ZD5cbiAgICAgICAgIDx0ZCBjbGFzcz1udW1lcmljYWw+NDcuNzk3PC90ZD5cbiAgICAgICAgIDx0ZD5Mb3JlbTwvdGQ+XG4gICAgICAgPC90cj5cbiAgICAgICA8dHI+XG4gICAgICAgICA8dGggcm93c3Bhbj0yPlNpdDwvdGg+XG4gICAgICAgICA8dGQ+RG9sb3I8L3RkPlxuICAgICAgICAgPHRkIGNsYXNzPW51bWVyaWNhbD4wOS42NDA8L3RkPlxuICAgICAgICAgPHRkPkxvcmVtPC90ZD5cbiAgICAgICA8L3RyPlxuICAgICAgIDx0cj5cbiAgICAgICAgIDx0ZD5Eb2xvcjwvdGQ+XG4gICAgICAgICA8dGQgY2xhc3M9bnVtZXJpY2FsPjEyLjExNzwvdGQ+XG4gICAgICAgICA8dGQ+TG9yZW08L3RkPlxuICAgICAgIDwvdHI+XG4gICAgIDwvdGJvZHk+XG4gICA8L3RhYmxlPlxuICpcbiAqL1xudGFibGV7XG4gIHdpZHRoOjEwMCU7XG59XG50aCxcbnRke1xuICBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmcsICRiYXNlLXNwYWNpbmctdW5pdCAvIDQpO1xuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOjQ4MHB4KXtcbiAgICBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmcsICRoYWxmLXNwYWNpbmctdW5pdCk7XG4gIH1cbiAgdGV4dC1hbGlnbjpsZWZ0O1xufVxuXG5AaWYgJGFkdmFuY2VkLXRhYmxlcyB7XG4vKipcbiAqIENlbGwgYWxpZ25tZW50c1xuICovXG5bY29sc3Bhbl17XG4gIHRleHQtYWxpZ246Y2VudGVyO1xufVxuW2NvbHNwYW49XCIxXCJde1xuICB0ZXh0LWFsaWduOmxlZnQ7XG59XG5bcm93c3Bhbl17XG4gIHZlcnRpY2FsLWFsaWduOm1pZGRsZTtcbn1cbltyb3dzcGFuPVwiMVwiXXtcbiAgdmVydGljYWwtYWxpZ246dG9wO1xufVxuLm51bWVyaWNhbHtcbiAgdGV4dC1hbGlnbjpyaWdodDtcbn1cblxuLyoqXG4gKiBJbiB0aGUgSFRNTCBhYm92ZSB3ZSBzZWUgc2V2ZXJhbCBgY29sYCBlbGVtZW50cyB3aXRoIGNsYXNzZXMgd2hvc2UgbnVtYmVyc1xuICogcmVwcmVzZW50IGEgcGVyY2VudGFnZSB3aWR0aCBmb3IgdGhhdCBjb2x1bW4uIFdlIGxlYXZlIG9uZSBjb2x1bW4gZnJlZSBvZiBhXG4gKiBjbGFzcyBzbyB0aGF0IGNvbHVtbiBjYW4gc29hayB1cCB0aGUgZWZmZWN0cyBvZiBhbnkgYWNjaWRlbnRhbCBicmVha2FnZSBpblxuICogdGhlIHRhYmxlLlxuICovXG4udDUgICB7IHdpZHRoOiA1JSB9XG4udDEwICB7IHdpZHRoOjEwJSB9XG4udDEyICB7IHdpZHRoOjEyLjUlIH0gICAvKiAxLzggKi9cbi50MTUgIHsgd2lkdGg6MTUlIH1cbi50MjAgIHsgd2lkdGg6MjAlIH1cbi50MjUgIHsgd2lkdGg6MjUlIH0gICAgIC8qIDEvNCAqL1xuLnQzMCAgeyB3aWR0aDozMCUgfVxuLnQzMyAgeyB3aWR0aDozMy4zMzMlIH0gICAvKiAxLzMgKi9cbi50MzUgIHsgd2lkdGg6MzUlIH1cbi50MzcgIHsgd2lkdGg6MzcuNSUgfSAgIC8qIDMvOCAqL1xuLnQ0MCAgeyB3aWR0aDo0MCUgfVxuLnQ0NSAgeyB3aWR0aDo0NSUgfVxuLnQ1MCAgeyB3aWR0aDo1MCUgfSAgICAgLyogMS8yICovXG4udDU1ICB7IHdpZHRoOjU1JSB9XG4udDYwICB7IHdpZHRoOjYwJSB9XG4udDYyICB7IHdpZHRoOjYyLjUlIH0gICAvKiA1LzggKi9cbi50NjUgIHsgd2lkdGg6NjUlIH1cbi50NjYgIHsgd2lkdGg6NjYuNjY2JSB9ICAgLyogMi8zICovXG4udDcwICB7IHdpZHRoOjcwJSB9XG4udDc1ICB7IHdpZHRoOjc1JSB9ICAgICAvKiAzLzQqL1xuLnQ4MCAgeyB3aWR0aDo4MCUgfVxuLnQ4NSAgeyB3aWR0aDo4NSUgfVxuLnQ4NyAgeyB3aWR0aDo4Ny41JSB9ICAgLyogNy84ICovXG4udDkwICB7IHdpZHRoOjkwJSB9XG4udDk1ICB7IHdpZHRoOjk1JSB9XG5cblxuLyoqXG4gKiBCb3JkZXJlZCB0YWJsZXNcbiAqL1xuLnRhYmxlLS1ib3JkZXJlZHtcblxuICB0aCxcbiAgdGR7XG4gICAgYm9yZGVyOjFweCBzb2xpZCAkYmFzZS11aS1jb2xvcjtcblxuICAgICY6ZW1wdHl7XG4gICAgICBib3JkZXI6bm9uZTtcbiAgICB9XG4gIH1cblxuICB0aGVhZCB0cjpsYXN0LWNoaWxkIHRoe1xuICAgIGJvcmRlci1ib3R0b20td2lkdGg6MnB4O1xuICB9XG5cbiAgdGJvZHkgdHIgdGg6bGFzdC1vZi10eXBle1xuICAgIGJvcmRlci1yaWdodC13aWR0aDoycHg7XG4gIH1cbn1cblxuXG4vKipcbiAqIFN0cmlwZWQgdGFibGVzXG4gKi9cbi50YWJsZS0tc3RyaXBlZHtcblxuICB0Ym9keSB0cjpudGgtb2YtdHlwZShvZGQpe1xuICAgIGJhY2tncm91bmQtY29sb3I6I2ZmYzsgLyogT3ZlcnJpZGUgdGhpcyBjb2xvciBpbiB5b3VyIHRoZW1lIHN0eWxlc2hlZXQgKi9cbiAgfVxufVxuXG5cbi8qKlxuICogRGF0YSB0YWJsZVxuICovXG4udGFibGUtLWRhdGF7XG4gIGZvbnQ6MTJweC8xLjUgc2Fucy1zZXJpZjtcbn1cbn0vLyBlbmRpZlxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQUxMIENPTVBPTkVOVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwiY29sdW1uc1wiO1xuQGltcG9ydCBcIm5hdlwiO1xuQGltcG9ydCBcIm9wdGlvbnNcIjtcbkBpbXBvcnQgXCJwYWdpbmF0aW9uXCI7XG5AaW1wb3J0IFwiYnJlYWRjcnVtYlwiO1xuQGltcG9ydCBcIm1lZGlhXCI7XG5AaW1wb3J0IFwiZmxleC12aWRlb1wiO1xuQGltcG9ydCBcIm1hcmdpbmFsaWFcIjtcbkBpbXBvcnQgXCJibG9jay1saXN0XCI7XG5AaW1wb3J0IFwibWF0cml4XCI7XG5AaW1wb3J0IFwic3BsaXRcIjtcbkBpbXBvcnQgXCJ0aGlzLW9yLXRoaXNcIjtcbkBpbXBvcnQgXCJsaW5rLWNvbXBsZXhcIjtcbkBpbXBvcnQgXCJmbHlvdXRcIjtcbkBpbXBvcnQgXCJhcnJvd3NcIjtcbkBpbXBvcnQgXCJzcHJpdGVcIjtcbkBpbXBvcnQgXCJpY29uLXRleHRcIjtcbkBpbXBvcnQgXCJiZWF1dG9uc1wiO1xuQGltcG9ydCBcImxvemVuZ2VzXCI7XG5AaW1wb3J0IFwicnVsZXNcIjtcbkBpbXBvcnQgXCJzdGF0c1wiO1xuQGltcG9ydCBcImdyZXlib3hcIjtcblxuQGltcG9ydCBcImJ1dHRvbnNcIjtcbkBpbXBvcnQgXCJhbGVydHNcIjtcbkBpbXBvcnQgXCJyYXRpby1vYmplY3RcIjtcbkBpbXBvcnQgXCJ2ZXJ0aWNhbC1jZW50ZXJcIjtcbkBpbXBvcnQgXCJpY29uLWFzLWZvbnRcIjtcbkBpbXBvcnQgXCJpY29uLWFzLWlubGluZS1zdmdcIjtcbkBpbXBvcnQgXCJmb3JtLWFmZml4ZXNcIjtcbkBpbXBvcnQgXCJwcm9ncmVzcy1iYXJzXCI7XG4iLCJAaWYgJHVzZS1idXR0b25zID09IHRydWUge1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRCVVRUT05TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJWJ0bi0tcmVzZXQge1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0YmFja2dyb3VuZC1pbWFnZTogbm9uZTsgLy8gcmVtb3ZlIGdyYWRpZW50IGZyb20gRkYgb24gbW9iaWxlXG5cdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdGxpbmUtaGVpZ2h0OiBub3JtYWw7IC8vIGxldCdzIG1ha2UgYWxsIGJyb3dzZXJzIG1hdGNoIEZGJ3MgIWltcG9ydGFudFxuXHR2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuXHRoZWlnaHQ6IGF1dG87IC8vIGVuc3VyZSBoZWlnaHRzIHNldCBvbiBpbnB1dHMgZG8gbm90IGFmZmVjdCBzdWJtaXQgYnV0dG9uc1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG5cdGJvcmRlcjogMDtcblx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblxuXHQmOmFjdGl2ZSxcblx0Jjpmb2N1cyB7IG91dGxpbmU6bm9uZTt9XG59XG5cbiVidG4ge1xuXHRAZXh0ZW5kICVidG4tLXJlc2V0O1xuXHRjdXJzb3I6IHBvaW50ZXI7XG4gIHRyYW5zaXRpb246IGFsbCAxNTBtcyBlYXNlLWluO1xuXG5cdCYsXG5cdCY6aG92ZXIsXG5cdCY6Zm9jdXMgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7fVxuXG5cdCY6YWN0aXZlLFxuXHQmOmZvY3VzIHsgdHJhbnNpdGlvbjogbm9uZTt9XG5cblx0JltkaXNhYmxlZF0sXG5cdCY6ZGlzYWJsZWQgeyBjdXJzb3I6IGRlZmF1bHQ7fVxufVxuXG4lYnRuLS1zZWxlY3RlZCB7XG4gIGN1cnNvcjogZGVmYXVsdDtcblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgfVxufVxuXG59Ly9lbmRpZlxuIiwiQGlmICR1c2UtcmF0aW8tb2JqZWN0ID09IHRydWUge1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRSQVRJTyBPQkpFQ1RcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEFuIG9iamVjdCB3aGljaCBzY2FsZXMgcHJvcG9ydGlvbmF0ZWx5XG4gKlxuICogaHR0cDovL2JpdC5seS8xOUk4aVI4XG4gKi9cbiVyYXRpby1vYmplY3Qge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgJjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgLy8gZXh0ZW5kIHRoaXMgd2l0aCBwYWRkaW5nLWJvdHRvbTo7IGluIHlvdXIgc3R5bGVzIGFzIHBlciB5b3VyIG9iamVjdCdzIHJlcXVpcmVkXG4gICAgLy8gcmF0aW9cbiAgfVxufVxuXG4gICVyYXRpby1vYmplY3RfX2lubmVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICB9XG5cbn0vL2VuZGlmXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRBTEwgTEFZT1VUXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcImNsZWFyZml4XCI7XG5AaW1wb3J0IFwiZ3JpZHNcIjtcbkBpbXBvcnQgXCJ3aWR0aHNcIjtcbkBpbXBvcnQgXCJwdXNoXCI7XG5AaW1wb3J0IFwicHVsbFwiO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQ0xFQVJGSVhcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIE1pY3JvIGNsZWFyZml4LCBhcyBwZXI6IGNzcy0xMDEub3JnL2FydGljbGVzL2NsZWFyZml4L2xhdGVzdC1uZXctY2xlYXJmaXgtc28tZmFyLnBocFxuICogRXh0ZW5kIHRoZSBjbGVhcmZpeCBjbGFzcyB3aXRoIFNhc3MgdG8gYXZvaWQgdGhlIGAuY2ZgIGNsYXNzIGFwcGVhcmluZyBvdmVyXG4gKiBhbmQgb3ZlciBpbiB5b3VyIG1hcmt1cC5cbiAqL1xuJWNmIHtcblx0JjpiZWZvcmUsXG5cdCY6YWZ0ZXIge1xuXHRcdGNvbnRlbnQ6XCJcIjtcblx0XHRkaXNwbGF5OnRhYmxlO1xuXHRcdGNsZWFyOmJvdGg7XG5cdH1cbn1cblxuLmNmIHsgQGV4dGVuZCAlY2Y7fVxuIiwiQGlmICR1c2UtZ3JpZHMge1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRHUklEU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogRmx1aWQgYW5kIG5lc3RhYmxlIGdyaWQgc3lzdGVtLCBlLmcuOlxuICpcbiAgIDxkaXYgY2xhc3M9XCJnd1wiPlxuICAgICAgIDxkaXYgY2xhc3M9XCJnICBvbmUtdGhpcmRcIj5cbiAgICAgICAgICAgPHA+T25lIHRoaXJkIGdyaWQ8L3A+XG4gICAgICAgPC9kaXY+PCEtLVxuICAgIC0tPjxkaXYgY2xhc3M9XCJnICB0d28tdGhpcmRzXCI+XG4gICAgICAgICAgIDxwPlR3byB0aGlyZHMgZ3JpZDwvcD5cbiAgICAgICA8L2Rpdj48IS0tXG4gICAgLS0+PGRpdiBjbGFzcz1cImcgIG9uZS1oYWxmXCI+XG4gICAgICAgICAgIDxwPk9uZSBoYWxmIGdyaWQ8L3A+XG4gICAgICAgPC9kaXY+PCEtLVxuICAgIC0tPjxkaXYgY2xhc3M9XCJnICBvbmUtcXVhcnRlclwiPlxuICAgICAgICAgICA8cD5PbmUgcXVhcnRlciBncmlkPC9wPlxuICAgICAgIDwvZGl2PjwhLS1cbiAgICAtLT48ZGl2IGNsYXNzPVwiZyAgb25lLXF1YXJ0ZXJcIj5cbiAgICAgICAgICAgPHA+T25lIHF1YXJ0ZXIgZ3JpZDwvcD5cbiAgICAgICA8L2Rpdj5cbiAgIDwvZGl2PlxuICpcbiAqIERlbW86IGpzZmlkZGxlLm5ldC9pbnVpdGNzcy9DTFlVQ1xuICpcbiAqL1xuXG5cbi8qKlxuICogR3JpZCB3cmFwcGVyXG4gKi9cbiVncmlkIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tbGVmdCwgLSRncmlkLWd1dHRlcik7XG5cbiAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgIC5vbGRpZSAmIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgd2lkdGg6IGNhbGMoMTAwJSArICN7JGdyaWQtZ3V0dGVyfWVtKTtcbiAgICB9XG4gIH1cblxuICBAaWYgJHVzZS1mbGV4Ym94LWdyaWQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICB9XG59XG5cbi8qKlxuICogdmVyeSBpbmZyZXF1ZW50bHkgb2NjdXJpbmcgZ3JpZCB3cmFwcGVycyBhcyBjaGlsZHJlbiBvZiBncmlkIHdyYXBwZXJzLlxuICovXG5bY2xhc3MqPVwiZ3dcIl0gPiBbY2xhc3MqPVwiZ3dcIl0geyBtYXJnaW4tbGVmdDogMDt9XG5cbi5ndyB7IEBleHRlbmQgJWdyaWQ7fVxuXG4gIC8qKlxuICAgKiBncmlkIGl0ZW1zXG4gICAqL1xuICAlZ3JpZF9faXRlbSB7XG4gICAgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWxlZnQsICRncmlkLWd1dHRlcik7XG5cbiAgICBAaWYgJHVzZS1sZWdhY3ktZ3JpZCB7XG4gICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgLm9sZGllICYge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRnbG9iYWwtYm9yZGVyLWJveCA9PSBmYWxzZSB7IEBpbmNsdWRlIHZlbmRvcihib3gtc2l6aW5nLCBib3JkZXItYm94KTt9XG4gIH1cblxuICAuZyB7IEBleHRlbmQgJWdyaWRfX2l0ZW07fVxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgY29udGVudCBvZiBhIGNvbHVtbiB0byBvY2N1cHkgdGhlIGZ1bGwgaGVpZ2h0IG9mIHRoZVxuICAgKiBjb2x1bW5cbiAgICpcbiAgICogQ2hpbGQgZGl2IG11c3QgaGF2ZSBmbGV4OiAxOyBvciB3aWR0aDogMTAwJTsgc2V0IHRvIGZpbGwgaG9yaXpvbnRhbFxuICAgKiBzcGFjZVxuICAgKlxuICAgKiBEb2VzIG5vdCB3b3JrIGZvciBsZWdhY3kgYnJvd3NlcnNcbiAgICovXG4gIC5nLS10YWxsIHtcbiAgICBAZXh0ZW5kICVncmlkX19pdGVtO1xuXG4gICAgQGlmICR1c2UtZmxleGJveC1ncmlkIHsgZGlzcGxheTogZmxleDt9XG4gIH1cblxuICAvKipcbiAgICogQ29sdW1ucyB0aGF0IGF1dG9tYXRpY2FsbHkgZmlsbCB0aGUgcmVtYWluaW5nIGhvcml6b250YWwgc3BhY2VcbiAgICpcbiAgICogVG8gYmUgdXNlZCBhcyBpcywgd2l0aG91dCBjb2x1bW4gd2lkdGggbW9kaWZpZXJzLiBWaWV3cG9ydCBtb2RpZmllcnMgd2lsbFxuICAgKiBub3Qgb3ZlcnJpZGUgdGhlIGVmZmVjdCBvZiBhdXRvLlxuICAgKlxuICAgKiBXb3JrcyBtb3N0bHkgb24gPD0gSUU5LCBtb3N0bHlcbiAgICogUmVxdWlyZXMgLm9sZGllIGNsYXNzIG9uIGh0bWwgdGFnXG4gICAqL1xuICAuZy0tYXV0byB7XG4gICAgQGV4dGVuZCAlZ3JpZF9faXRlbTtcblxuICAgIEBpZiAkdXNlLWxlZ2FjeS1ncmlkIHtcbiAgICAgIC5vbGRpZSAmIHsgZGlzcGxheTogdGFibGUtY2VsbDt9XG4gICAgfVxuXG4gICAgQGlmICR1c2UtZmxleGJveC1ncmlkIHsgZmxleDogMTt9XG4gIH1cblxuICAvKipcbiAgICogQ29sdW1ucyB0aGF0IHNocmluayB3cmFwIGFyb3VuZCBjb250ZW50IC0gaWRlYWwgZm9yIC5nLS1hdXRvIHRvIG9jY3VweVxuICAgKiByZW1haW5pbmcgc3BhY2UuXG4gICAqXG4gICAqIFRvIGJlIHVzZWQgYXMgaXMsIHdpdGhvdXQgY29sdW1uIHdpZHRoIG1vZGlmaWVycy4gVmlld3BvcnQgbW9kaWZpZXJzIHdpbGxcbiAgICogb3ZlcnJpZGUgc2hyaW5rLXdyYXAgZWZmZWN0XG4gICAqXG4gICAqIFdvcmtzIG1vc3RseSBvbiA8PSBJRTksIG1vc3RseVxuICAgKi9cbiAgLmctLXNocmluay13cmFwIHtcbiAgICBAZXh0ZW5kICVncmlkX19pdGVtO1xuICAgIHdpZHRoOiBhdXRvO1xuXG4gICAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgICAgLm9sZGllICYgeyBkaXNwbGF5OiB0YWJsZS1jZWxsO31cbiAgICB9XG4gIH1cblxuXG5cbi8qKlxuKiByZXZlcnNlZCBncmlkc1xuKi9cbiVndy0tcmV2IHtcbiAgQGV4dGVuZCAlZ3JpZDtcblxuICBAaWYgJHVzZS1sZWdhY3ktZ3JpZCB7XG4gICAgLm9sZGllICYge1xuICAgICAgZGlyZWN0aW9uOiBydGw7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB9XG4gIH1cblxuICBAaWYgJHVzZS1mbGV4Ym94LWdyaWQgeyBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7fVxuXG4gICYgPiAlZ3JpZF9faXRlbSB7XG4gICAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgICAgLm9sZGllICYge1xuICAgICAgICBkaXJlY3Rpb246IGx0cjtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG4vKipcbiogZ3V0dGVybGVzcyBncmlkcyBoYXZlIGFsbCB0aGUgcHJvcGVydGllcyBvZiByZWd1bGFyIGdyaWRzLCBtaW51cyBhbnkgc3BhY2luZy5cbiovXG4lZ3ctLW5vLWd1dHMge1xuICBAZXh0ZW5kICVncmlkO1xuICBtYXJnaW4tbGVmdDogMDtcblxuICAmID4gJWdyaWRfX2l0ZW0geyBwYWRkaW5nLWxlZnQ6IDA7fVxufVxuXG5cbi8qKlxuKiBjZW50ZXJlZCBncmlkcyBhbGlnbiBncmlkIGl0ZW1zIGNlbnRyYWxseSB3aXRob3V0IG5lZWRpbmcgdG8gdXNlIHB1c2ggb3IgcHVsbFxuKiBjbGFzc2VzLlxuKi9cbiVndy0tY2VudGVyIHtcbiAgQGV4dGVuZCAlZ3JpZDtcblxuICBAaWYgJHVzZS1sZWdhY3ktZ3JpZCB7XG4gICAgLm9sZGllICYgeyB0ZXh0LWFsaWduOiBjZW50ZXI7fVxuICB9XG5cbiAgQGlmICR1c2UtZmxleGJveC1ncmlkIHsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7fVxuXG4gICYgPiAlZ3JpZF9faXRlbSB7XG4gICAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgICAgLm9sZGllICYgeyB0ZXh0LWFsaWduOiBsZWZ0O31cbiAgICB9XG4gIH1cbn1cblxuXG4vKipcbiAqIHJpZ2h0IGFsaWduZWQgZ3JpZHNcbiAqL1xuJWd3LS1yaWdodCB7XG4gIEBleHRlbmQgJWdyaWQ7XG5cbiAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgIC5vbGRpZSAmIHsgdGV4dC1hbGlnbjogcmlnaHQ7fVxuICB9XG5cbiAgQGlmICR1c2UtZmxleGJveC1ncmlkIHsganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDt9XG5cbiAgJiA+ICVncmlkX19pdGVtIHtcbiAgICBAaWYgJHVzZS1sZWdhY3ktZ3JpZCB7XG4gICAgICAub2xkaWUgJiB7IHRleHQtYWxpZ246IGxlZnQ7fVxuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogbWlkZGxlIGFsaWduZWQgZ3JpZHNcbiAqL1xuJWd3LS1taWRkbGUge1xuICBAZXh0ZW5kICVncmlkO1xuXG4gIEBpZiAkdXNlLWZsZXhib3gtZ3JpZCB7IGFsaWduLWl0ZW1zOiBjZW50ZXI7fVxuXG4gICYgPiAlZ3JpZF9faXRlbSB7XG4gICAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgICAgLm9sZGllICYgeyB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO31cbiAgICB9XG4gIH1cbn1cblxuXG4vKipcbiAqIGJvdHRvbSBhbGlnbmVkIGdyaWRzXG4gKi9cbiVndy0tYm90dG9tIHtcbiAgQGV4dGVuZCAlZ3JpZDtcblxuICBAaWYgJHVzZS1mbGV4Ym94LWdyaWQgeyBhbGlnbi1pdGVtczogZmxleC1lbmQ7fVxuXG4gICYgPiAlZ3JpZF9faXRlbSB7XG4gICAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgICAgLm9sZGllICYgeyB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO31cbiAgICB9XG4gIH1cbn1cblxufS8vZW5kaWZcblxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcblx0XHQkV0lEVEhTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBTaXplcyBpbiBodW1hbiByZWFkYWJsZSBmb3JtYXQuIFRoZXNlIGFyZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggb3RoZXJcbiAqIG9iamVjdHMgYW5kIGFic3RyYWN0aW9ucyBmb3VuZCBpbiBpbnVpdC5jc3MsIG1vc3QgY29tbW9ubHkgdGhlIGdyaWQgc3lzdGVtXG4gKiBhbmQgZmF1eCBmbGV4Ym94LlxuICpcbiAqIFdlIGhhdmUgYSBtaXhpbiB0byBnZW5lcmF0ZSBvdXIgd2lkdGhzIGFuZCB0aGVpciBicmVha3BvaW50LXNwZWNpZmljXG4gKiB2YXJpYXRpb25zLlxuICovXG5AaWYgJGdyaWQtdXNlLWZyYWN0aW9ucyB7XG4gICRncmlkLXVuaXQtZGVsaW1pdGVyOiBcXC8gIWdsb2JhbDtcbn0gQGVsc2Uge1xuICAkZ3JpZC11bml0LWRlbGltaXRlcjogLW9mLSAhZ2xvYmFsO1xufVxuXG5AbWl4aW4gZ3JpZC1zZXR1cCgkbmFtZXNwYWNlOiBcIlwiKSB7XG5cdC8qKlxuXHQqIFdob2xlXG5cdCovXG5cdC5nLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0xICAgIHsgd2lkdGg6IDEwMCU7fVxuXG5cblx0LyoqXG5cdCogSGFsdmVzXG5cdCovXG5cdC5nLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yICAgIHsgd2lkdGg6IDUwJTt9XG5cblxuXHQvKipcblx0KiBUaGlyZHNcblx0Ki9cblx0LmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTMgICAgeyB3aWR0aDogMzMuMzMzJTt9XG5cdC5nLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0zICAgIHsgd2lkdGg6IDY2LjY2NiU7fVxuXG5cblx0LyoqXG5cdCogUXVhcnRlcnNcblx0Ki9cblx0LmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQgICAgeyB3aWR0aDogMjUlO31cblx0LmctI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQgICAgeyBAZXh0ZW5kIC5nLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yO31cblx0LmctI3skbmFtZXNwYWNlfTMjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQgICAgeyB3aWR0aDogNzUlO31cblxuXG5cdC8qKlxuXHQqIEZpZnRoc1xuXHQqL1xuXHQuZy0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NSAgICB7IHdpZHRoOiAyMCU7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NSAgICB7IHdpZHRoOiA0MCU7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NSAgICB7IHdpZHRoOiA2MCU7fVxuXHQuZy0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NSAgICB7IHdpZHRoOiA4MCU7fVxuXG5cblx0LyoqXG5cdCogU2l4dGhzXG5cdCovXG5cdC5nLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn02ICAgIHsgd2lkdGg6IDE2LjY2NiU7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NiAgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTM7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NiAgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTI7fVxuXHQuZy0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NiAgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTM7fVxuXHQuZy0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NiAgICB7IHdpZHRoOiA4My4zMzMlO31cblxuXG5cdC8qKlxuXHQqIEVpZ2h0aHNcblx0Ki9cblx0LmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTggICAgeyB3aWR0aDogMTIuNSU7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQ7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgICB7IHdpZHRoOiAzNy41JTt9XG5cdC5nLSN7JG5hbWVzcGFjZX00I3skZ3JpZC11bml0LWRlbGltaXRlcn04ICAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9Mjt9XG5cdC5nLSN7JG5hbWVzcGFjZX01I3skZ3JpZC11bml0LWRlbGltaXRlcn04ICAgIHsgd2lkdGg6IDYyLjUlO31cblx0LmctI3skbmFtZXNwYWNlfTYjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTggICAgeyBAZXh0ZW5kIC5nLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn00O31cblx0LmctI3skbmFtZXNwYWNlfTcjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTggICAgeyB3aWR0aDogODcuNSU7fVxuXG5cblx0LyoqXG5cdCogVGVudGhzXG5cdCovXG5cdC5nLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgd2lkdGg6IDEwJTt9XG5cdC5nLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTt9XG5cdC5nLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgd2lkdGg6IDMwJTt9XG5cdC5nLSN7JG5hbWVzcGFjZX00I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTt9XG5cdC5nLSN7JG5hbWVzcGFjZX01I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9Mjt9XG5cdC5nLSN7JG5hbWVzcGFjZX02I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTt9XG5cdC5nLSN7JG5hbWVzcGFjZX03I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgd2lkdGg6IDcwJTt9XG5cdC5nLSN7JG5hbWVzcGFjZX04I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTt9XG5cdC5nLSN7JG5hbWVzcGFjZX05I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgIHsgd2lkdGg6IDkwJTt9XG5cblxuXHQvKipcblx0KiBUd2VsZnRoc1xuXHQqL1xuXHQuZy0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgICB7IHdpZHRoOiA4LjMzMyU7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTY7fVxuXHQuZy0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQ7fVxuXHQuZy0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgICB7IEBleHRlbmQgLmctI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTM7fVxuXHQuZy0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgICB7IHdpZHRoOiA0MS42NjYlO31cblx0LmctI3skbmFtZXNwYWNlfTYjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyICAgeyBAZXh0ZW5kIC5nLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yO31cblx0LmctI3skbmFtZXNwYWNlfTcjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyICAgeyB3aWR0aDogNTguMzMzJTt9XG5cdC5nLSN7JG5hbWVzcGFjZX04I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9Mzt9XG5cdC5nLSN7JG5hbWVzcGFjZX05I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDt9XG5cdC5nLSN7JG5hbWVzcGFjZX0xMCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9Njt9XG5cdC5nLSN7JG5hbWVzcGFjZX0xMSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgd2lkdGg6IDkxLjY2NiU7fVxufVxuXG5AaW5jbHVkZSBncmlkLXNldHVwKCk7XG5cblxuXG4vKipcbiAqIElmIHlvdSBoYXZlIHNldCBgJHJlc3BvbnNpdmVgIHRvIOKAmHRydWXigJkgaW4gYF92YXJzLnNjc3NgIHRoZW4geW91IG5vdyBoYXZlXG4gKiBhY2Nlc3MgdG8gdGhlc2UgY2xhc3Nlcy4gWW91IGNhbiBkZWZpbmUgYXQgd2hpY2ggYnJlYWtwb2ludCB5b3XigJlkIGxpa2UgYW5cbiAqIGVsZW1lbnQgdG8gYmUgYSBjZXJ0YWluIHNpemUsIGUuZy46XG4gKlxuICogYDxkaXYgY2xhc3M9XCJnICBnLTEvNFx0Zy1sYXAtMS8yXHRnLXBhbG0tMS8xXCI+IC4uLiA8L2Rpdj5gXG4gKlxuICogVGhpcyB3b3VsZCBjcmVhdGUgYSBgZGl2YCB0aGF0LCBhdCDigJhkZXNrdG9w4oCZIHNpemVzLCB0YWtlcyB1cCBhIG9mLTQgb2YgdGhlXG4gKiBob3Jpem9udGFsIHNwYWNlLCBhIG9mLTIgb2YgdGhhdCBzcGFjZSBhdCDigJh0YWJsZXTigJkgc2l6ZXMsIGFuZCBnb2VzIGZ1bGwgd2lkdGhcbiAqIGF0IOKAmG1vYmlsZeKAmSBzaXplcy5cbiAqXG4gKiBEZW1vOiBqc2ZpZGRsZS5uZXQvaW51aXRjc3MvV1M0R2VcbiAqXG4gKi9cblxuQGlmICRyZXNwb25zaXZlID09IHRydWV7XG5cbkBpbmNsdWRlIG1lZGlhLXF1ZXJ5KHBhbG0pe1xuXHRAaW5jbHVkZSBncmlkLXNldHVwKFwicGFsbS1cIik7XG59XG5cbkBpbmNsdWRlIG1lZGlhLXF1ZXJ5KGxhcCl7XG5cdEBpbmNsdWRlIGdyaWQtc2V0dXAoXCJsYXAtXCIpO1xufVxuXG5AaW5jbHVkZSBtZWRpYS1xdWVyeShsYXAtYW5kLXVwKXtcblx0QGluY2x1ZGUgZ3JpZC1zZXR1cChcImxhcC1hbmQtdXAtXCIpO1xufVxuXG5AaW5jbHVkZSBtZWRpYS1xdWVyeShwb3J0YWJsZSl7XG5cdEBpbmNsdWRlIGdyaWQtc2V0dXAoXCJwb3J0YWJsZS1cIik7XG59XG5cbkBpbmNsdWRlIG1lZGlhLXF1ZXJ5KGRlc2spe1xuXHRAaW5jbHVkZSBncmlkLXNldHVwKFwiZGVzay1cIik7XG59XG5cblxuLyoqXG4gKiBJZiB5b3UgaGF2ZSBzZXQgdGhlIGFkZGl0aW9uYWwgYCRyZXNwb25zaXZlLWV4dHJhYCB2YXJpYWJsZSB0byDigJh0cnVl4oCZIGluXG4gKiBgX3ZhcnMuc2Nzc2AgdGhlbiB5b3Ugbm93IGhhdmUgYWNjZXNzIHRvIHRoZSBmb2xsb3dpbmcgY2xhc3MgYXZhaWxhYmxlIHRvXG4gKiBhY2NvbW9kYXRlIG11Y2ggbGFyZ2VyIHNjcmVlbiByZXNvbHV0aW9ucy5cbiAqL1xuXG5AaWYgJHJlc3BvbnNpdmUtZXh0cmEge1xuXG5AaW5jbHVkZSBtZWRpYS1xdWVyeShkZXNrLXdpZGUpe1xuXHRAaW5jbHVkZSBncmlkLXNldHVwKFwiZGVzay13aWRlLVwiKTtcbn1cblxufVxuXG59IC8qIGVuZGlmICovXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRQVVNIXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBQdXNoIGNsYXNzZXMsIHRvIG1vdmUgZ3JpZCBpdGVtcyBvdmVyIHRvIHRoZSByaWdodCBieSBjZXJ0YWluIGFtb3VudHMuXG4gKi9cblxuQG1peGluIHB1c2gtc2V0dXAoJG5hbWVzcGFjZTogXCJcIikge1xuXG5cdC8qKlxuXHQgKiBXaG9sZVxuXHQgKi9cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEgICB7IGxlZnQ6MTAwJTsgfVxuXG5cblx0LyoqXG5cdCAqIEhhbHZlc1xuXHQgKi9cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTIgICB7IGxlZnQ6NTAlOyB9XG5cblxuXHQvKipcblx0ICogVGhpcmRzXG5cdCAqL1xuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MyAgIHsgbGVmdDozMy4zMzMlOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0zICAgeyBsZWZ0OjY2LjY2NiU7IH1cblxuXG5cdC8qKlxuXHQgKiBRdWFydGVyc1xuXHQgKi9cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQgICB7IGxlZnQ6MjUlOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn00ICAgeyBAZXh0ZW5kIC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn00ICAgeyBsZWZ0Ojc1JTsgfVxuXG5cblx0LyoqXG5cdCAqIEZpZnRoc1xuXHQgKi9cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTUgICB7IGxlZnQ6MjAlOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn01ICAgeyBsZWZ0OjQwJTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NSAgIHsgbGVmdDo2MCU7IH1cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTQjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTUgICB7IGxlZnQ6ODAlOyB9XG5cblxuXHQvKipcblx0ICogU2l4dGhzXG5cdCAqL1xuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NiAgIHsgbGVmdDoxNi42NjYlOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn02ICAgeyBAZXh0ZW5kIC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0zOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn02ICAgeyBAZXh0ZW5kIC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX00I3skZ3JpZC11bml0LWRlbGltaXRlcn02ICAgeyBAZXh0ZW5kIC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0zOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX01I3skZ3JpZC11bml0LWRlbGltaXRlcn02ICAgeyBsZWZ0OjgzLjMzMyU7IH1cblxuXG5cdC8qKlxuXHQgKiBFaWdodGhzXG5cdCAqL1xuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgbGVmdDoxMi41JTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgbGVmdDozNy41JTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MjsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgbGVmdDo2Mi41JTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgbGVmdDo4Ny41JTsgfVxuXG5cblx0LyoqXG5cdCAqIFRlbnRoc1xuXHQgKi9cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEwICB7IGxlZnQ6MTAlOyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgeyBAZXh0ZW5kIC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn01OyB9XG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgeyBsZWZ0OjMwJTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MjsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgbGVmdDo3MCU7IH1cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTgjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEwICB7IEBleHRlbmQgLmctLXB1c2gtI3skbmFtZXNwYWNlfTQjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTU7IH1cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTkjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEwICB7IGxlZnQ6OTAlOyB9XG5cblxuXHQvKipcblx0ICogVHdlbGZ0aHNcblx0ICovXG5cdC5nLS1wdXNoLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgeyBsZWZ0OjguMzMzJTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NjsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MzsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgbGVmdDo0MS42NjYlIH1cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTYjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyICB7IEBleHRlbmQgLmctLXB1c2gtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTI7IH1cblx0LmctLXB1c2gtI3skbmFtZXNwYWNlfTcjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyICB7IGxlZnQ6NTguMzMzJTsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9OCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MzsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9OSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MTAjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyIHsgQGV4dGVuZCAuZy0tcHVzaC0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NjsgfVxuXHQuZy0tcHVzaC0jeyRuYW1lc3BhY2V9MTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyIHsgbGVmdDo5MS42NjYlOyB9XG59XG5cbkBpZiAkcHVzaCB7XG5cbkBpbmNsdWRlIHB1c2gtc2V0dXAoKTtcblxuLyoqXG4gKiBOb3QgYSBwYXJ0aWN1bGFybHkgZ3JlYXQgc2VsZWN0b3IsIGJ1dCB0aGUgRFJZZXN0IHdheSB0byBkbyB0aGluZ3MuXG4gKi9cbltjbGFzcyo9XCJnLS1wdXNoLVwiXXsgcG9zaXRpb246cmVsYXRpdmU7IH1cblxuQGlmICRwYWxtLXB1c2ggPT0gdHJ1ZXtcblx0QGluY2x1ZGUgbWVkaWEtcXVlcnkocGFsbSl7XG5cdFx0QGluY2x1ZGUgcHVzaC1zZXR1cChcInBhbG0tXCIpO1xuXHR9XG59XG5cbkBpZiAkbGFwLXB1c2ggPT0gdHJ1ZXtcblx0QGluY2x1ZGUgbWVkaWEtcXVlcnkobGFwKXtcblx0XHRAaW5jbHVkZSBwdXNoLXNldHVwKFwibGFwLVwiKTtcblx0fVxufVxuXG5AaWYgJGxhcC1hbmQtdXAtcHVzaCA9PSB0cnVle1xuXHRAaW5jbHVkZSBtZWRpYS1xdWVyeShsYXAtYW5kLXVwKXtcblx0XHRAaW5jbHVkZSBwdXNoLXNldHVwKFwibGFwLWFuZC11cC1cIik7XG5cdH1cbn1cblxuQGlmICRwb3J0YWJsZS1wdXNoID09IHRydWV7XG5cdEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KHBvcnRhYmxlKXtcblx0XHRAaW5jbHVkZSBwdXNoLXNldHVwKFwicG9ydGFibGUtXCIpO1xuXHR9XG59XG5cbkBpZiAkZGVzay1wdXNoID09IHRydWV7XG5cdEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KGRlc2spe1xuXHRcdEBpbmNsdWRlIHB1c2gtc2V0dXAoXCJkZXNrLVwiKTtcblx0fVxufVxuXG59Ly9lbmRpZlxuXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRQVUxMXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBQdWxsIGNsYXNzZXMsIHRvIG1vdmUgZ3JpZCBpdGVtcyBvdmVyIHRvIHRoZSByaWdodCBieSBjZXJ0YWluIGFtb3VudHMuXG4gKi9cblxuQG1peGluIHB1bGwtc2V0dXAoJG5hbWVzcGFjZTogXCJcIikge1xuXG5cdC8qKlxuXHQgKiBXaG9sZVxuXHQgKi9cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEgICB7IHJpZ2h0OjEwMCU7IH1cblxuXG5cdC8qKlxuXHQgKiBIYWx2ZXNcblx0ICovXG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yICAgeyByaWdodDo1MCU7IH1cblxuXG5cdC8qKlxuXHQgKiBUaGlyZHNcblx0ICovXG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0zICAgeyByaWdodDozMy4zMzMlOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0zICAgeyByaWdodDo2Ni42NjYlOyB9XG5cblxuXHQvKipcblx0ICogUXVhcnRlcnNcblx0ICovXG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn00ICAgeyByaWdodDoyNSU7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQgICB7IEBleHRlbmQgLmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTI7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTMjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQgICB7IHJpZ2h0Ojc1JTsgfVxuXG5cblx0LyoqXG5cdCAqIEZpZnRoc1xuXHQgKi9cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTUgICB7IHJpZ2h0OjIwJTsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NSAgIHsgcmlnaHQ6NDAlOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn01ICAgeyByaWdodDo2MCU7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTQjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTUgICB7IHJpZ2h0OjgwJTsgfVxuXG5cblx0LyoqXG5cdCAqIFNpeHRoc1xuXHQgKi9cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTYgICB7IHJpZ2h0OjE2LjY2NiU7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTYgICB7IEBleHRlbmQgLmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTM7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTMjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTYgICB7IEBleHRlbmQgLmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTI7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTQjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTYgICB7IEBleHRlbmQgLmctLXB1bGwtI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTM7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTUjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTYgICB7IHJpZ2h0OjgzLjMzMyU7IH1cblxuXG5cdC8qKlxuXHQgKiBFaWdodGhzXG5cdCAqL1xuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgcmlnaHQ6MTIuNSU7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTggICB7IEBleHRlbmQgLmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTQ7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTMjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTggICB7IHJpZ2h0OjM3LjUlOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX00I3skZ3JpZC11bml0LWRlbGltaXRlcn04ICAgeyBAZXh0ZW5kIC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX01I3skZ3JpZC11bml0LWRlbGltaXRlcn04ICAgeyByaWdodDo2Mi41JTsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9OCAgIHsgcmlnaHQ6ODcuNSU7IH1cblxuXG5cdC8qKlxuXHQgKiBUZW50aHNcblx0ICovXG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgeyByaWdodDoxMCU7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTIjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEwICB7IEBleHRlbmQgLmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTU7IH1cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTMjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEwICB7IHJpZ2h0OjMwJTsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MjsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NTsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTAgIHsgcmlnaHQ6NzAlOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX04I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgeyBAZXh0ZW5kIC5nLS1wdWxsLSN7JG5hbWVzcGFjZX00I3skZ3JpZC11bml0LWRlbGltaXRlcn01OyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX05I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMCAgeyByaWdodDo5MCU7IH1cblxuXG5cdC8qKlxuXHQgKiBUd2VsZnRoc1xuXHQgKi9cblx0LmctLXB1bGwtI3skbmFtZXNwYWNlfTEjeyRncmlkLXVuaXQtZGVsaW1pdGVyfTEyICB7IHJpZ2h0OjguMzMzJTsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MiN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NjsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MyN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9NDsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgQGV4dGVuZCAuZy0tcHVsbC0jeyRuYW1lc3BhY2V9MSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MzsgfVxuXHQuZy0tcHVsbC0jeyRuYW1lc3BhY2V9NSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgIHsgcmlnaHQ6NDEuNjY2JSB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX02I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgeyBAZXh0ZW5kIC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xI3skZ3JpZC11bml0LWRlbGltaXRlcn0yOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX03I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgeyByaWdodDo1OC4zMzMlOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX04I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgeyBAZXh0ZW5kIC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0yI3skZ3JpZC11bml0LWRlbGltaXRlcn0zOyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX05I3skZ3JpZC11bml0LWRlbGltaXRlcn0xMiAgeyBAZXh0ZW5kIC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0zI3skZ3JpZC11bml0LWRlbGltaXRlcn00OyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xMCN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgeyBAZXh0ZW5kIC5nLS1wdWxsLSN7JG5hbWVzcGFjZX01I3skZ3JpZC11bml0LWRlbGltaXRlcn02OyB9XG5cdC5nLS1wdWxsLSN7JG5hbWVzcGFjZX0xMSN7JGdyaWQtdW5pdC1kZWxpbWl0ZXJ9MTIgeyByaWdodDo5MS42NjYlOyB9XG59XG5cbkBpZiAkcHVsbCA9PSB0cnVle1xuXG4vKipcbiAqIE5vdCBhIHBhcnRpY3VsYXJseSBncmVhdCBzZWxlY3RvciwgYnV0IHRoZSBEUlllc3Qgd2F5IHRvIGRvIHRoaW5ncy5cbiAqL1xuW2NsYXNzKj1cImctLXB1bGwtXCJdeyBwb3NpdGlvbjpyZWxhdGl2ZTsgfVxuXG5AaW5jbHVkZSBwdWxsLXNldHVwKCk7XG5cbkBpZiAkcGFsbS1wdWxsID09IHRydWV7XG5cdEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KHBhbG0pe1xuXHRcdEBpbmNsdWRlIHB1bGwtc2V0dXAoXCJwYWxtLVwiKTtcblx0fVxufVxuXG5AaWYgJGxhcC1wdWxsID09IHRydWV7XG5cdEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KGxhcCl7XG5cdFx0QGluY2x1ZGUgcHVsbC1zZXR1cChcImxhcC1cIik7XG5cdH1cbn1cblxuQGlmICRsYXAtYW5kLXVwLXB1bGwgPT0gdHJ1ZXtcblx0QGluY2x1ZGUgbWVkaWEtcXVlcnkobGFwLWFuZC11cCl7XG5cdFx0QGluY2x1ZGUgcHVsbC1zZXR1cChcImxhcC1hbmQtdXAtXCIpO1xuXHR9XG59XG5cbkBpZiAkcG9ydGFibGUtcHVsbCA9PSB0cnVle1xuXHRAaW5jbHVkZSBtZWRpYS1xdWVyeShwb3J0YWJsZSl7XG5cdFx0QGluY2x1ZGUgcHVsbC1zZXR1cChcInBvcnRhYmxlLVwiKTtcblx0fVxufVxuXG5AaWYgJGRlc2stcHVsbCA9PSB0cnVle1xuXHRAaW5jbHVkZSBtZWRpYS1xdWVyeShkZXNrKXtcblx0XHRAaW5jbHVkZSBwdWxsLXNldHVwKFwiZGVzay1cIik7XG5cdH1cbn1cblxufS8vZW5kaWZcblxuIiwiQGlmICRkZWJ1Zy1tb2RlID09IHRydWV7XG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAkREVCVUdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEVuYWJsZSB0aGlzIHN0eWxlc2hlZXQgdG8gdmlzdWFsbHkgZGV0ZWN0IGFueSBpbXByb3Blcmx5IG5lc3RlZCBvclxuICogcG90ZW50aWFsbHkgaW52YWxpZCBtYXJrdXAsIG9yIGFueSBwb3RlbnRpYWxseSBpbmFjY2Vzc2libGUgY29kZS5cbiAqXG4gKiBSZWQgICAgICA9PSAgICBkZWZpbml0ZSBlcnJvclxuICogWWVsbG93ICAgICA9PSAgICBkb3VibGUtY2hlY2tcbiAqIE5vbmUgICAgID09ICAgIHNob3VsZCBiZSBmaW5lXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIG1ldGhvZCBvZiBjaGVja2luZyBtYXJrdXAgcXVhbGl0eSBzaG91bGQgbm90IGJlIHJlbGllZFxuICogdXBvbiBlbnRpcmVseS4gVmFsaWRhdGUgeW91ciBtYXJrdXAhXG4gKi9cblxuXG4vKipcbiAqIEFyZSB0aGVyZSBhbnkgZW1wdHkgZWxlbWVudHMgaW4geW91ciBwYWdlP1xuICovXG46ZW1wdHl7XG4gIG91dGxpbmU6NXB4IHNvbGlkIHllbGxvdztcbn1cblxuXG4vKipcbiAqIEltYWdlcyByZXF1aXJlIGBhbHRgIGF0dHJpYnV0ZXMsIGVtcHR5IGBhbHRgcyBhcmUgZmluZSBidXQgc2hvdWxkIGJlXG4gKiBkb3VibGUtY2hlY2tlZCwgbm8gYGFsdGAgaXMgYmFkIGFuZCBpcyBmbGFnZ2VkIHJlZC5cbiAqL1xuaW1ne1xuICBvdXRsaW5lOjVweCBzb2xpZCByZWQ7XG59XG5pbWdbYWx0XXtcbiAgb3V0bGluZTpub25lO1xufVxuaW1nW2FsdD1cIlwiXXtcbiAgb3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxuXG5cbi8qKlxuICogTGlua3Mgc29tZXRpbWVzLCB0aG91Z2ggbm90IGFsd2F5cywgYmVuZWZpdCBmcm9tIGB0aXRsZWAgYXR0cmlidXRlcy4gTGlua3NcbiAqIHdpdGhvdXQgYXJlIG5ldmVyIGludmFsaWQgYnV0IGl04oCZcyBhIGdvb2QgaWRlYSB0byBjaGVjay5cbiAqL1xuYXtcbiAgb3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxuYVt0aXRsZV17XG4gIG91dGxpbmU6bm9uZTtcbn1cblxuXG4vKipcbiAqIERvdWJsZS1jaGVjayBhbnkgbGlua3Mgd2hvc2UgYGhyZWZgIGlzIHNvbWV0aGluZyBxdWVzdGlvbmFibGUuXG4gKi9cbmFbaHJlZj1cIiNcIl0sXG5hW2hyZWYqPVwiamF2YXNjcmlwdFwiXXtcbiAgb3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxuXG5cbi8qKlxuICogVGhlIGB0YXJnZXRgIGF0dHJpYnV0ZSBhaW7igJl0IHRvbyBuaWNlLi4uXG4gKi9cbmFbdGFyZ2V0XXtcbiAgb3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxuXG5cbi8qKlxuICogRW5zdXJlIGFueSBsaXN0cyBvbmx5IGNvbnRhaW4gYGxpYHMgYXMgY2hpbGRyZW4uXG4gKi9cbnVsLFxub2x7XG4gID4gKjpub3QobGkpe1xuICAgIG91dGxpbmU6NXB4IHNvbGlkIHJlZDtcbiAgfVxufVxuXG5cbi8qKlxuICogSXTigJlzIGFsd2F5cyBuaWNlIHRvIGdpdmUgYHRoYHMgYHNjb3BlYCBhdHRyaWJ1dGVzLlxuICovXG50aHtcbiAgb3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxudGhbc2NvcGVde1xuICBvdXRsaW5lOm5vbmU7XG59XG5cblxuLyoqXG4gKiBgdHJgcyBhcyBjaGlsZHJlbiBvZiBgdGFibGVgcyBhaW7igJl0IGdyZWF0LCBkaWQgeW91IG5lZWQgYSBgdGhlYWRgL2B0Ym9keWA/XG4gKi9cbnRhYmxlID4gdHJ7XG4gIG91dGxpbmU6NXB4IHNvbGlkIHllbGxvdztcbn1cblxuXG4vKipcbiAqIGB0Zm9vdGAgbmVlZHMgdG8gY29tZSAqYmVmb3JlKiBgdGJvZHlgLlxuICovXG50Ym9keSArIHRmb290e1xuICBvdXRsaW5lOjVweCBzb2xpZCB5ZWxsb3c7XG59XG5cblxuLyoqXG4gKiBGb3JtcyByZXF1aXJlIGBhY3Rpb25gIGF0dHJpYnV0ZXNcbiAqL1xuZm9ybXtcbiAgb3V0bGluZTo1cHggc29saWQgcmVkO1xufVxuZm9ybVthY3Rpb25de1xuICBvdXRsaW5lOm5vbmU7XG59XG5cblxuLyoqXG4gKiBWYXJpb3VzIGZvcm0tZmllbGQgdHlwZXMgaGF2ZSByZXF1aXJlZCBhdHRyaWJ1dGVzLiBgaW5wdXRgcyBuZWVkIGB0eXBlYFxuICogYXR0cmlidXRlcywgYHRleHRhcmVhYHMgbmVlZCBgcm93c2AgYW5kIGBjb2xzYCBhdHRyaWJ1dGVzIGFuZCBzdWJtaXQgYnV0dG9uc1xuICogbmVlZCBhIGB2YWx1ZWAgYXR0cmlidXRlLlxuICovXG50ZXh0YXJlYSxcbmlucHV0e1xuICBvdXRsaW5lOjVweCBzb2xpZCByZWQ7XG59XG5pbnB1dFt0eXBlXXtcbiAgb3V0bGluZTpub25lO1xufVxudGV4dGFyZWFbcm93c11bY29sc117XG4gIG91dGxpbmU6bm9uZTtcbn1cbmlucHV0W3R5cGU9c3VibWl0XXtcbiAgb3V0bGluZTo1cHggc29saWQgcmVkO1xufVxuaW5wdXRbdHlwZT1zdWJtaXRdW3ZhbHVlXXtcbiAgb3V0bGluZTpub25lO1xufVxuXG5cbi8qKlxuICogQXZvaWQgaW5saW5lIHN0eWxlcyB3aGVyZSBwb3NzaWJsZS5cbiAqL1xuW3N0eWxlXXtcblx0b3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxuXG5cbi8qKlxuICogWW91IHNob3VsZCBhdm9pZCB1c2luZyBJRHMgZm9yIENTUywgaXMgdGhpcyBkb2luZyBhbnkgc3R5bGluZz9cbiAqL1xuW2lkXXtcblx0b3V0bGluZTo1cHggc29saWQgeWVsbG93O1xufVxuXG5cbi8qKlxuICogQXJlIHlvdSB1c2luZyB0aGUgZ3JpZCBzeXN0ZW0gY29ycmVjdGx5P1xuICovXG4uZ3cgPiA6bm90KC5nKSxcbi5ncmlkLXdyYXBwZXIgPiA6bm90KC5ncmlkKSxcbi5ndy0tcmV2ID4gOm5vdCguZyksXG4uZ3JpZC13cmFwcGVyLS1yZXYgPiA6bm90KC5ncmlkKXtcblx0b3V0bGluZTo1cHggc29saWQgcmVkO1xufVxuXG59LyogZW5kaWYgKi9cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgQ1VTVE9NLkNTU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRVVElMSVRJRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwidXRpbGl0aWVzLyFhbGxcIjtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcImJhc2UvIWFsbFwiO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJENPTVBPTkVOVFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwiY29tcG9uZW50cy8hYWxsXCI7XG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkUEFHRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwicGFnZXMvIWFsbFwiO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFZFTkRPUlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgXCJ2ZW5kb3IvIWFsbFwiO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJE1PRElGSUVSU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogbW9kaWZpZXJlcyBtdXN0IGNvbWUgbGFzdCB0aGF0IGNsYXNzZXMgY2FuIGJlIGFwcGxpZWQgZGlyZWN0bHlcbiAqIHRvIG1hcmt1cCB0byBvdmVycmlkZSBzdHlsZXNcbiAqL1xuQGltcG9ydCBcIm1vZGlmaWVycy8hYWxsXCI7XG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTEFZT1VUXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBsYXlvdXQsIGFzIHdpdGggbW9kaWZpZXIsIG11c3QgY29tZSBsYXN0IHRoYXQgY2xhc3NlcyBjYW4gYmUgYXBwbGllZCBkaXJlY3RseVxuICogdG8gbWFya3VwIGFzIG1vZGlmaWVyc1xuICovXG5AaW1wb3J0IFwibGF5b3V0LyFhbGxcIjtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRBTklNQVRJT05TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcImFuaW1hdGlvbnMvIWFsbFwiO1xuXG5cblxuXG5cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEZVTkNUSU9OU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ2Z1bmN0aW9ucy8hYWxsJztcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdtaXhpbnMvIWFsbCc7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwiY29tcG9uZW50cy8hYWxsXCI7XG5AaW1wb3J0IFwibW9kaWZpZXJzLyFhbGxcIjtcbkBpbXBvcnQgXCJsYXlvdXQvIWFsbFwiO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTUVOVVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwibWVudXMvIWFsbFwiO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTUVOVVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0IFwiYW5jaG9yLWNvbGxhcHNlXCI7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRDT0xMQVBTRUQgQU5DSE9SXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQG1peGluIG1lbnUtYW5jaG9yLWNvbGxhcHNlKCkge1xuICBib3JkZXItd2lkdGg6IDA7XG4gIG1heC1oZWlnaHQ6IDA7XG4gIG9wYWNpdHk6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmctYm90dG9tOiAwO1xuICBwYWRkaW5nLXRvcDogMDtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJE1PRElGSUVSU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ2JhY2tncm91bmQvIWFsbCc7XG5AaW1wb3J0ICd0eXBvZ3JhcGh5LyFhbGwnO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQkFDS0dST1VORCBNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdsaW5rLXN0YXRlcyc7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRCQUNLR1JPVU5EIExJTksgU1RBVEVTIE1JWElOXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQG1peGluIGJnYy0tbGluay1zdGF0ZXMoJGJhc2UtY2xyLCAkaG92ZXItY2xyLCAkYWN0aXZlLWNscikge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFzZS1jbHI7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7IGJhY2tncm91bmQtY29sb3I6ICRob3Zlci1jbHI7fVxuXG4gICY6YWN0aXZlIHsgYmFja2dyb3VuZC1jb2xvcjogJGFjdGl2ZS1jbHI7fVxufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkVFlQT0dSQVBIWSBNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdsaW5rLXN0YXRlcyc7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRUWVBPR1JBUEhJQyBMSU5LIFNUQVRFUyBNSVhJTlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBtaXhpbiBmYy0tbGluay1zdGF0ZXMoJGJhc2UtY2xyLCAkaG92ZXItY2xyLCAkYWN0aXZlLWNscikge1xuICBjb2xvcjogJGJhc2UtY2xyO1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMgeyBjb2xvcjogJGhvdmVyLWNscjt9XG5cbiAgJjphY3RpdmUgeyBjb2xvcjogJGFjdGl2ZS1jbHI7fVxufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTEFZT1VUXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcImlzbGFuZHNcIjtcbkBpbXBvcnQgXCJtYXJnaW4tcGFkZGluZ1wiO1xuQGltcG9ydCBcIndyYXBzXCI7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRJU0xBTkQgTUlYSU5TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJGlzbGFuZC1wYWQ6IDUuNXJlbTtcblxuLy8gQG1peGluIGlzbGFuZC0tbGFyZ2UtLXRvcCB7IHBhZGRpbmctdG9wOiAkaXNsYW5kLXBhZC1sYXJnZTt9XG4vLyBAbWl4aW4gaXNsYW5kLS1sYXJnZS0tYm90dG9tIHsgcGFkZGluZy1ib3R0b206ICRpc2xhbmQtcGFkLWxhcmdlO31cblxuLy8gQG1peGluIGlzbGFuZC0tbGFyZ2Uge1xuLy8gICBAaW5jbHVkZSBpc2xhbmQtLWxhcmdlLS10b3A7XG4vLyAgIEBpbmNsdWRlIGlzbGFuZC0tbGFyZ2UtLWJvdHRvbTtcbi8vIH1cblxuQG1peGluIGlzbGFuZC0tdG9wIHsgcGFkZGluZy10b3A6ICRpc2xhbmQtcGFkO31cbkBtaXhpbiBpc2xhbmQtLWJvdHRvbSB7IHBhZGRpbmctYm90dG9tOiAkaXNsYW5kLXBhZDt9XG5cbkBtaXhpbiBpc2xhbmQge1xuICBAaW5jbHVkZSBpc2xhbmQtLXRvcDtcbiAgQGluY2x1ZGUgaXNsYW5kLS1ib3R0b207XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRNQVJHSU4gQU5EIFBBRERJTkdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIHRoZXNlIG1peGlucyBzaG91bGRuJ3QgbmVlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGV4Y2VwdCBmb3IgaW4gdGhlIHBsYWNlaG9sZGVyc1xuICogZGVmaW5lZCBpbiBfbGF5b3V0cy5zY3NzXG4gKlxuICogcHJlZmVyIGV4dGVuZGluZyB0aG9zZSBwbGFjZWhvbGRlcnMgZnJvbSB5b3VyIHNlbGVjdG9ycyBvdmVyIGluY2x1ZGluZyB0aGVzZSBtaXhpbnNcbiAqXG4gKiB0aGlzIHdpbGwgcmVkdWNlIGR1cGxpY2F0aW9uIG9mIHRoZSBzYW1lIHByb3BlcnRpZXMgb3ZlciB5b3VyIHN0eWxlc2hlZXRzLCB3aGlsZVxuICogYWxsb3dpbmcgeW91IHRvIHJldXNlIGNvbnNpc3RlbnQgc3BhY2luZyBhY3Jvc3MgeW91ciBzdHlsZXNoZWV0c1xuICpcbiAqIHNpdHVhdGlvbnMgb24gd2hlbiB0byByYXRoZXIgdXNlIGFuIGluY2x1ZGUgaXMgaWYgeW91IG5lZWQgdG8gb3ZlcnJpZGUgbWFyZ2luIG9yXG4gKiBwYWRkaW5nIGluIGEgbWVkaWEgcXVlcnkgd2hlbiB0aGUgcGxhY2Vob2xkZXIgaGFzIGJlZW4gZXh0ZW5kZWQuIER1ZSB0byBzb3VyY2VcbiAqIG9yZGVyLCB5b3Ugd2lsbCBub3QgYWx3YXlzIGJlIGFibGUgdG8gb3ZlcnJpZGUgdGhlIHBsYWNlaG9sZGVycy5cbiAqIEluY2x1ZGluZyB0aGUgcmVsZXZhbnQgbWl4aW4gd2lsbCB0aGVuIGFsbG93IHlvdSB0byBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBpblxuICogeW91ciBtZWRpYSBxdWVyeS5cbiAqL1xuJG1wLWxhcmdlOiAuNTtcbiRtcC1zbWFsbDogJG1wLWxhcmdlO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJE1BUkdJTlxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBtaXhpbiBwdXNoLS1sYXJnZSAgICAgICAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLCAgICAgICAgJGJhc2Utc3BhY2luZy11bml0ICsgJG1wLWxhcmdlKTt9XG5AbWl4aW4gcHVzaC0tbGFyZ2UtLXRvcCAgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi10b3AsICAgICRiYXNlLXNwYWNpbmctdW5pdCArICRtcC1sYXJnZSk7fVxuQG1peGluIHB1c2gtLWxhcmdlLS1yaWdodCAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tcmlnaHQsICAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpO31cbkBtaXhpbiBwdXNoLS1sYXJnZS0tYm90dG9tICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0ICsgJG1wLWxhcmdlKTt9XG5AbWl4aW4gcHVzaC0tbGFyZ2UtLWxlZnQgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1sZWZ0LCAgICRiYXNlLXNwYWNpbmctdW5pdCArICRtcC1sYXJnZSk7fVxuQG1peGluIHB1c2gtLWxhcmdlLS1lbmRzICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tdG9wLCAgICAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpOyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1ib3R0b20sICRiYXNlLXNwYWNpbmctdW5pdCArICRtcC1sYXJnZSk7fVxuQG1peGluIHB1c2gtLWxhcmdlLS1zaWRlcyAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tcmlnaHQsICAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpOyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1sZWZ0LCAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpO31cblxuQG1peGluIHB1c2ggICAgICAgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4sICAgICAgICAkYmFzZS1zcGFjaW5nLXVuaXQpO31cbkBtaXhpbiBwdXNoLS10b3AgICAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLXRvcCwgICAgJGJhc2Utc3BhY2luZy11bml0KTt9XG5AbWl4aW4gcHVzaC0tcmlnaHQgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1yaWdodCwgICRiYXNlLXNwYWNpbmctdW5pdCk7fVxuQG1peGluIHB1c2gtLWJvdHRvbSAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tYm90dG9tLCAkYmFzZS1zcGFjaW5nLXVuaXQpO31cbkBtaXhpbiBwdXNoLS1sZWZ0ICAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWxlZnQsICAgJGJhc2Utc3BhY2luZy11bml0KTt9XG5AbWl4aW4gcHVzaC0tZW5kcyAgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi10b3AsICAgICRiYXNlLXNwYWNpbmctdW5pdCk7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0KTt9XG5AbWl4aW4gcHVzaC0tc2lkZXMgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1yaWdodCwgICRiYXNlLXNwYWNpbmctdW5pdCk7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWxlZnQsICAkYmFzZS1zcGFjaW5nLXVuaXQpO31cblxuQG1peGluIHB1c2gtLXNtYWxsICAgICAgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4sICAgICAgICAkYmFzZS1zcGFjaW5nLXVuaXQgLSAkbXAtc21hbGwpO31cbkBtaXhpbiBwdXNoLS1zbWFsbC0tdG9wICAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLXRvcCwgICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gcHVzaC0tc21hbGwtLXJpZ2h0ICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1yaWdodCwgICRiYXNlLXNwYWNpbmctdW5pdCAtICRtcC1zbWFsbCk7fVxuQG1peGluIHB1c2gtLXNtYWxsLS1ib3R0b20gIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tYm90dG9tLCAkYmFzZS1zcGFjaW5nLXVuaXQgLSAkbXAtc21hbGwpO31cbkBtaXhpbiBwdXNoLS1zbWFsbC0tbGVmdCAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWxlZnQsICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gcHVzaC0tc21hbGwtLWVuZHMgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi10b3AsICAgICRiYXNlLXNwYWNpbmctdW5pdCAtICRtcC1zbWFsbCk7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gcHVzaC0tc21hbGwtLXNpZGVzICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1yaWdodCwgICRiYXNlLXNwYWNpbmctdW5pdCAtICRtcC1zbWFsbCk7IEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWxlZnQsICRiYXNlLXNwYWNpbmctdW5pdCAtICRtcC1zbWFsbCk7fVxuXG5AbWl4aW4gZmx1c2ggICAgICAgICAgeyBtYXJnaW46ICAgICAgIDA7fVxuQG1peGluIGZsdXNoLS10b3AgICAgIHsgbWFyZ2luLXRvcDogICAwO31cbkBtaXhpbiBmbHVzaC0tcmlnaHQgICB7IG1hcmdpbi1yaWdodDogMDt9XG5AbWl4aW4gZmx1c2gtLWJvdHRvbSAgeyBtYXJnaW4tYm90dG9tOjA7fVxuQG1peGluIGZsdXNoLS1sZWZ0ICAgIHsgbWFyZ2luLWxlZnQ6ICAwO31cbkBtaXhpbiBmbHVzaC0tZW5kcyAgICB7IG1hcmdpbi10b3A6ICAgMDsgbWFyZ2luLWJvdHRvbTowO31cbkBtaXhpbiBmbHVzaC0tc2lkZXMgICB7IG1hcmdpbi1yaWdodDogMDsgbWFyZ2luLWxlZnQ6ICAwO31cblxuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFBBRERJTkdcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AbWl4aW4gc29mdC0tbGFyZ2UgICAgICAgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmcsICAgICAgICAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpO31cbkBtaXhpbiBzb2Z0LS1sYXJnZS0tdG9wICAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZy10b3AsICAgICRiYXNlLXNwYWNpbmctdW5pdCArICRtcC1sYXJnZSk7fVxuQG1peGluIHNvZnQtLWxhcmdlLS1yaWdodCAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXJpZ2h0LCAgJGJhc2Utc3BhY2luZy11bml0ICsgJG1wLWxhcmdlKTt9XG5AbWl4aW4gc29mdC0tbGFyZ2UtLWJvdHRvbSAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctYm90dG9tLCAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpO31cbkBtaXhpbiBzb2Z0LS1sYXJnZS0tbGVmdCAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZy1sZWZ0LCAgICRiYXNlLXNwYWNpbmctdW5pdCArICRtcC1sYXJnZSk7fVxuQG1peGluIHNvZnQtLWxhcmdlLS1lbmRzICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXRvcCwgICAgJGJhc2Utc3BhY2luZy11bml0ICsgJG1wLWxhcmdlKTsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0ICsgJG1wLWxhcmdlKTt9XG5AbWl4aW4gc29mdC0tbGFyZ2UtLXNpZGVzICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctcmlnaHQsICAkYmFzZS1zcGFjaW5nLXVuaXQgKyAkbXAtbGFyZ2UpOyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctbGVmdCwgJGJhc2Utc3BhY2luZy11bml0ICsgJG1wLWxhcmdlKTt9XG5cbkBtaXhpbiBzb2Z0ICAgICAgICAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZywgICAgICAgICRiYXNlLXNwYWNpbmctdW5pdCk7fVxuQG1peGluIHNvZnQtLXRvcCAgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXRvcCwgICAgJGJhc2Utc3BhY2luZy11bml0KTt9XG5AbWl4aW4gc29mdC0tcmlnaHQgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctcmlnaHQsICAkYmFzZS1zcGFjaW5nLXVuaXQpO31cbkBtaXhpbiBzb2Z0LS1ib3R0b20gICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZy1ib3R0b20sICRiYXNlLXNwYWNpbmctdW5pdCk7fVxuQG1peGluIHNvZnQtLWxlZnQgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWxlZnQsICAgJGJhc2Utc3BhY2luZy11bml0KTt9XG5AbWl4aW4gc29mdC0tZW5kcyAgICAgeyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctdG9wLCAgICAkYmFzZS1zcGFjaW5nLXVuaXQpOyBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctYm90dG9tLCAkYmFzZS1zcGFjaW5nLXVuaXQpO31cbkBtaXhpbiBzb2Z0LS1zaWRlcyAgICB7IEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZy1yaWdodCwgICRiYXNlLXNwYWNpbmctdW5pdCk7IEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZy1sZWZ0LCAgICRiYXNlLXNwYWNpbmctdW5pdCk7fVxuXG5AbWl4aW4gc29mdC0tc21hbGwgICAgICAgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLCAgICAgICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gc29mdC0tc21hbGwtLXRvcCAgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXRvcCwgICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gc29mdC0tc21hbGwtLXJpZ2h0ICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXJpZ2h0LCAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gc29mdC0tc21hbGwtLWJvdHRvbSAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gc29mdC0tc21hbGwtLWxlZnQgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWxlZnQsICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gc29mdC0tc21hbGwtLWVuZHMgICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXRvcCwgICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWJvdHRvbSwgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5AbWl4aW4gc29mdC0tc21hbGwtLXNpZGVzICAgIHsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLXJpZ2h0LCAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTsgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLWxlZnQsICAgJGJhc2Utc3BhY2luZy11bml0IC0gJG1wLXNtYWxsKTt9XG5cbkBtaXhpbiBoYXJkICAgICAgICAgICB7IHBhZGRpbmc6ICAgICAgIDA7fVxuQG1peGluIGhhcmQtLXRvcCAgICAgIHsgcGFkZGluZy10b3A6ICAgMDt9XG5AbWl4aW4gaGFyZC0tcmlnaHQgICAgeyBwYWRkaW5nLXJpZ2h0OiAwO31cbkBtaXhpbiBoYXJkLS1ib3R0b20gICB7IHBhZGRpbmctYm90dG9tOjA7fVxuQG1peGluIGhhcmQtLWxlZnQgICAgIHsgcGFkZGluZy1sZWZ0OiAgMDt9XG5AbWl4aW4gaGFyZC0tZW5kcyAgICAgeyBwYWRkaW5nLXRvcDogICAwOyBwYWRkaW5nLWJvdHRvbTowO31cbkBtaXhpbiBoYXJkLS1zaWRlcyAgICB7IHBhZGRpbmctcmlnaHQ6IDA7IHBhZGRpbmctbGVmdDogIDA7fVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkV1JBUCBNSVhJTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AbWl4aW4gd3JhcC1tYXJnaW4ge1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xufVxuXG5AbWl4aW4gd3JhcC1wYWRkaW5nIHtcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW07XG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbTtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEJBU0VcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdkb2N1bWVudCc7XG5AaW1wb3J0ICdmb250cyc7XG5AaW1wb3J0ICdmb3Jtcy8hYWxsJztcbkBpbXBvcnQgJ2hlYWRpbmdzJztcbkBpbXBvcnQgJ2ltYWdlcyc7XG5AaW1wb3J0ICdsaW5rcyc7XG5AaW1wb3J0ICdsaXN0cyc7XG5AaW1wb3J0ICdydWxlcyc7XG5AaW1wb3J0ICd0YWJsZXMnO1xuQGltcG9ydCAndHlwb2dyYXBoeSc7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRET0NVTUVOVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogVGhpcyBzZWN0aW9uIGhvdXNlcyBzdHlsZXMgZm9yIHRoZSBiYXNlIGVsZW1lbnRzIG9mIHRoZSBwYWdlLCBnZW5lcmFsbHkgYm9keSBhbmRcbiAqIGh0bWxcbiAqL1xuXG5cbi8qKlxuICogRml4IGZhdHR5IGZvbnRzIGluIENocm9tZSBhbmQgRmlyZWZveCBvbiBNYWM6XG4gKiBodHRwOi8vbWF4aW1pbGlhbmhvZmZtYW5uLmNvbS9wb3N0cy9iZXR0ZXItZm9udC1yZW5kZXJpbmctb24tb3N4XG4gKi9cbiVmaXgtZmF0dHktZm9udHMge1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbn1cblxuLyoqXG4gKiBVc2Ugc3RpY2t5IGZvb3RlcjpcbiAqIGh0dHA6Ly9waGlsaXB3YWx0b24uZ2l0aHViLmlvL3NvbHZlZC1ieS1mbGV4Ym94L2RlbW9zL3N0aWNreS1mb290ZXIvXG4gKlxuICogcmVxdWlyZXMgZmxleDogMSAwIGF1dG87IG9uIHByaW1hcnkgY29udGVudFxuICovXG4lc3RpY2t5LWZvb3RlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuXG4gIC8qKlxuICAgKiBkb24ndCB1c2Ugc3RpY2t5IGZvb3RlciBvbiBJRTEwID49XG4gICAqXG4gICAqIGp1c3QgZG9uJ3QgYm90aGVyXG4gICAqL1xuICBAbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6IGFjdGl2ZSksICgtbXMtaGlnaC1jb250cmFzdDogbm9uZSkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG59XG5cbi8qKlxuICogUHJldmVudCBDaHJvbWUgYW5kIFNhZmFyaSBmcm9tIGZsYXNoaW5nIHdoZW4gYSB1c2VyIHRhcHMgb24gbW9iaWxlXG4gKi9cbkBpZiAkcmVzcG9uc2l2ZSB7XG4gIGh0bWwgeyAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O31cbn1cblxuaHRtbCwgYm9keSwgYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSB7XG4gIC8vIEBleHRlbmQgJWZpeC1mYXR0eS1mb250cztcbn1cblxuYm9keSB7XG4gIC8vIEBleHRlbmQgJXN0aWNreS1mb290ZXI7XG59XG5cblxuXG4vKipcbiAqIGdldCA2MGZwcyBzY3JvbGxpbmcgYnkgZGlzYWJsaW5nIHBvaW50ZXIgZXZlbnRzOlxuICogaHR0cDovL3d3dy50aGVjc3NuaW5qYS5jb20vamF2YXNjcmlwdC9wb2ludGVyLWV2ZW50cy02MGZwc1xuICovXG4uZGlzYWJsZS1ob3Zlcixcbi5kaXNhYmxlLWhvdmVyICogeyBwb2ludGVyLWV2ZW50czogbm9uZSAhaW1wb3J0YW50O31cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEZPTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJElDT04gRk9OVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbmNsdWRlIGZvbnQtZmFjZShcbiAgJGZvbnQtaWNvbixcbiAgJGZvbnQtaWNvbi1maWxlbmFtZSxcbiAgJGZvbnQtaWNvbi1wYXRoLFxuICAkd2VpZ2h0OiBub3JtYWwsXG4gICRzdHlsZTogbm9ybWFsXG4pO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEJBU0UgRk9OVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbmNsdWRlIGZvbnQtZmFjZShcbiAgJGZvbnQtYmFzZSxcbiAgJGZvbnQtYmFzZS1maWxlbmFtZSxcbiAgJGZvbnQtYmFzZS1wYXRoLFxuICAkd2VpZ2h0OiBub3JtYWwsXG4gICRzdHlsZTogbm9ybWFsXG4pO1xuXG4gIEBpbmNsdWRlIGZvbnQtZmFjZShcbiAgICAkZm9udC1iYXNlLFxuICAgICRmb250LWJhc2UtZmlsZW5hbWUtaSxcbiAgICAkZm9udC1iYXNlLXBhdGgsXG4gICAgJHdlaWdodDogbm9ybWFsLFxuICAgICRzdHlsZTogaXRhbGljXG4gICk7XG5cbiAgQGluY2x1ZGUgZm9udC1mYWNlKFxuICAgICRmb250LWJhc2UsXG4gICAgJGZvbnQtYmFzZS1maWxlbmFtZS1iLFxuICAgICRmb250LWJhc2UtcGF0aCxcbiAgICAkd2VpZ2h0OiBib2xkLFxuICAgICRzdHlsZTogbm9ybWFsXG4gICk7XG5cbiAgQGluY2x1ZGUgZm9udC1mYWNlKFxuICAgICRmb250LWJhc2UsXG4gICAgJGZvbnQtYmFzZS1maWxlbmFtZS1sLFxuICAgICRmb250LWJhc2UtcGF0aCxcbiAgICAkd2VpZ2h0OiBsaWdodGVyLFxuICAgICRzdHlsZTogbm9ybWFsXG4gICk7XG5cbiAgQGluY2x1ZGUgZm9udC1mYWNlKFxuICAgICRmb250LWJhc2UsXG4gICAgJGZvbnQtYmFzZS1maWxlbmFtZS1iaSxcbiAgICAkZm9udC1iYXNlLXBhdGgsXG4gICAgJHdlaWdodDogYm9sZCxcbiAgICAkc3R5bGU6IGl0YWxpY1xuICApO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEhFQURFUiBGT05UXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGluY2x1ZGUgZm9udC1mYWNlKFxuICAkZm9udC1oZWFkZXIsXG4gICRmb250LWhlYWRlci1maWxlbmFtZSxcbiAgJGZvbnQtaGVhZGVyLXBhdGgsXG4gICR3ZWlnaHQ6IG5vcm1hbCxcbiAgJHN0eWxlOiBub3JtYWxcbik7XG5cbiAgQGluY2x1ZGUgZm9udC1mYWNlKFxuICAgICRmb250LWhlYWRlcixcbiAgICAkZm9udC1oZWFkZXItZmlsZW5hbWUtYixcbiAgICAkZm9udC1oZWFkZXItcGF0aCxcbiAgICAkd2VpZ2h0OiBib2xkLFxuICAgICRzdHlsZTogbm9ybWFsXG4gICk7XG5cbiIsIkBtaXhpbiBmb250LWZhY2UoJGZvbnQtZmFtaWx5LCAkZm9udC1maWxlbmFtZSwgJGZpbGUtcGF0aCwgJHdlaWdodDogbm9ybWFsLCAkc3R5bGU6IG5vcm1hbCApIHtcblx0QGZvbnQtZmFjZSB7XG5cdFx0Zm9udC1mYW1pbHk6ICRmb250LWZhbWlseTtcblxuXHRcdEBpZiAkdXNlLXJhaWxzIHtcblx0XHRcdHNyYzogZm9udC11cmwoJyN7JGZpbGUtcGF0aH0vI3skZm9udC1maWxlbmFtZX0uZW90Jyk7XG5cdFx0XHRzcmM6IGZvbnQtdXJsKCcjeyRmaWxlLXBhdGh9LyN7JGZvbnQtZmlsZW5hbWV9LmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXG5cdFx0XHRcdGZvbnQtdXJsKCcjeyRmaWxlLXBhdGh9LyN7JGZvbnQtZmlsZW5hbWV9LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxuXHRcdFx0XHRmb250LXVybCgnI3skZmlsZS1wYXRofS8jeyRmb250LWZpbGVuYW1lfS53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXG5cdFx0XHRcdGZvbnQtdXJsKCcjeyRmaWxlLXBhdGh9LyN7JGZvbnQtZmlsZW5hbWV9LnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKSxcblx0XHRcdFx0Zm9udC11cmwoJyN7JGZpbGUtcGF0aH0vI3skZm9udC1maWxlbmFtZX0uc3ZnIyN7JGZvbnQtZmlsZW5hbWV9JykgZm9ybWF0KCdzdmcnKTtcblx0XHR9IEBlbHNlIHtcblx0XHRcdHNyYzogdXJsKCcjeyRmaWxlLXBhdGh9LyN7JGZvbnQtZmlsZW5hbWV9LmVvdCcpO1xuXHRcdFx0c3JjOiB1cmwoJyN7JGZpbGUtcGF0aH0vI3skZm9udC1maWxlbmFtZX0uZW90PyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSxcblx0XHRcdFx0dXJsKCcjeyRmaWxlLXBhdGh9LyN7JGZvbnQtZmlsZW5hbWV9LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxuXHRcdFx0XHR1cmwoJyN7JGZpbGUtcGF0aH0vI3skZm9udC1maWxlbmFtZX0ud29mZicpIGZvcm1hdCgnd29mZicpLFxuXHRcdFx0XHR1cmwoJyN7JGZpbGUtcGF0aH0vI3skZm9udC1maWxlbmFtZX0udHRmJykgZm9ybWF0KCd0cnVldHlwZScpLFxuXHRcdFx0XHR1cmwoJyN7JGZpbGUtcGF0aH0vI3skZm9udC1maWxlbmFtZX0uc3ZnIyN7JGZvbnQtZmlsZW5hbWV9JykgZm9ybWF0KCdzdmcnKTtcblx0XHR9XG5cblx0XHRmb250LXdlaWdodDogJHdlaWdodDtcblx0XHRmb250LXN0eWxlOiAkc3R5bGU7XG5cdH1cbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEZPUk1TXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCAnaW5kZXgnO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkRk9STVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5sYWJlbCB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgLjQpO1xufVxuXG50ZXh0YXJlYSB7XG4gIHJlc2l6ZTogbm9uZTtcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXgtaGVpZ2h0LCA2LjY2NjY2NjY2NjcpO1xufVxuXG5idXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhIHtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG5pbnB1dCwgaW5wdXRbdHlwZT0nc2VhcmNoJ10sIHRleHRhcmVhIHsgYm9yZGVyLXJhZGl1czogMDt9XG5cbmlucHV0LCB0ZXh0YXJlYSB7XG4gIGJvcmRlcjogMHB4IHNvbGlkO1xuICBoZWlnaHQ6IGF1dG87ICAgICAgICAgLy8gZG9uJ3QgYXBwbHkgaGVpZ2h0cyBzZXQgdG8gaW5wdXRzXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7ICAvLyBhbGwgYnJvd3NlcnMgbXVzdCB1c2UgRkYncyBVQSAhaW1wb3J0YW50IGZvciBjb25zaXN0ZW5jeVxuICBwYWRkaW5nOiAuNWVtO1xufVxuXG5pbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCB7XG4gIEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgLjQpO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbn1cblxuaW5wdXRbdHlwZT1cInJhZGlvXCJdLFxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHsgd2lkdGg6IGF1dG87fVxuXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0geyBsZXR0ZXItc3BhY2luZzogLjNlbTt9IC8vIHNwYWNlIHBhc3N3b3JkIHRvIG1hdGNoIGFjdHVhbCB0ZXh0XG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl06OnBsYWNlaG9sZGVyIHsgbGV0dGVyLXNwYWNpbmc6IDA7fVxuXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMHB4O1xuICBwYWRkaW5nOiAwcHg7XG4gIG1hcmdpbjogMHB4O1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkSEVBRElOR1NcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRJTUFHRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEZpeCBTVkcgaW1hZ2VzIG5vdCBzY2FsaW5nIHByb3BvcnRpb25hdGVseSBpbiBJRTksIElFMTAsIElFMTFcbiAqL1xuLy8gaW1nW3NyYyo9c3ZnXSB7XG4vLyAgIHdpZHRoLypcXCoqLzogMTAwJVxcOTtcbi8vIH1cblxuaW1nW2ltYWdlQ292ZXJdIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTElOS1NcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4lbGluay0tdHJhbnNpdGlvbiB7XG4gIHRyYW5zaXRpb246IGFsbCAxNTBtcyBlYXNlLWluLW91dDtcblxuICAmOmFjdGl2ZSB7IHRyYW5zaXRpb246IG5vbmU7fVxufVxuXG5hIHtcbiAgQGV4dGVuZCAlbGluay0tdHJhbnNpdGlvbjtcbiAgQGV4dGVuZCAlZmMtLXByaW1hcnk7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAmLFxuICAmOmhvdmVyIHsgb3V0bGluZTogMDt9XG5cbiAgJjp2aXNpdGVkIHt9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRMSVNUU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiVsaXN0LS1yZXNldCB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkUlVMRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRUQUJMRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG50aCwgdGQgeyBib3JkZXI6IDFweCBzb2xpZDt9XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRCQVNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaSB7IGZvbnQtc3R5bGU6IG5vcm1hbDt9XG5cbmJsb2NrcXVvdGUge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIEBpbmNsdWRlIGZvbnQtc2l6ZSgkZnMtaDMpO1xuICBAaW5jbHVkZSBzb2Z0O1xufVxuXG5rYmQge1xuICBib3JkZXI6IDFweCBzb2xpZCAkY2xyLW50cmwtMTA7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgZm9udC1zaXplOiA4NSU7XG4gIHBhZGRpbmc6IC4yNWVtIC41ZW07XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbmhyIHtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1sZWZ0OiAwO1xuICBib3JkZXItcmlnaHQ6IDA7XG4gIGJvcmRlci10b3A6IDA7XG59XG5cbkBpbmNsdWRlIGhlYWRpbmdzKDEsIDMpIHtcbiAgZm9udC1mYW1pbHk6ICRmb250LWhlYWRlci1zdGFjaztcbiAgbGluZS1oZWlnaHQ6IC44O1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuaDEge1xuXG4gICYgc21hbGwge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIEBleHRlbmQgJWZzLS1oMjtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRDT01QT05FTlRTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcImFsZXJ0c1wiO1xuQGltcG9ydCBcImJ1dHRvbnNcIjtcbkBpbXBvcnQgXCJpY29uLWFzLWZvbnRcIjtcbkBpbXBvcnQgXCJpY29uLWFzLWlubGluZS1zdmdcIjtcbkBpbXBvcnQgXCJsb2FkZXJzXCI7XG5AaW1wb3J0IFwic2lkZWJhclwiO1xuQGltcG9ydCBcIm1haW4tY29udGVudFwiO1xuQGltcG9ydCBcIm1lbnVzLyFhbGxcIjtcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEJVVFRPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5idXR0b24geyBAZXh0ZW5kICVsaW5rLS10cmFuc2l0aW9uO31cblxuJWJ0biB7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLCAuNSAyKTtcblxuICBAZXh0ZW5kICVidG47XG4gIEBleHRlbmQgJWxpbmstLXRyYW5zaXRpb247XG4gIEBleHRlbmQgJWZzLS1taWxsaTtcblxuICAmW2Rpc2FibGVkXSxcbiAgJjpkaXNhYmxlZCB7XG5cbiAgICAmLFxuICAgICY6aG92ZXIsXG4gICAgJjpmb2N1cyxcbiAgICAmOmFjdGl2ZSB7XG5cbiAgICB9XG4gIH1cbn1cblxuLmJ0bi0tYmFzZSB7XG4gIEBleHRlbmQgJWJ0bjtcbiAgY29sb3I6ICRjbHItYmFzZS1kaztcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjb2xvcjogJGNsci1udHJsLW1pbjtcbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBjb2xvcjogJGNsci1iYXNlLWRrO1xuICB9XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRMT0FERVJTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuIiwic2lkZWJhciB7XG4gIEBleHRlbmQgJWdyaWRfX2l0ZW07XG4gIHdpZHRoOiAyNjBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNsci1iYXNlO1xuICBjb2xvcjogd2hpdGU7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRNRU5VU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ2luZGV4JztcbkBpbXBvcnQgJ3ByaW1hcnknO1xuQGltcG9ydCAndG9nZ2xlJztcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJE1FTlVcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4lbWVudS1jb250YWluZXIge1xuICBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmcsIDEuNjYgMCk7XG59XG5cbiAgJW1lbnUge1xuICAgIEBleHRlbmQgJWxpc3QtLXJlc2V0O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZywgMS42NiAwKTtcbiAgfVxuXG4gICAgJW1lbnVfX2l0ZW0ge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcblxuICAgICAgJiA+IGEge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udC1oZWFkZXItc3RhY2s7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBsaW5lLWhlaWdodDogMi41O1xuICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICBAaW5jbHVkZSBweC1hbmQtcmVtKHBhZGRpbmctbGVmdCwgMik7XG4gICAgICAgIEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZy1yaWdodCwgMik7XG5cbiAgICAgICAgQGV4dGVuZCAlZnMtLWg0O1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB0b3A6IDYzJTtcbiAgICAgICAgICBAaW5jbHVkZSBweC1hbmQtcmVtKGxlZnQsIDIpO1xuICAgICAgICAgIEBpbmNsdWRlIHB4LWFuZC1yZW0ocmlnaHQsIDIpO1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgY29sb3I6ICRjbHItcHJpbWFyeS1sdDtcbiAgICAgICAgfVxuXG4gICAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgICBjb2xvcjogJGNsci1wcmltYXJ5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICVtZW51X19zdWIgJiB7IGRpc3BsYXk6IGJsb2NrO31cbiAgICB9XG4gICAgLm1lbnVfX2l0ZW0geyBAZXh0ZW5kICVtZW51X19pdGVtO31cblxuICAgICVtZW51X19pdGVtLS1jdXJyZW50IHtcbiAgICAgICYgPiBhIHtcbiAgICAgICAgJixcbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjpmb2N1cyxcbiAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgICBjb2xvcjogJGNsci1wcmltYXJ5O1xuICAgICAgICAgICY6YmVmb3JlIHsgb3BhY2l0eTogMTt9XG4gICAgICAgIH1cblxuICAgICAgICAmW3BhZ2VTY3JvbGxdIHtcbiAgICAgICAgICBjdXJzb3I6IGN1cnNvcjtcbiAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgJjpiZWZvcmUgeyBvcGFjaXR5OiAwO31cblxuICAgICAgICAgICY6aG92ZXIsXG4gICAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgICBjb2xvcjogJGNsci1wcmltYXJ5LWx0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgICAgIGNvbG9yOiAkY2xyLXByaW1hcnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC5tZW51X19pdGVtLS1jdXJyZW50LFxuICAgIC5tZW51X19pdGVtLS1jdXJyZW50LXBhcmVudCB7IEBleHRlbmQgJW1lbnVfX2l0ZW0tLWN1cnJlbnQ7fVxuXG4gICAgICAlbWVudV9fc3ViIHtcbiAgICAgICAgQGV4dGVuZCAlbGlzdC0tcmVzZXQ7XG4gICAgICAgIEBleHRlbmQgJWxpbmstLXRyYW5zaXRpb247XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICAgICAgICBhOmhvdmVyICsgJixcbiAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGJhc2UtdWktY29sb3I7XG4gICAgICAgICAgbWF4LWhlaWdodDogbm9uZTtcbiAgICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICAgICAgfVxuXG4gICAgICAgICYgYSB7XG4gICAgICAgICAgbWluLXdpZHRoOiAyMjVweDtcbiAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bmNvbGxhcHNlIG1lbnVfX3N1YiBsaW5rcyB3aGVuIGdyYW5kcGFyZW50cyBhcmUgaG92ZXJlZFxuICAgICAgICBhOmhvdmVyICsgJiA+ICVtZW51X19pdGVtIGEsXG4gICAgICAgICY6aG92ZXIgPiAlbWVudV9faXRlbSA+IGEge1xuICAgICAgICAgIG1heC1oZWlnaHQ6IDhlbTtcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMWVtO1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxZW07XG4gICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLm1lbnVfX3N1YiB7IEBleHRlbmQgJW1lbnVfX3N1Yjt9XG5cbiAgICAgICAgJW1lbnVfX3N1YiAlbWVudV9fc3ViIHtcbiAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgbGVmdDogMTAwJTtcbiAgICAgICAgfVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkUFJJTUFSWSBNRU5VXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLm1lbnUtLXByaW1hcnktY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBAZXh0ZW5kICVtZW51LWNvbnRhaW5lcjtcbn1cblxuICAubWVudS0tcHJpbWFyeSB7XG4gICAgJltBcHBNZW51XSB7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICB3aWR0aDogMjYwcHg7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDBtcyBsaW5lYXI7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG5cbiAgICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5IChwYWxtKSB7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBleHRlbmQgJW1lbnU7XG5cbiAgICAmICVtZW51X19pdGVtIHtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAuMTVlbTtcblxuICAgICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkgKHBhbG0pIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJE1FTlUgVE9HR0xFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJW1lbnUtdG9nZ2xlIHtcbiAgZGlzcGxheTogbm9uZTtcblxuICAmOmZvY3VzIHsgb3V0bGluZTpub25lO31cblxuICBAaW5jbHVkZSBtZWRpYS1xdWVyeShwb3J0YWJsZSkgeyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7fVxufVxuLm1lbnUtdG9nZ2xlIHsgQGV4dGVuZCAlbWVudS10b2dnbGU7fVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkUEFHRVNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdob21lJztcbkBpbXBvcnQgJ3doYXQnO1xuQGltcG9ydCAnd2hlbic7XG5AaW1wb3J0ICd3aHknO1xuQGltcG9ydCAnd2hlcmUnO1xuIiwicGVyc29uYSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJhY2tncm91bmQtY29sb3I6ICRjbHItcHJpbWFyeTtcbn1cblxuLnBlcnNvbmFcbntcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIG1hcmdpbjogYXV0bztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG59XG5cbi5wZXJzb25hX19tYWluXG57XG4gIGhlaWdodDogNDBweDtcbiAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICBsaW5lLWhlaWdodDogMTtcbiAgZm9udC1mYW1pbHk6ICRmb250LWJhc2Utc3RhY2s7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIEBleHRlbmQgJWZzLS1oMjtcblxuICAmIHNwYW4ge1xuICAgIGxpbmUtaGVpZ2h0OiAuODM7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1oZWFkZXItc3RhY2s7XG4gICAgZm9udC1zaXplOiAxLjJlbTsgLy8gNDhweCBmcm9tIDQwcHhcblxuICAgICY6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQ7XG4gICAgICB0b3A6IDc2JTtcbiAgICAgIGxlZnQ6IC4wM2VtO1xuICAgICAgcmlnaHQ6IC4wM2VtO1xuICAgIH1cbiAgfVxuICAmLnR5cGluZzphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQ7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgQGV4dGVuZCAlYW5pbS1mbGFzaDtcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDFzO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICB9XG59XG5cbi5wZXJzb25hX19pbWdcbntcbiAgbWFyZ2luOiAwIGF1dG87XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMjIwcHg7XG4gIEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgMS42Nik7XG59XG5cbiIsIi5wb3J0Zm9saW8taXRlbSB7XG4gIEBleHRlbmQgJXJhdGlvLW9iamVjdDtcblxuICAmOmJlZm9yZSB7XG4gICAgcGFkZGluZy1ib3R0b206IDEwMCU7XG4gIH1cbn1cbiAgLnBvcnRmb2xpby1pdGVtX19pbm5lciB7XG4gICAgQGV4dGVuZCAlcmF0aW8tb2JqZWN0X19pbm5lcjtcbiAgfVxuICAucG9ydGZvbGlvLWl0ZW1fX2ltYWdlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gIH1cblxuICAucG9ydGZvbGlvLWl0ZW1fX292ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBib3R0b206IGF1dG87XG4gICAgcmlnaHQ6IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7XG4gICAgei1pbmRleDogNTtcblxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMjUwbXM7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcbiAgICBhbmltYXRpb24tZGlyZWN0aW9uOiBub3JtYWw7XG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG5cbiAgICAucG9ydGZvbGlvLWl0ZW0taG9sZCAmIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAlLCAwJSk7XG4gICAgfVxuICAgIC5wb3J0Zm9saW8taXRlbS1pbi1sZWZ0ICYge1xuICAgICAgQGV4dGVuZCAlYW5pbS1pbi1sZWZ0O1xuICAgIH1cbiAgICAucG9ydGZvbGlvLWl0ZW0taW4tdG9wICYge1xuICAgICAgQGV4dGVuZCAlYW5pbS1pbi10b3A7XG4gICAgfVxuICAgIC5wb3J0Zm9saW8taXRlbS1pbi1yaWdodCAmIHtcbiAgICAgIEBleHRlbmQgJWFuaW0taW4tcmlnaHQ7XG4gICAgfVxuICAgIC5wb3J0Zm9saW8taXRlbS1pbi1ib3R0b20gJiB7XG4gICAgICBAZXh0ZW5kICVhbmltLWluLWJvdHRvbTtcbiAgICB9XG4gICAgLnBvcnRmb2xpby1pdGVtLW91dC1sZWZ0ICYge1xuICAgICAgQGV4dGVuZCAlYW5pbS1pbi1yaWdodDtcbiAgICAgIGFuaW1hdGlvbi1kaXJlY3Rpb246IHJldmVyc2U7XG4gICAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7XG4gICAgfVxuICAgIC5wb3J0Zm9saW8taXRlbS1vdXQtdG9wICYge1xuICAgICAgQGV4dGVuZCAlYW5pbS1pbi1ib3R0b207XG4gICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiByZXZlcnNlO1xuICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYmFja3dhcmRzO1xuICAgIH1cbiAgICAucG9ydGZvbGlvLWl0ZW0tb3V0LXJpZ2h0ICYge1xuICAgICAgQGV4dGVuZCAlYW5pbS1pbi1sZWZ0O1xuICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogcmV2ZXJzZTtcbiAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJhY2t3YXJkcztcbiAgICB9XG4gICAgLnBvcnRmb2xpby1pdGVtLW91dC1ib3R0b20gJiB7XG4gICAgICBAZXh0ZW5kICVhbmltLWluLXRvcDtcbiAgICAgIGFuaW1hdGlvbi1kaXJlY3Rpb246IHJldmVyc2U7XG4gICAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7XG4gICAgfVxuICB9XG5cbiAgLnBvcnRmb2xpby1pdGVtX19jZW50ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgYm90dG9tOiBhdXRvO1xuICAgIHJpZ2h0OiBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIEBpbmNsdWRlIHB4LWFuZC1yZW0ocGFkZGluZywgMik7XG4gIH1cblxuICAucG9ydGZvbGlvLWl0ZW1fX3RpdGxlIHtcbiAgICBmb250LWZhbWlseTogJGZvbnQtaGVhZGVyLXN0YWNrO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xuICAgIGNvbG9yOiAkY2xyLWJhc2U7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICBsaW5lLWhlaWdodDogLjg7XG5cbiAgICBAZXh0ZW5kICVmcy0ta2lsbztcbiAgICBAZXh0ZW5kICVwdXNoLS1sYXJnZS0tYm90dG9tO1xuICB9XG5cbiAgLnBvcnRmb2xpby1pdGVtX19zaG9ydCB7XG4gICAgY29sb3I6ICRjbHItYmFzZTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgIEBleHRlbmQgJXB1c2gtLWxhcmdlLS1ib3R0b207XG4gIH1cbiIsIi5nb29nbGUtbWFwLXdyYXBwZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5zZWJtLWdvb2dsZS1tYXAtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5nb29nbGUtbWFwLW92ZXJsYXkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDA7XG4gIHotaW5kZXg6IDU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoJGNsci1iYXNlLWx0c3QsIC44KTtcbiAgQGV4dGVuZCAlc29mdC0tbGFyZ2U7XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRWRU5ET1IgU1RZTEVTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJHVzZS1hdXRvY29tcGxldGU6ICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1kYXRlcGlja2VyOiAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS1maWxlLXVwbG9hZDogICBmYWxzZSFkZWZhdWx0O1xuJHVzZS10b29sdGlwczogICAgICBmYWxzZSFkZWZhdWx0O1xuJHVzZS13eXNpd3lnOiAgICAgICBmYWxzZSFkZWZhdWx0O1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEFVVE9DT01QTEVURVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgXCJhdXRvY29tcGxldGVcIjtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICREQVRFUElDS0VSXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcImRhdGVwaWNrZXJcIjtcblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRGSUxFIFVQTE9BRFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgXCJmaWxlLXVwbG9hZFwiO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFRPT0xUSVBTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGltcG9ydCBcInRvb2x0aXBzXCI7XG5cblxuXG5cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkV1lTSVdZR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgXCJ3eXNpd3lnXCI7XG5cblxuXG5cblxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkTU9ESUZJRVJTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEJBQ0tHUk9VTkRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdiYWNrZ3JvdW5kLyFhbGwnO1xuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFRZUE9HUkFQSFlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICd0eXBvZ3JhcGh5LyFhbGwnO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQkFDS0dST1VORFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdjb2xvcnMnO1xuQGltcG9ydCAnbGluay1zdGF0ZXMnO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQkFDS0dST1VORCBDT0xPUlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4uYmdjLS1wcmltYXJ5LWRrIHsgYmFja2dyb3VuZC1jb2xvcjogJGNsci1wcmltYXJ5LWRrO31cbi5iZ2MtLXByaW1hcnkgICAgeyBiYWNrZ3JvdW5kLWNvbG9yOiAkY2xyLXByaW1hcnk7fVxuLmJnYy0tcHJpbWFyeS1sdCB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItcHJpbWFyeS1sdDt9XG5cbi5iZ2MtLXNlY29uZGFyeS1kayB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItc2Vjb25kYXJ5LWRrO31cbi5iZ2MtLXNlY29uZGFyeSAgICB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItc2Vjb25kYXJ5O31cbi5iZ2MtLXNlY29uZGFyeS1sdCB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItc2Vjb25kYXJ5LWx0O31cblxuLmJnYy0tdGVydGlhcnktZGsgeyBiYWNrZ3JvdW5kLWNvbG9yOiAkY2xyLXRlcnRpYXJ5LWRrO31cbi5iZ2MtLXRlcnRpYXJ5ICAgIHsgYmFja2dyb3VuZC1jb2xvcjogJGNsci10ZXJ0aWFyeTt9XG4uYmdjLS10ZXJ0aWFyeS1sdCB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItdGVydGlhcnktbHQ7fVxuXG4uYmdjLS1iYXNlLWRrIHsgYmFja2dyb3VuZC1jb2xvcjogJGNsci1iYXNlLWRrO31cbi5iZ2MtLWJhc2UgICAgeyBiYWNrZ3JvdW5kLWNvbG9yOiAkY2xyLWJhc2U7fVxuLmJnYy0tYmFzZS1sdCB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItYmFzZS1sdDt9XG4uYmdjLS1iYXNlLWx0ciB7IGJhY2tncm91bmQtY29sb3I6ICRjbHItYmFzZS1sdHI7fVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQkFDS0dST1VORCBMSU5LIFNUQVRFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmElYmdjLS1wcmltYXJ5LFxuYnV0dG9uJWJnYy0tcHJpbWFyeSB7XG4gIEBpbmNsdWRlIGJnYy0tbGluay1zdGF0ZXMoXG4gICAgJGNsci1wcmltYXJ5LFxuICAgICRjbHItcHJpbWFyeS1sdCxcbiAgICAkY2xyLXByaW1hcnktZGtcbiAgKTtcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFRZUE9HUkFQSFlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5AaW1wb3J0ICdhbGlnbm1lbnQnO1xuQGltcG9ydCAnY29sb3JzJztcbkBpbXBvcnQgJ2ZvbnQtZmFtaWx5JztcbkBpbXBvcnQgJ3Zpc2liaWxpdHknO1xuQGltcG9ydCAnd3lzaXd5Zyc7XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRBTElHTk1FTlRcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ldGV4dC0tbGVmdCAgIHsgdGV4dC1hbGlnbjogbGVmdDt9XG4ldGV4dC0tY2VudGVyIHsgdGV4dC1hbGlnbjogY2VudGVyO31cbiV0ZXh0LS1yaWdodCAgeyB0ZXh0LWFsaWduOiByaWdodDt9XG5cbi50ZXh0LS1yaWdodCB7IEBleHRlbmQgJXRleHQtLXJpZ2h0O31cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEZPTlQgQ09MT1IgTU9ESUZJRVJTXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuJWZjLS1iYXNlIHsgY29sb3I6ICRjbHItYmFzZTt9XG5hJWZjLS1iYXNlLFxuYnV0dG9uJWZjLS1iYXNlIHtcbiAgQGluY2x1ZGUgZmMtLWxpbmstc3RhdGVzKFxuICAgICRjbHItYmFzZSxcbiAgICAkY2xyLWJhc2UtbHQsXG4gICAgJGNsci1iYXNlLWRrXG4gICk7XG59XG5cbiVmYy0tcHJpbWFyeSB7IGNvbG9yOiAkY2xyLXByaW1hcnk7fVxuYSVmYy0tcHJpbWFyeSxcbmJ1dHRvbiVmYy0tcHJpbWFyeSB7XG4gIEBpbmNsdWRlIGZjLS1saW5rLXN0YXRlcyhcbiAgICAkY2xyLXByaW1hcnksXG4gICAgJGNsci1wcmltYXJ5LWx0LFxuICAgICRjbHItcHJpbWFyeS1ka1xuICApO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkRk9OVCBGQU1JTFlcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4lZmYtLWJhc2UgeyBmb250LWZhbWlseTogJGZvbnQtYmFzZS1zdGFjazt9XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRWSVNJQklMSVRZXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBIaWRlIGZyb20gYm90aCBzY3JlZW5yZWFkZXJzIGFuZCBicm93c2VyczogaDVicC5jb20vdVxuICovXG4uaGlkZGVuIHsgZGlzcGxheTogbm9uZTsgdmlzaWJpbGl0eTogaGlkZGVuO31cblxuXG4vKipcbiAqIEhpZGUgY29udGVudCBvZmYtc2NyZWVuIHdpdGhvdXQgcmVzb3J0aW5nIHRvIGBkaXNwbGF5Om5vbmU7YCwgYWxzbyBwcm92aWRlXG4gKiBicmVha3BvaW50IHNwZWNpZmljIGhpZGRlbiBlbGVtZW50cy5cbiAqL1xuJXZpc3VhbGx5aGlkZGVuIHtcbiAgQGluY2x1ZGUgYWNjZXNzaWJpbGl0eTtcblxuICAmLmZvY3VzYWJsZTphY3RpdmUsICYuZm9jdXNhYmxlOmZvY3VzIHtcbiAgICBwb3NpdGlvbjogc3RhdGljO1xuICAgIGNsaXA6IGF1dG87XG4gICAgd2lkdGg6IGF1dG87XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIG1hcmdpbjogMDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiB9XG59XG4uYWNjZXNzaWJpbGl0eSxcbi52aXN1YWxseWhpZGRlbiB7IEBleHRlbmQgJXZpc3VhbGx5aGlkZGVuO31cblxuQGlmICRyZXNwb25zaXZlIHtcbiAgQGVhY2ggJHN0YXRlIGluIHBhbG0sIGxhcCwgbGFwLWFuZC11cCwgcG9ydGFibGUsIGRlc2ssIGRlc2std2lkZSB7XG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoI3skc3RhdGV9KSB7XG4gICAgICAuYWNjZXNzaWJpbGl0eS0tI3skc3RhdGV9LFxuICAgICAgLnZpc3VhbGx5aGlkZGVuLS0jeyRzdGF0ZX0ge1xuICAgICAgICBAaW5jbHVkZSBhY2Nlc3NpYmlsaXR5O1xuICAgICB9XG4gICB9XG4gfVxufS8vZW5kaWZcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJFdZU0lXWUcgQ0xBU1NFU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXG5cblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRUSU5ZTUNFXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGlmICR1c2UtdGlueW1jZSB7XG4uYWxpZ25fbGVmdCAgICB7IEBleHRlbmQgJXRleHQtLWxlZnQ7fVxuLmFsaWduX2NlbnRlciAgeyBAZXh0ZW5kICV0ZXh0LS1jZW50ZXI7fVxuLmFsaWduX3JpZ2h0ICAgeyBAZXh0ZW5kICV0ZXh0LS1yaWdodDt9XG5cbmltZy5hbGlnbl9sZWZ0IHtcbiAgZmxvYXQ6bGVmdDtcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tcmlnaHQsIDEuNSk7XG4gIEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLWJvdHRvbSwgMSk7XG59XG5cbmltZy5hbGlnbl9yaWdodCB7XG4gIGZsb2F0OnJpZ2h0O1xuICBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1sZWZ0LCAxLjUpO1xuICBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1ib3R0b20sIDEpO1xufVxuXG5pbWcuYWxpZ25fY2VudGVyIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxufVxuXG5cblxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJENLRURJVE9SXG5cXCotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuQGlmICR1c2UtY2tlZGl0b3Ige1xuLmFsaWduX2xlZnQgICAgeyBAZXh0ZW5kICV0ZXh0LS1sZWZ0O31cbi5hbGlnbl9jZW50ZXIgIHsgQGV4dGVuZCAldGV4dC0tY2VudGVyO31cbi5hbGlnbl9yaWdodCAgIHsgQGV4dGVuZCAldGV4dC0tcmlnaHQ7fVxuXG5pbWcuYWxpZ25fbGVmdCB7XG4gIGZsb2F0OmxlZnQ7XG4gIEBpbmNsdWRlIHB4LWFuZC1yZW0obWFyZ2luLXJpZ2h0LCAxLjUpO1xuICBAaW5jbHVkZSBweC1hbmQtcmVtKG1hcmdpbi1ib3R0b20sIDEpO1xufVxuXG5pbWcuYWxpZ25fcmlnaHQge1xuICBmbG9hdDpyaWdodDtcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tbGVmdCwgMS41KTtcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShtYXJnaW4tYm90dG9tLCAxKTtcbn1cblxuaW1nLmFsaWduX2NlbnRlciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDAgYXV0bztcbn1cbn1cblxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQUxMIExBWU9VVFxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ2Rpc3BsYXknO1xuQGltcG9ydCAnZm9vdGVyJztcbkBpbXBvcnQgJ2dyaWQnO1xuQGltcG9ydCAnaGVhZGVyJztcbkBpbXBvcnQgJ2lzbGFuZHMnO1xuQGltcG9ydCAnbWFyZ2luJztcbkBpbXBvcnQgJ3BhZGRpbmcnO1xuQGltcG9ydCAnd3JhcHMnO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkRElTUExBWVxuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiVkaXNwbGF5LS1ibG9jayB7IGRpc3BsYXk6IGJsb2NrO31cblxuaW5wdXQlZGlzcGxheS0tYmxvY2ssXG50ZXh0YXJlYSVkaXNwbGF5LS1ibG9jayxcbmJ1dHRvbiVkaXNwbGF5LS1ibG9jayB7IHdpZHRoOiAxMDAlO31cblxuJWRpc3BsYXktLWlibG9jayB7IGRpc3BsYXk6IGlubGluZS1ibG9jazt9XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRGT09URVJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4uYXJlYS1mb290ZXIge31cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEdSSURcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEV4dGVuZCBncmlkIG1vZGlmaWVycyBoZXJlXG4gKi9cblxuLmd3LS1uby1ndXRzIHsgQGV4dGVuZCAlZ3ctLW5vLWd1dHM7fVxuXG4lZ3JpZC0tYXV0byB7XG4gIEBleHRlbmQgJWdyaWRfX2l0ZW07XG5cbiAgQGlmICR1c2UtbGVnYWN5LWdyaWQge1xuICAgICAgLm9sZGllICYgeyBkaXNwbGF5OiB0YWJsZS1jZWxsO31cbiAgfVxuXG4gIEBpZiAkdXNlLWZsZXhib3gtZ3JpZCB7IGZsZXg6IDE7fVxufVxuIiwibWFpbiB7XG4gIEBleHRlbmQgJWdyaWQtLWF1dG87XG59XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRIRUFERVJcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4uYXJlYS1oZWFkZXIge31cblxuLmxvZ29cbntcbiAgQGluY2x1ZGUgcHgtYW5kLXJlbShwYWRkaW5nLCAwIDIpO1xuICBkaXNwbGF5OiBibG9jaztcbn1cbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG5cdFx0JElTTEFORFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4laXNsYW5kLS10b3AgeyBAaW5jbHVkZSBpc2xhbmQtLXRvcDt9XG4laXNsYW5kLS1ib3R0b20geyBAaW5jbHVkZSBpc2xhbmQtLWJvdHRvbTt9XG5cbiVpc2xhbmQgeyBAaW5jbHVkZSBpc2xhbmQ7fVxuLmlzbGFuZCB7IEBleHRlbmQgJWlzbGFuZDt9XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXFxuICAgICRNQVJHSU5cblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4lcHVzaC0tbGFyZ2UgICAgICAgICB7IEBpbmNsdWRlIHB1c2gtLWxhcmdlO31cbiVwdXNoLS1sYXJnZS0tdG9wICAgIHsgQGluY2x1ZGUgcHVzaC0tbGFyZ2UtLXRvcDt9XG4lcHVzaC0tbGFyZ2UtLXJpZ2h0ICB7IEBpbmNsdWRlIHB1c2gtLWxhcmdlLS1yaWdodDt9XG4lcHVzaC0tbGFyZ2UtLWJvdHRvbSB7IEBpbmNsdWRlIHB1c2gtLWxhcmdlLS1ib3R0b207fVxuJXB1c2gtLWxhcmdlLS1sZWZ0ICAgeyBAaW5jbHVkZSBwdXNoLS1sYXJnZS0tbGVmdDt9XG4lcHVzaC0tbGFyZ2UtLWVuZHMgICB7IEBpbmNsdWRlIHB1c2gtLWxhcmdlLS1lbmRzO31cbiVwdXNoLS1sYXJnZS0tc2lkZXMgIHsgQGluY2x1ZGUgcHVzaC0tbGFyZ2UtLXNpZGVzO31cblxuJXB1c2ggICAgICAgICAgICAgICAgeyBAaW5jbHVkZSBwdXNoO31cbiVwdXNoLS10b3AgICAgICAgICAgIHsgQGluY2x1ZGUgcHVzaC0tdG9wO31cbiVwdXNoLS1yaWdodCAgICAgICAgIHsgQGluY2x1ZGUgcHVzaC0tcmlnaHQ7fVxuJXB1c2gtLWJvdHRvbSAgICAgICAgeyBAaW5jbHVkZSBwdXNoLS1ib3R0b207fVxuJXB1c2gtLWxlZnQgICAgICAgICAgeyBAaW5jbHVkZSBwdXNoLS1sZWZ0O31cbiVwdXNoLS1lbmRzICAgICAgICAgIHsgQGluY2x1ZGUgcHVzaC0tZW5kczt9XG4lcHVzaC0tc2lkZXMgICAgICAgICB7IEBpbmNsdWRlIHB1c2gtLXNpZGVzO31cblxuJXB1c2gtLXNtYWxsICAgICAgICAgeyBAaW5jbHVkZSBwdXNoLS1zbWFsbDt9XG4lcHVzaC0tc21hbGwtLXRvcCAgICB7IEBpbmNsdWRlIHB1c2gtLXNtYWxsLS10b3A7fVxuJXB1c2gtLXNtYWxsLS1yaWdodCAgeyBAaW5jbHVkZSBwdXNoLS1zbWFsbC0tcmlnaHQ7fVxuJXB1c2gtLXNtYWxsLS1ib3R0b20geyBAaW5jbHVkZSBwdXNoLS1zbWFsbC0tYm90dG9tO31cbiVwdXNoLS1zbWFsbC0tbGVmdCAgIHsgQGluY2x1ZGUgcHVzaC0tc21hbGwtLWxlZnQ7fVxuJXB1c2gtLXNtYWxsLS1lbmRzICAgeyBAaW5jbHVkZSBwdXNoLS1zbWFsbC0tZW5kczt9XG4lcHVzaC0tc21hbGwtLXNpZGVzICB7IEBpbmNsdWRlIHB1c2gtLXNtYWxsLS1zaWRlczt9XG5cbiVmbHVzaCAgICAgICAgICAgICAgIHsgQGluY2x1ZGUgZmx1c2g7fVxuJWZsdXNoLS10b3AgICAgICAgICAgeyBAaW5jbHVkZSBmbHVzaC0tdG9wO31cbiVmbHVzaC0tcmlnaHQgICAgICAgIHsgQGluY2x1ZGUgZmx1c2gtLXJpZ2h0O31cbiVmbHVzaC0tYm90dG9tICAgICAgIHsgQGluY2x1ZGUgZmx1c2gtLWJvdHRvbTt9XG4lZmx1c2gtLWxlZnQgICAgICAgICB7IEBpbmNsdWRlIGZsdXNoLS1sZWZ0O31cbiVmbHVzaC0tZW5kcyAgICAgICAgIHsgQGluY2x1ZGUgZmx1c2gtLWVuZHM7fVxuJWZsdXNoLS1zaWRlcyAgICAgICAgeyBAaW5jbHVkZSBmbHVzaC0tc2lkZXM7fVxuXG4uZmx1c2gtLWJvdHRvbSB7IEBleHRlbmQgJWZsdXNoLS1ib3R0b207fVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkUEFERElOR1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiVzb2Z0LS1sYXJnZSAgICAgICAgIHsgQGluY2x1ZGUgc29mdC0tbGFyZ2U7fVxuJXNvZnQtLWxhcmdlLS10b3AgICAgeyBAaW5jbHVkZSBzb2Z0LS1sYXJnZS0tdG9wO31cbiVzb2Z0LS1sYXJnZS0tcmlnaHQgIHsgQGluY2x1ZGUgc29mdC0tbGFyZ2UtLXJpZ2h0O31cbiVzb2Z0LS1sYXJnZS0tYm90dG9tIHsgQGluY2x1ZGUgc29mdC0tbGFyZ2UtLWJvdHRvbTt9XG4lc29mdC0tbGFyZ2UtLWxlZnQgICB7IEBpbmNsdWRlIHNvZnQtLWxhcmdlLS1sZWZ0O31cbiVzb2Z0LS1sYXJnZS0tZW5kcyAgIHsgQGluY2x1ZGUgc29mdC0tbGFyZ2UtLWVuZHM7fVxuJXNvZnQtLWxhcmdlLS1zaWRlcyAgeyBAaW5jbHVkZSBzb2Z0LS1sYXJnZS0tc2lkZXM7fVxuXG4lc29mdCAgICAgICAgICAgICAgICB7IEBpbmNsdWRlIHNvZnQ7fVxuJXNvZnQtLXRvcCAgICAgICAgICAgeyBAaW5jbHVkZSBzb2Z0LS10b3A7fVxuJXNvZnQtLXJpZ2h0ICAgICAgICAgeyBAaW5jbHVkZSBzb2Z0LS1yaWdodDt9XG4lc29mdC0tYm90dG9tICAgICAgICB7IEBpbmNsdWRlIHNvZnQtLWJvdHRvbTt9XG4lc29mdC0tbGVmdCAgICAgICAgICB7IEBpbmNsdWRlIHNvZnQtLWxlZnQ7fVxuJXNvZnQtLWVuZHMgICAgICAgICAgeyBAaW5jbHVkZSBzb2Z0LS1lbmRzO31cbiVzb2Z0LS1zaWRlcyAgICAgICAgIHsgQGluY2x1ZGUgc29mdC0tc2lkZXM7fVxuXG4lc29mdC0tc21hbGwgICAgICAgICB7IEBpbmNsdWRlIHNvZnQtLXNtYWxsO31cbiVzb2Z0LS1zbWFsbC0tdG9wICAgIHsgQGluY2x1ZGUgc29mdC0tc21hbGwtLXRvcDt9XG4lc29mdC0tc21hbGwtLXJpZ2h0ICB7IEBpbmNsdWRlIHNvZnQtLXNtYWxsLS1yaWdodDt9XG4lc29mdC0tc21hbGwtLWJvdHRvbSB7IEBpbmNsdWRlIHNvZnQtLXNtYWxsLS1ib3R0b207fVxuJXNvZnQtLXNtYWxsLS1sZWZ0ICAgeyBAaW5jbHVkZSBzb2Z0LS1zbWFsbC0tbGVmdDt9XG4lc29mdC0tc21hbGwtLWVuZHMgICB7IEBpbmNsdWRlIHNvZnQtLXNtYWxsLS1lbmRzO31cbiVzb2Z0LS1zbWFsbC0tc2lkZXMgIHsgQGluY2x1ZGUgc29mdC0tc21hbGwtLXNpZGVzO31cblxuJWhhcmQgICAgICAgICAgICAgICAgeyBAaW5jbHVkZSBoYXJkO31cbiVoYXJkLS10b3AgICAgICAgICAgIHsgQGluY2x1ZGUgaGFyZC0tdG9wO31cbiVoYXJkLS1yaWdodCAgICAgICAgIHsgQGluY2x1ZGUgaGFyZC0tcmlnaHQ7fVxuJWhhcmQtLWJvdHRvbSAgICAgICAgeyBAaW5jbHVkZSBoYXJkLS1ib3R0b207fVxuJWhhcmQtLWxlZnQgICAgICAgICAgeyBAaW5jbHVkZSBoYXJkLS1sZWZ0O31cbiVoYXJkLS1lbmRzICAgICAgICAgIHsgQGluY2x1ZGUgaGFyZC0tZW5kczt9XG4laGFyZC0tc2lkZXMgICAgICAgICB7IEBpbmNsdWRlIGhhcmQtLXNpZGVzO31cblxuLnNvZnQtLWxhcmdlIHsgQGV4dGVuZCAlc29mdC0tbGFyZ2U7fVxuLnNvZnQtLWxhcmdlLS10b3AgeyBAZXh0ZW5kICVzb2Z0LS1sYXJnZS0tdG9wO31cbi5zb2Z0LS10b3AgeyBAZXh0ZW5kICVzb2Z0LS10b3A7fVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkV1JBUFNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4kd3JhcC13aWR0aHM6IChcbiAgbGFyZ2U6IDEyMDBweCxcbiAgYmFzZTogMTI4MHB4LFxuICBzbWFsbDogOTYwcHgsXG4pO1xuXG4ld3JhcC1iYXNlIHtcbiAgQGluY2x1ZGUgd3JhcC1tYXJnaW47XG4gIEBpbmNsdWRlIHdyYXAtcGFkZGluZztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgY2xhc3NlcyBhbmQgcGxhY2Vob2xkZXJzIGZvciB3cmFwcyBhbmQgdGhlaXIgd2lkdGhzXG4gKiBlLmcuXG5cbiAgJXdyYXAtd2lkdGgtLWxhcmdlIHsgbWF4LXdpZHRoOiAxMjgwcHg7fVxuICAud3JhcC0tbGFyZ2UgeyAuLi4gfVxuICAld3JhcC13aWR0aCAgICAgICAgeyBtYXgtd2lkdGg6IDk2MHB4O31cbiAgLndyYXAgeyAuLi4gfVxuICAld3JhcC13aWR0aC0tc21hbGwgeyBtYXgtd2lkdGg6IDY0MHB4O31cbiAgLndyYXAtLXNtYWxsIHsgLi4uIH1cbiAqL1xuQGVhY2ggJHdyYXAtbmFtZSwgJHdyYXAtd2lkdGggaW4gJHdyYXAtd2lkdGhzIHtcbiAgQGlmICR3cmFwLW5hbWUgPT0gJ2Jhc2UnIHtcbiAgICAld3JhcC13aWR0aCB7IG1heC13aWR0aDogJHdyYXAtd2lkdGg7fVxuICAgICV3cmFwIHtcbiAgICAgIEBleHRlbmQgJXdyYXAtd2lkdGg7XG4gICAgICBAZXh0ZW5kICV3cmFwLWJhc2U7XG4gICAgfVxuICAgIC53cmFwIHsgQGV4dGVuZCAld3JhcDt9XG4gIH0gQGVsc2Uge1xuICAgICV3cmFwLXdpZHRoLS0jeyR3cmFwLW5hbWV9IHsgbWF4LXdpZHRoOiAkd3JhcC13aWR0aDt9XG4gICAgJXdyYXAtLSN7JHdyYXAtbmFtZX0ge1xuICAgICAgQGV4dGVuZCAld3JhcC13aWR0aC0tI3skd3JhcC1uYW1lfTtcbiAgICAgIEBleHRlbmQgJXdyYXAtYmFzZTtcbiAgICB9XG4gICAgLndyYXAtLSN7JHdyYXAtbmFtZX0geyBAZXh0ZW5kICV3cmFwLS0jeyR3cmFwLW5hbWV9O31cbiAgfVxufVxuXG4uY29udGVudC0tbGVmdCB7XG4gIEBleHRlbmQgJXdyYXAtd2lkdGgtLXNtYWxsO1xuICBtYXJnaW4tbGVmdDogMHB4O1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcbiAgICAkQU5JTUFUSU9OU1xuXFwqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbkBpbXBvcnQgJ2luZGV4Jztcbi8vIEBpbXBvcnQgJ2FuZ3VsYXInO1xuQGltcG9ydCAnZmxhc2gnO1xuQGltcG9ydCAnaW4tbGVmdCc7XG5AaW1wb3J0ICdpbi1yaWdodCc7XG5AaW1wb3J0ICdpbi1ib3R0b20nO1xuQGltcG9ydCAnaW4tdG9wJztcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcXG4gICAgJEFOSU1BVElPTlNcblxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vLyBAa2V5ZnJhbWVzIGZhZGUtaW4tLWZyb20tdG9wIHtcbi8vICAgMCUge1xuLy8gICAgIG9wYWNpdHk6IDA7XG4vLyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yMHB4KTtcbi8vICAgfVxuXG4vLyAgIDEwMCUge1xuLy8gICAgIG9wYWNpdHk6IDE7XG4vLyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuLy8gICB9XG4vLyB9XG5cbi8vICVhbmltLWZhZGUtaW4tLWZyb20tdG9wIHsgYW5pbWF0aW9uLW5hbWU6IGZhZGUtaW4tLWZyb20tdG9wO31cbi8vIC5hbmltLWZhZGUtaW4tLWZyb20tdG9wIHsgQGV4dGVuZCAlYW5pbS1mYWRlLWluLS1mcm9tLXRvcDt9XG4iLCJAa2V5ZnJhbWVzIGZsYXNoIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgNDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG4gIDUwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG59XG5cbiVhbmltLWZsYXNoIHsgYW5pbWF0aW9uLW5hbWU6IGZsYXNoO31cbi5hbmltLWZsYXNoIHsgQGV4dGVuZCAlYW5pbS1mbGFzaDt9XG5cbiIsIkBrZXlmcmFtZXMgaW4tbGVmdCB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuJWFuaW0taW4tbGVmdCB7IGFuaW1hdGlvbi1uYW1lOiBpbi1sZWZ0O31cbi5hbmltLWluLWxlZnQgeyBAZXh0ZW5kICVhbmltLWluLWxlZnQ7fVxuXG4iLCJAa2V5ZnJhbWVzIGluLXJpZ2h0IHtcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG5cbiVhbmltLWluLXJpZ2h0IHsgYW5pbWF0aW9uLW5hbWU6IGluLXJpZ2h0O31cbi5hbmltLWluLXJpZ2h0IHsgQGV4dGVuZCAlYW5pbS1pbi1yaWdodDt9XG5cbiIsIkBrZXlmcmFtZXMgaW4tYm90dG9tIHtcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG5cbiVhbmltLWluLWJvdHRvbSB7IGFuaW1hdGlvbi1uYW1lOiBpbi1ib3R0b207fVxuLmFuaW0taW4tYm90dG9tIHsgQGV4dGVuZCAlYW5pbS1pbi1ib3R0b207fVxuXG4iLCJAa2V5ZnJhbWVzIGluLXRvcCB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMCUpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuJWFuaW0taW4tdG9wIHsgYW5pbWF0aW9uLW5hbWU6IGluLXRvcDt9XG4uYW5pbS1pbi10b3AgeyBAZXh0ZW5kICVhbmltLWluLXRvcDt9XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */
